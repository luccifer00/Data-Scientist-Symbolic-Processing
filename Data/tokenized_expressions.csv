"{'expression0': ['Sum', 'Mul', ['9'], ['Pow', '10', 'Add', 'k', '-1'], 'over', '(k, 1, 321)'], 'expression1': ['<function N at 0x0000027A4DE17880>']}","{'expression0': ['Pow', '10', 'n'], 'expression1': ['Sum', 'Add', 'Pow', '10', 'k', '-1', 'over', '(k, 1, 321)'], 'expression2': ['Add', 'Sum', 'Pow', '10', 'k', 'over', '(k, 1, 321)', '-321'], 'expression3': ['Mul', ['Add', 'Pow', '10', '322', '-1'], ['Pow', '9', '-1']], 'expression4': ['321'], 'expression5': ['1110'], 'expression6': ['321'], 'expression7': ['Equality', 'Add', '1110', '-321', '789'], 'expression8': ['1'], 'expression9': ['7'], 'expression10': ['8'], 'expression11': ['9'], 'expression12': ['Equality', 'Add', '321', '-3', '342']}","{'expression0': ['1'], 'expression1': ['Sum', 'Pow', '10', 'k', 'over', '(k, 0, 321)'], 'expression2': ['321'], 'expression3': ['Mul', ['Add', 'Pow', '10', '322', '-10'], ['Pow', '9', '-1']], 'expression4': ['322'], 'expression5': ['Mul', ['Add', 'Pow', '10', '322', '-10'], ['Pow', '9', '-1']], 'expression6': ['321']}","{'expression0': ['Equality', '9', '9'], 'expression1': ['Equality', 'Add', '9', '99', '108'], 'expression2': ['Equality', 'Add', '9', '99', '1107'], 'expression3': ['11111111100'], 'expression4': ['{342}'], 'expression5': ['Mul', ['9'], ['floor(log(321, 10))']], 'expression6': ['Mul', ['9'], ['ceiling(321/9)']]}","{'expression0': ['1'], 'expression1': ['1'], 'expression2': ['(9, 108, 1107, 11106)'], 'expression3': ['n'], 'expression4': ['Add', 'Mul', ['Add', 'Pow', '10', '322', '-1'], ['Pow', '9', '-1'], 'Mul', ['-1'], ['n']], 'expression5': ['Add', '1', 'n'], 'expression6': ['{342}']}","{'expression0': ['9'], 'expression1': ['99'], 'expression2': ['Add', 'Pow', '10', '321', '-1'], 'expression3': ['{321}'], 'expression4': ['{321}'], 'expression5': ['{321}'], 'expression6': ['<function N at 0x0000027A4DE17880>'], 'expression7': ['Equality', 'Add', '7', '8', '342']}"
"{'expression0': ['J'], 'expression1': ['[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]'], 'expression2': ['B'], 'expression3': ['[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]'], 'expression4': ['J'], 'expression5': ['Add', 'B', 'Mul', ['-1'], ['J']], 'expression6': ['2'], 'expression7': ['Mul', ['m'], ['Pow', 'n', '-1']], 'expression8': ['m'], 'expression9': ['n'], 'expression10': ['Add', 'm', 'n']}","{'expression0': ['Add', 'J', 'Mul', ['-1'], ['B']], 'expression1': ['-2'], 'expression2': ['Mul', ['Add', '1', 'Mul', ['-1'], ['P']], ['Pow', '2', '-1']], 'expression3': ['P'], 'expression4': ['B'], 'expression5': ['J'], 'expression6': ['1'], 'expression7': ['Equality', 'Mul', ['20'], ['19'], '380'], 'expression8': ['B'], 'expression9': ['J'], 'expression10': ['Equality', 'Add', '1', 'Mul', ['18'], ['2'], '38'], 'expression11': ['P'], 'expression12': ['Equality', 'Equality', 'P', 'Mul', ['38'], ['Pow', '380', '-1'], 'Mul', ['1'], ['Pow', '10', '-1']], 'expression13': ['Mul', ['9'], ['Pow', '20', '-1']]}","{'expression0': ['Ne(B - J, 0)'], 'expression1': ['Ne(B, J)'], 'expression2': ['B - J < 0'], 'expression3': ['Mul', ['1'], ['Pow', '2', '-1']], 'expression4': ['Equality', 'Add', 'B', 'Mul', ['-1'], ['J'], '1'], 'expression5': ['Equality', 'Mul', ['19'], ['Pow', 'Mul', ['20'], ['19'], '-1'], 'Mul', ['1'], ['Pow', '20', '-1']], 'expression6': ['(1 <= J) & (2 <= B) & (B <= 20) & (J <= 19)'], 'expression7': ['B - J >= 2'], 'expression8': ['Equality', 'Equality', 'Add', '1', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], 'Mul', ['9'], ['Pow', '20', '-1'], '29']}","{'expression0': ['Equality', '190', '190'], 'expression1': ['[J, B]'], 'expression2': ['19'], 'expression3': ['((1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20))'], 'expression4': ['True'], 'expression5': ['B - J >= 2'], 'expression6': ['True'], 'expression7': ['Equality', 'Add', '9', '20', '29']}","{'expression0': ['2'], 'expression1': ['20'], 'expression2': ['2'], 'expression3': ['binomial(-k + n + 1, k)'], 'expression4': ['Equality', 'Equality', '171', '171', '171'], 'expression5': ['171'], 'expression6': ['380'], 'expression7': ['Equality', 'Mul', ['171'], ['Pow', '380', '-1'], 'Mul', ['9'], ['Pow', '20', '-1']], 'expression8': ['Equality', 'Add', '9', '20', '29']}","{'expression0': ['20'], 'expression1': ['J'], 'expression2': ['1'], 'expression3': ['20'], 'expression4': ['20'], 'expression5': ['B'], 'expression6': ['1'], 'expression7': ['20'], 'expression8': ['B'], 'expression9': ['J'], 'expression10': ['Add', 'B', 'Mul', ['-1'], ['J']], 'expression11': ['2'], 'expression12': ['Equality', 'Add', 'B', 'Mul', ['-1'], ['J'], '2'], 'expression13': ['171'], 'expression14': ['Equality', 'Add', '400', '-20', '380'], 'expression15': ['Mul', ['171'], ['Pow', '380', '-1']], 'expression16': ['Mul', ['9'], ['Pow', '20', '-1']], 'expression17': ['Equality', 'Add', '9', '20', '29']}"
"{'expression0': ['Mul', ['\\triangle'], ['P'], ['Q'], ['R']], 'expression1': ['Equality', 'Mul', ['P'], ['R'], '15'], 'expression2': ['Equality', 'Mul', ['Q'], ['R'], '20'], 'expression3': ['Equality', 'Mul', ['P'], ['Q'], '25'], 'expression4': ['A'], 'expression5': ['B'], 'expression6': ['\\overline{PQ}'], 'expression7': ['C'], 'expression8': ['D'], 'expression9': ['\\overline{QR}'], 'expression10': ['e'], 'expression11': ['F'], 'expression12': ['\\overline{PR}'], 'expression13': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['P'], ['A'], 'Mul', ['Q'], ['B'], 'Mul', ['Q'], ['C'], 'Mul', ['R'], ['D'], 'Mul', ['R'], ['E'], 'Mul', ['P'], ['F'], '5'], 'expression14': ['ABCDeF']}","{'expression0': ['ABCDeF'], 'expression1': ['Add', 'Mul', ['\\triangle'], ['P'], ['Q'], ['R'], 'Mul', ['-1'], ['\\triangle'], ['P'], ['A'], ['F']], 'expression2': ['Equality', 'Add', 'Mul', ['P'], ['Pow', 'R', '2'], 'Mul', ['R'], ['Pow', 'Q', '2'], 'Mul', ['P'], ['Pow', 'Q', '2']], 'expression3': ['Mul', ['\\triangle'], ['P'], ['R'], ['Q']], 'expression4': ['Mul', ['\\triangle'], ['P'], ['Q'], ['R']], 'expression5': ['150'], 'expression6': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['1'], ['Pow', '2', '-1'], ['P'], ['Q'], ['R'], ['Q'], ['sin(P*Q*R*\\angle)'], 'Mul', ['1'], ['Pow', '2', '-1'], ['500'], ['sin(P*Q*R*\\angle)'], '150', 'sin(P*Q*R*\\angle)', 'Mul', ['3'], ['Pow', '5', '-1']], 'expression7': ['Equality', 'Equality', 'Equality', 'Mul', ['\\triangle'], ['B'], ['C'], ['Q'], 'Mul', ['1'], ['Pow', '2', '-1'], ['B'], ['Q'], ['C'], ['Q'], ['sin(P*Q*R*\\angle)'], 'Mul', ['25'], ['Pow', '2', '-1'], ['3'], ['Pow', '5', '-1'], 'Mul', ['15'], ['Pow', '2', '-1']], 'expression8': ['Mul', ['\\triangle'], ['P'], ['A'], ['F']], 'expression9': ['Mul', ['\\triangle'], ['P'], ['A'], ['F']], 'expression10': ['10'], 'expression11': ['Equality', 'Mul', ['\\angle'], ['E'], ['R'], ['D'], 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression12': ['Equality', 'Mul', ['\\triangle'], ['R'], ['E'], ['D'], 'Mul', ['25'], ['Pow', '2', '-1']], 'expression13': ['Equality', 'Add', '150', 'Mul', ['-1'], ['15'], ['Pow', '2', '-1'], '120']}","{'expression0': ['R'], 'expression1': ['(False, False, False, False, False)'], 'expression2': ['None'], 'expression3': ['{120}'], 'expression4': ['P'], 'expression5': ['(a_1, b_1)'], 'expression6': ['(a_2, b_2)'], 'expression7': ['Mul', ['Add', 'Sum', 'Mul', ['a_i'], ['b_{i+1}'], 'over', '(i, 1, n)', 'Mul', ['-1'], ['Sum', 'Mul', ['b_i'], ['a_{i+1}'], 'over', '(i, 1, n)']], ['1'], ['Pow', '2', '-1']], 'expression8': ['Sum', 'Mul', ['b_i'], ['a_{i+1}'], 'over', '(i, 1, n)'], 'expression9': ['0'], 'expression10': ['0']}","{'expression0': ['Mul', ['\\triangle'], ['P'], ['Q'], ['R']], 'expression1': ['150'], 'expression2': ['3'], 'expression3': ['4'], 'expression4': ['5'], 'expression5': ['B'], 'expression6': ['QC'], 'expression7': ['3'], 'expression8': ['A'], 'expression9': ['FP'], 'expression10': ['4'], 'expression11': ['Equality', 'Equality', 'Add', 'Mul', ['Q'], ['B'], ['C'], 'Mul', ['D'], ['R'], ['E'], 'Add', 'Mul', ['15'], ['Pow', '2', '-1'], 'Mul', ['25'], ['Pow', '2', '-1'], '30'], 'expression12': ['Equality', 'Mul', ['A'], ['B'], ['C'], ['D'], ['E'], ['F'], '120']}","{'expression0': ['Mul', ['\\triangle'], ['P'], ['Q'], ['R']], 'expression1': ['150'], 'expression2': ['3'], 'expression3': ['4'], 'expression4': ['5'], 'expression5': ['Mul', ['\\triangle'], ['D'], ['R'], ['E']], 'expression6': ['Mul', ['\\triangle'], ['A'], ['P'], ['F']], 'expression7': ['Mul', ['\\triangle'], ['C'], ['Q'], ['B']], 'expression8': ['Mul', ['\\triangle'], ['P'], ['Q'], ['R']], 'expression9': ['Mul', ['\\triangle'], ['D'], ['R'], ['E']], 'expression10': ['12.5000000000000'], 'expression11': ['Mul', ['\\triangle'], ['A'], ['P'], ['F']], 'expression12': ['Mul', ['\\triangle'], ['C'], ['Q'], ['B']], 'expression13': ['Equality', 'Pow', 'c', '2', 'Add', 'Pow', 'a', '2', 'Pow', 'b', '2'], 'expression14': ['AF'], 'expression15': ['CB'], 'expression16': ['Equality', 'Mul', ['A'], ['F'], 'Pow', '20', '1/2'], 'expression17': ['Equality', 'Mul', ['C'], ['B'], 'Pow', '10', '1/2'], 'expression18': ['Equality', 'Mul', ['\\triangle'], ['A'], ['P'], ['F'], '10'], 'expression19': ['Equality', 'Mul', ['\\triangle'], ['C'], ['Q'], ['B'], '15/2'], 'expression20': ['Mul', ['\\triangle'], ['P'], ['Q'], ['R']], 'expression21': ['Equality', 'Add', '150', 'Mul', ['-1'], ['Add', '10', '15/2'], '120']}","{'expression0': ['PQR'], 'expression1': ['Equality', 'Mul', ['1'], ['Pow', '2', '-1'], ['15'], ['20'], '150'], 'expression2': ['[A*F*P*\\triangle, B*C*Q*\\triangle]'], 'expression3': ['Mul', ['\\triangle'], ['R'], ['E'], ['D']], 'expression4': ['Mul', ['\\triangle'], ['P'], ['Q'], ['R']], 'expression5': ['[a, b]'], 'expression6': ['gamma'], 'expression7': ['Mul', ['1'], ['Pow', '2', '-1'], ['a'], ['b'], ['sin(gamma)']], 'expression8': ['[A*F*P*\\triangle, B*C*Q*\\triangle]'], 'expression9': ['Mul', ['\\triangle'], ['R'], ['E'], ['D']], 'expression10': ['Mul', ['5'], ['5'], ['150'], ['Pow', 'Mul', ['a'], ['b'], '-1']], 'expression11': ['a'], 'expression12': ['b'], 'expression13': ['Mul', ['\\triangle'], ['P'], ['Q'], ['R']], 'expression14': ['[A*F*P*\\triangle, B*C*Q*\\triangle]'], 'expression15': ['Mul', ['\\triangle'], ['R'], ['E'], ['D']], 'expression16': ['Equality', 'Equality', 'Add', 'Mul', ['Mul', ['5'], ['5'], ['150']], ['Pow', '15', '-1'], ['25'], 'Mul', ['Mul', ['5'], ['5'], ['150']], ['Pow', '25', '-1'], ['20'], 'Mul', ['25'], ['Add', 'Mul', ['2'], ['Pow', '5', '-1'], 'Mul', ['3'], ['Pow', '10', '-1']], '30'], 'expression17': ['ABCDeF'], 'expression18': ['Equality', 'Add', '150', '-30', '120']}"
"{'expression0': ['22'], 'expression1': ['11'], 'expression2': ['11'], 'expression3': ['3'], 'expression4': ['11'], 'expression5': ['n'], 'expression6': ['n'], 'expression7': ['1000']}","{'expression0': ['-3'], 'expression1': ['0'], 'expression2': ['1'], 'expression3': ['n'], 'expression4': ['Add', '12', 'Mul', ['-1'], ['n']], 'expression5': ['11'], 'expression6': ['n'], 'expression7': ['Equality', 'a_n', 'Mul', ['11'], ['Add', '12', 'Mul', ['-1'], ['n']], ['a_{n-1}']], 'expression8': ['Equality', 'a_0', '1'], 'expression9': ['0'], 'expression10': ['3'], 'expression11': ['Add', '1', 'Pow', '11', '2'], 'expression12': ['Equality', 'Equality', 'Add', '10', 'Mul', ['9'], ['11'], ['10'], 'Add', '10', '990', '1000'], 'expression13': ['Equality', 'Add', '1', 'Pow', '11', '2', 'Add', '1', 'Pow', '11', '2'], 'expression14': ['1000'], 'expression15': ['Equality', 'Add', '1', 'Pow', '11', '2', '122']}","{'expression0': ['1'], 'expression1': ['121'], 'expression2': ['Mul', ['Pow', '11', '2'], ['11'], ['10']], 'expression3': ['Mul', ['Pow', '11', '2'], ['11'], ['10'], ['11'], ['9']], 'expression4': ['Equality', 'Equality', 'Add', '1', 'Pow', '11', '2', 'Add', '122', 'Mul', ['Pow', '11', '3'], ['Add', '10', '990'], 'Mod(122, 1000)']}","{'expression0': ['Mul', ['C'], ['a'], ['s'], ['E'], ['1']], 'expression1': ['1'], 'expression2': ['Mul', ['C'], ['a'], ['s'], ['E'], ['2']], 'expression3': ['Equality', 'Mul', ['11'], ['11'], '121'], 'expression4': ['Mul', ['C'], ['a'], ['s'], ['E'], ['3']], 'expression5': ['Mul', ['11'], ['11']], 'expression6': ['Equality', 'Equality', 'Mul', ['11'], ['11'], ['11'], ['10'], '13310', 'Mod(310, 1000)'], 'expression7': ['Mul', ['C'], ['a'], ['s'], ['E'], ['4']], 'expression8': ['Mul', ['C'], ['a'], ['s'], ['E'], ['3']], 'expression9': ['Mul', ['11'], ['11'], ['11'], ['10'], ['11'], ['9']], 'expression10': ['690'], 'expression11': ['Equality', 'Add', '1', '121', 'Mod(122, 1000)']}",{},{}
"{'expression0': ['(4, 4)'], 'expression1': ['(a, b)'], 'expression2': ['(a - 1, b)'], 'expression3': ['(a, b - 1)'], 'expression4': ['(a - 1, b - 1)'], 'expression5': ['Mul', ['1'], ['Pow', '3', '-1']], 'expression6': ['(0, 0)'], 'expression7': ['Mul', ['m'], ['Pow', 'Pow', '3', 'n', '-1']], 'expression8': ['m'], 'expression9': ['n'], 'expression10': ['m'], 'expression11': ['3'], 'expression12': ['Add', 'm', 'n']}","{'expression0': ['(0, 0)'], 'expression1': ['(x, y)'], 'expression2': ['Equality', 'P(x, y)', 'Add', 'Mul', ['1'], ['Pow', '3', '-1'], ['P(x - 1, y)'], 'Mul', ['1'], ['Pow', '3', '-1'], ['P(x, y - 1)']], 'expression3': ['[x, y >= 1]'], 'expression4': ['(False, False)'], 'expression5': ['(x, y)'], 'expression6': ['Equality', 'P(4, 4)', 'Mul', ['245'], ['Pow', '2187', '-1']], 'expression7': ['Equality', 'Add', '245', '7', '252']}","{'expression0': ['(0, 0)'], 'expression1': ['(1, 1)'], 'expression2': ['Mul', ['1'], ['Pow', '3', '-1']], 'expression3': ['(0, 0)'], 'expression4': ['(False, (1, 1, 2), (2, 2, 1))'], 'expression5': ['(3, 3, 0)'], 'expression6': ['Equality', 'Add', 'Mul', ['1'], ['1'], ['Pow', '27', '-1'], 'Mul', ['factorial(4)'], ['Pow', 'factorial(2)', '-1'], ['1'], ['Pow', '81', '-1'], 'Mul', ['245'], ['Pow', '729', '-1']], 'expression7': ['(1, 1)'], 'expression8': ['(0, 0)'], 'expression9': ['Mul', ['245'], ['Pow', 'Pow', '3', '7', '-1']], 'expression10': ['Equality', 'Add', '245', '7', '252']}","{'expression0': ['(1, 1)'], 'expression1': ['(1, 1)'], 'expression2': ['(1, 1)'], 'expression3': ['(4, 4)'], 'expression4': ['1'], 'expression5': ['2'], 'expression6': ['3'], 'expression7': ['4'], 'expression8': ['1'], 'expression9': ['Mul', ['1'], ['Pow', 'Pow', '3', '3', '-1']], 'expression10': ['2'], 'expression11': ['Equality', 'Mul', ['Mul', ['factorial(4)'], ['Pow', 'factorial(2)', '-1']], ['Pow', 'Pow', '3', '4', '-1'], 'Mul', ['12'], ['Pow', 'Pow', '3', '4', '-1']], 'expression12': ['3'], 'expression13': ['Equality', 'Mul', ['Mul', ['factorial(5)'], ['Pow', 'Mul', ['factorial(2)'], ['factorial(2)'], '-1']], ['Pow', 'Pow', '3', '5', '-1'], 'Mul', ['30'], ['Pow', 'Pow', '3', '5', '-1']], 'expression14': ['4'], 'expression15': ['Equality', 'Mul', ['Mul', ['factorial(6)'], ['Pow', 'Mul', ['factorial(3)'], ['factorial(3)'], '-1']], ['Pow', 'Pow', '3', '6', '-1'], 'Mul', ['20'], ['Pow', 'Pow', '3', '6', '-1']], 'expression16': ['Mul', ['245'], ['Pow', 'Pow', '3', '6', '-1']], 'expression17': ['(1, 1)'], 'expression18': ['Mul', ['1'], ['Pow', '3', '-1']], 'expression19': ['(0, 0)'], 'expression20': ['(1, 1)'], 'expression21': ['[Eq(Eq(Eq(245*1/(3**6*3), 245/(3**7)), m), 245), Eq(Eq(n, 7), 252)]']}","{'expression0': ['(1, 1)'], 'expression1': ['63'], 'expression2': ['(4, 4)'], 'expression3': ['(1, 1)'], 'expression4': ['Equality', '20', '20'], 'expression5': ['3'], 'expression6': ['3'], 'expression7': ['(52, 2, False)'], 'expression8': ['2'], 'expression9': ['2'], 'expression10': ['1'], 'expression11': ['(41, 1, False)'], 'expression12': ['1'], 'expression13': ['1'], 'expression14': ['2'], 'expression15': ['1'], 'expression16': ['3'], 'expression17': ['(4, 4)'], 'expression18': ['(1, 1)'], 'expression19': ['Equality', 'Add', 'Mul', ['1'], ['Pow', 'Pow', '3', '6', '-1'], ['20'], 'Mul', ['1'], ['Pow', 'Pow', '3', '5', '-1'], ['30'], 'Mul', ['245'], ['Pow', 'Pow', '3', '6', '-1']], 'expression20': ['Mul', ['1'], ['Pow', '3', '-1']], 'expression21': ['Mul', ['245'], ['Pow', 'Pow', '3', '7', '-1']], 'expression22': ['Equality', 'Add', '245', '7', '252']}",{}
"{'expression0': ['KLMN'], 'expression1': ['\\overline{MN}'], 'expression2': ['\\overline{KM}'], 'expression3': ['\\overline{KL}'], 'expression4': ['\\overline{LN}'], 'expression5': ['Equality', 'Mul', ['M'], ['N'], '65'], 'expression6': ['Equality', 'Mul', ['K'], ['L'], '28'], 'expression7': ['L'], 'expression8': ['\\overline{KN}'], 'expression9': ['\\overline{KM}'], 'expression10': [""<class 'sympy.series.order.Order'>""], 'expression11': ['Equality', 'Mul', ['K'], ['O'], '8'], 'expression12': ['MO']}","{'expression0': ['Equality', 'Mul', ['\\angle'], ['M'], ['K'], ['N'], 'alpha'], 'expression1': ['Equality', 'Mul', ['\\angle'], ['L'], ['N'], ['K'], 'beta'], 'expression2': ['P'], 'expression3': ['L'], 'expression4': ['NK'], 'expression5': ['Equality', 'Mul', ['\\angle'], ['K'], ['L'], ['P'], 'beta'], 'expression6': ['Equality', 'Equality', 'Mul', ['K'], ['P'], 'Mul', ['28'], ['sin(beta)'], 'Mul', ['8'], ['cos(alpha)']], 'expression7': ['Equality', 'Equality', 'Mul', ['K'], ['N'], 'Mul', ['65'], ['Pow', 'sin(alpha)', '-1'], 'Mul', ['28'], ['Pow', 'sin(beta)', '-1']], 'expression8': ['Equality', 'Equality', 'Mul', ['65'], ['Pow', '28', '-1'], 'Mul', ['Mul', ['28'], ['sin(alpha)']], ['Pow', 'Mul', ['8'], ['cos(alpha)'], '-1'], 'Mul', ['7'], ['Pow', '2', '-1'], ['tan(alpha)']], 'expression9': ['Equality', 'Equality', 'Mul', ['M'], ['K'], 'Mul', ['Mul', ['M'], ['N']], ['Pow', 'tan(alpha)', '-1'], '98'], 'expression10': ['Equality', 'Equality', 'Mul', ['M'], ['O'], 'Add', 'Mul', ['M'], ['K'], 'Mul', ['-1'], ['K'], ['O'], '90']}","{'expression0': ['Equality', 'Equality', 'Mul', ['\\angle'], ['K'], ['L'], ['N'], 'Mul', ['\\angle'], ['K'], ['M'], ['N'], 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression1': ['KLMN'], 'expression2': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['K'], ['O'], ['K'], ['M'], 'Mul', ['K'], ['Pow', 'L', '2'], 'Mul', ['K'], ['M'], 'Mul', ['Pow', '28', '2'], ['Pow', '8', '-1'], '98', 'Mul', ['M'], ['O'], 'Add', '98', '-8', '90']}","{'expression0': ['P'], 'expression1': ['LO'], 'expression2': ['KN'], 'expression3': ['Equality', 'Mul', ['m'], ['\\angle'], ['K'], ['P'], ['L'], 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression4': ['Equality', 'Mul', ['\\angle'], ['K'], ['P'], ['L'], 'Mul', ['\\angle'], ['K'], ['L'], ['N']], 'expression5': ['Equality', 'Mul', ['\\angle'], ['P'], ['K'], ['L'], 'Mul', ['\\angle'], ['L'], ['K'], ['N']], 'expression6': ['Mul', ['\\triangle'], ['P'], ['K'], ['L'], ['\\text{sim}'], ['\\triangle'], ['L'], ['K'], ['N']], 'expression7': ['Mul', ['\\triangle'], ['K'], ['M'], ['N'], ['\\text{sim}'], ['\\triangle'], ['K'], ['P'], ['O']], 'expression8': ['Equality', 'Mul', ['Mul', ['K'], ['P']], ['Pow', 'Mul', ['K'], ['L'], '-1'], 'Mul', ['Mul', ['K'], ['L']], ['Pow', 'Mul', ['K'], ['N'], '-1']], 'expression9': ['Equality', 'Equality', 'Equality', 'Mul', ['K'], ['P'], 'Mul', ['Mul', ['K'], ['Pow', 'L', '2']], ['Pow', 'Mul', ['K'], ['N'], '-1'], 'Mul', ['Pow', '28', '2'], ['Pow', 'Mul', ['K'], ['N'], '-1'], 'Mul', ['784'], ['Pow', 'Mul', ['K'], ['N'], '-1']], 'expression10': ['Equality', 'Mul', ['Mul', ['K'], ['P']], ['Pow', 'Mul', ['K'], ['O'], '-1'], 'Mul', ['Mul', ['K'], ['M']], ['Pow', 'Mul', ['K'], ['N'], '-1']], 'expression11': ['Equality', 'Equality', 'Mul', ['K'], ['P'], 'Mul', ['Mul', ['K'], ['O'], ['K'], ['M']], ['Pow', 'Mul', ['K'], ['N'], '-1'], 'Mul', ['Mul', ['8'], ['K'], ['M']], ['Pow', 'Mul', ['K'], ['N'], '-1']], 'expression12': ['Equality', 'Mul', ['Mul', ['8'], ['K'], ['M']], ['Pow', 'Mul', ['K'], ['N'], '-1'], 'Mul', ['784'], ['Pow', 'Mul', ['K'], ['N'], '-1']], 'expression13': ['Equality', 'Mul', ['8'], ['K'], ['M'], 'Pow', '28', '2'], 'expression14': ['Equality', 'Mul', ['K'], ['M'], '98'], 'expression15': ['Equality', 'Mul', ['K'], ['M'], 'Add', 'Mul', ['K'], ['O'], 'Mul', ['M'], ['O']], 'expression16': ['Equality', 'Equality', 'Mul', ['M'], ['O'], 'Add', '98', '-8', '90']}","{'expression0': ['KL'], 'expression1': ['NM'], 'expression2': ['L'], 'expression3': ['M'], 'expression4': ['P'], 'expression5': ['H'], 'expression6': ['KM'], 'expression7': ['LN'], 'expression8': ['Mul', ['\\triangle'], ['K'], ['O'], ['L'], ['\\text{sim}'], ['\\triangle'], ['K'], ['H'], ['P']], 'expression9': ['Equality', 'Mul', ['O'], ['H'], 'Mul', ['8'], ['k']], 'expression10': ['Equality', 'Mul', ['L'], ['P'], 'Mul', ['28'], ['k']], 'expression11': ['Mul', ['\\triangle'], ['K'], ['L'], ['H']], 'expression12': ['Mul', ['\\triangle'], ['K'], ['M'], ['P']], 'expression13': ['Equality', 'Mul', ['28'], ['Pow', 'Add', '8', 'Mul', ['8'], ['k'], '-1'], 'Mul', ['Add', '8', 'Mul', ['8'], ['k']], ['Pow', 'Add', '28', 'Mul', ['28'], ['k'], '-1']], 'expression14': ['Add', '4', 'Mul', ['4'], ['k']], 'expression15': ['Equality', 'Equality', 'Mul', ['2'], ['Add', '8', 'Mul', ['8'], ['k']], 'Mul', ['28'], ['7'], '196'], 'expression16': ['Equality', 'Equality', 'Equality', 'Mul', ['M'], ['O'], 'Add', 'Mul', ['8'], ['k'], 'Mul', ['H'], ['M'], 'Add', 'Mul', ['196'], ['Pow', '2', '-1'], '-8', '90']}","{'expression0': ['P'], 'expression1': ['LO'], 'expression2': ['KN'], 'expression3': ['(False, False, False, False, False, False)'], 'expression4': ['Equality', 'g', 'Mul', ['N'], ['C']], 'expression5': ['d'], 'expression6': ['7'], 'expression7': ['Equality', 'Add', '4225', 'Pow', 'd', '2', 'Pow', 'c', '2'], 'expression8': ['Equality', 'Add', '4225', 'Pow', 'd', '2', 'Add', 'Pow', 'a', '2', 'Mul', ['2'], ['a'], ['b']], 'expression9': ['Equality', 'Add', 'Pow', 'a', '2', 'exp(2)', 'Pow', 'c', '2'], 'expression10': ['Equality', 'Add', 'Pow', 'b', '2', 'exp(2)', '64'], 'expression11': ['Equality', 'Add', 'Pow', 'b', '2', 'exp(2)', '784'], 'expression12': ['Equality', 'Add', 'Pow', 'a', '2', 'exp(2)', 'Pow', 'g', '2'], 'expression13': ['Equality', 'Add', 'Pow', 'g', '2', '784', 'Add', 'Pow', 'a', '2', 'Mul', ['2'], ['a'], ['b']], 'expression14': ['Equality', 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['Pow', 'b', '2'], 'Add', 'Pow', 'g', '2', '-784'], 'expression15': ['Equality', 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['Pow', 'b', '2'], 'Add', 'Pow', 'c', '2', '-64'], 'expression16': ['Equality', 'Add', 'Pow', 'c', '2', '-64', 'Add', 'Pow', 'g', '2', '-784'], 'expression17': ['Equality', 'Pow', 'g', '2', 'Add', 'Pow', 'c', '2', '720'], 'expression18': ['Equality', 'Add', 'Pow', 'c', '2', '1504', 'Add', 'Pow', 'a', '2', 'Mul', ['2'], ['a'], ['b']], 'expression19': ['Equality', 'Add', '4225', 'Pow', 'd', '2', 'Add', 'Pow', 'c', '2', '1504'], 'expression20': ['Equality', 'Add', 'Mul', ['16'], ['d'], '64', '1504'], 'expression21': ['Equality', 'd', '90']}"
"{'expression0': ['x'], 'expression1': ['y'], 'expression2': ['{10}'], 'expression3': ['{10}'], 'expression4': ['{10}'], 'expression5': ['{10}'], 'expression6': ['m'], 'expression7': ['x'], 'expression8': ['n'], 'expression9': ['y'], 'expression10': ['Add', 'Mul', ['3'], ['m'], 'Mul', ['2'], ['n']]}","{'expression0': ['Equality', 'Mul', ['x'], ['y'], 'Pow', '10', '210'], 'expression1': ['Equality', 'x', 'Pow', '10', 'a'], 'expression2': ['Equality', 'y', 'Pow', '10', 'b'], 'expression3': ['1'], 'expression4': ['2'], 'expression5': ['Equality', 'Add', 'a', 'Mul', ['2'], ['a'], '60'], 'expression6': ['Equality', 'Add', 'b', 'Mul', ['2'], ['b'], '570'], 'expression7': ['None'], 'expression8': ['Equality', 'Mul', ['x'], ['y'], 'Pow', '10', '210'], 'expression9': ['[Eq(x, 2**20*5**20), Eq(y, 2**190*5**190)]'], 'expression10': ['Equality', 'Add', 'Mul', ['3'], ['Add', '20', '20'], 'Mul', ['2'], ['Add', '190', '190'], '880']}","{'expression0': ['Equality', 'x', 'Pow', '10', 'a'], 'expression1': ['Equality', 'y', 'Pow', '10', 'b'], 'expression2': ['a < b'], 'expression3': ['Equality', 'Mul', ['3'], ['a'], '60'], 'expression4': ['Equality', 'Mul', ['3'], ['b'], '570'], 'expression5': ['Equality', 'Equality', 'x', 'Pow', '10', '20', 'Mul', ['Pow', '2', '20'], ['Pow', '5', '20']], 'expression6': ['Equality', 'Equality', 'y', 'Pow', '10', '190', 'Mul', ['Pow', '2', '190'], ['Pow', '5', '190']], 'expression7': ['Equality', 'Add', 'Mul', ['3'], ['Add', '20', '20'], 'Mul', ['2'], ['Add', '190', '190'], '880']}","{'expression0': ['(a, b)'], 'expression1': ['1'], 'expression2': ['[a, b]'], 'expression3': ['Mul', ['a'], ['b']], 'expression4': ['False'], 'expression5': ['Equality', 'Pow', 'x(x, y)', '2', 'Pow', '10', '60'], 'expression6': ['Equality', 'Pow', 'x(x, y)', '2', 'Pow', '10', '60'], 'expression7': ['Equality', 'Pow', 'y(x, y)', '2', 'Pow', '10', '570'], 'expression8': ['Equality', 'Mul', ['Pow', 'x', '3'], ['Pow', 'y', '3'], ['Pow', 'Add', 'x', 'yexpression9': ['Equality', 'Add', 'Pow', 'a', '2', 'Pow', 'b', '2', 'Mul', ['a'], ['b']], 'expression10': ['Equality', 'Mul', ['Pow', 'x', '3'], ['Pow', 'y', '3'], 'Pow', '10', '630'], 'expression11': ['Equality', 'Mul', ['x'], ['y'], 'Pow', '10', '210'], 'expression12': ['x'], 'expression13': ['Pow', '2', 'Pow', 'a5', 'b'], 'expression14': ['y'], 'expression15': ['Pow', '2', 'Pow', 'c5', 'd'], 'expression16': ['(x, y)'], 'expression17': ['Mul', ['Pow', '2', 'Mul', ['m'], ['i'], ['n(a, c)']], ['Pow', '5', 'Mul', ['m'], ['i'], ['n(b, d)']]], 'expression18': ['[x, y]'], 'expression19': ['Mul', ['Pow', '2', 'Mul', ['m'], ['a'], ['x(a, c)']], ['Pow', '5', 'Mul', ['m'], ['a'], ['x(b, d)']]], 'expression20': ['x < y'], 'expression21': ['a < c'], 'expression22': ['b < d'], 'expression23': ['<function lcm at 0x0000027A4E234400>'], 'expression24': ['<function gcd at 0x0000027A4E2342C0>'], 'expression25': ['Equality', 'Mul', ['Pow', '2', 'a'], ['Pow', '5', 'b'], ['Pow', 'Mul', ['Pow', '2', 'a'], ['Pow', '5', 'a'], '2'], 'Pow', '10', '60'], 'expression26': ['Equality', 'Equality', 'a', 'b', '20'], 'expression27': ['<function lcm at 0x0000027A4E234400>'], 'expression28': ['Equality', 'Equality', 'c', 'd', '190'], 'expression29': ['Equality', 'Add', '190', '20', '210'], 'expression30': ['Equality', 'Mul', ['x'], ['y'], '210'], 'expression31': ['Equality', 'Equality', 'Add', 'Mul', ['3'], ['m'], 'Mul', ['2'], ['n'], 'Add', 'Mul', ['3'], ['Add', '20', '20'], 'Mul', ['2'], ['Add', '190', '190'], '880']}","{'expression0': ['(False, False, False)'], 'expression1': ['[Eq(alpha*d**3, 10**60), Eq(Eq(Eq(Eq(alpha**2*beta**3*d**3, 10**510), alpha*beta**3), 10**510), 2**510*5**510)]'], 'expression2': ['[alpha, beta]'], 'expression3': ['alpha < 5**90'], 'expression4': ['[Eq(alpha, 1), Eq(beta, 10**170)]'], 'expression5': ['[Eq(x, 10**20), Eq(y, 10**190)]'], 'expression6': ['{880}']}","{'expression0': ['Equality', 'Mul', ['x'], ['Pow', '1', '2'], 'Pow', '10', '60'], 'expression1': ['Equality', 'Mul', ['y'], ['Pow', 'x*y', '2'], 'Pow', '10', '570'], 'expression2': ['Equality', 'Equality', 'Mul', ['x'], ['y'], ['Pow', 'Mul', ['1'], ['x*y'], '2'], 'Pow', 'Mul', ['x'], ['y'], '3', 'Pow', '10', '630'], 'expression3': ['Equality', 'Mul', ['x'], ['y'], 'Pow', '10', '210'], 'expression4': ['[a, b, c]'], 'expression5': ['d'], 'expression6': ['None'], 'expression7': ['Equality', 'Equality', 'Add', 'a', 'c', 'Add', 'b', 'd', '210'], 'expression8': ['Equality', 'Equality', 'Equality', 'Mul', ['Pow', 'x*y', '2'], ['Pow', 'x', '-1'], 'Mul', ['Mul', ['y'], ['Pow', 'x*y', '2']], ['Pow', 'Mul', ['x'], ['y'], '-1'], 'Mul', ['Pow', '10', '570'], ['Pow', 'Pow', '10', '210', '-1'], 'Pow', '10', '360'], 'expression9': ['Equality', 'Equality', 'Add', 'Max(2*a, 2*c)', 'Mul', ['-1'], ['a'], 'Add', 'Max(2*b, 2*d)', 'Mul', ['-1'], ['b'], '360'], 'expression10': ['Add', 'Mul', ['2'], ['a'], 'Mul', ['-1'], ['a']], 'expression11': ['Add', 'Mul', ['2'], ['b'], 'Mul', ['-1'], ['b']], 'expression12': ['360'], 'expression13': ['Equality', 'Equality', 'Add', 'a', 'c', 'Add', 'b', 'd', '210'], 'expression14': ['Equality', 'Equality', 'Add', 'Mul', ['2'], ['c'], 'Mul', ['-1'], ['a'], 'Add', 'Mul', ['2'], ['d'], 'Mul', ['-1'], ['b'], '360'], 'expression15': ['None'], 'expression16': ['x'], 'expression17': ['Equality', 'Add', '20', '20', '40'], 'expression18': ['y'], 'expression19': ['Equality', 'Add', '190', '190', '380'], 'expression20': ['Equality', 'Add', 'Mul', ['3'], ['40'], 'Mul', ['2'], ['380'], '880']}"
"{'expression0': ['x'], 'expression1': ['Equality', 'Add', 'Pow', 'sin(x)', '10', 'Pow', 'cos(x)', '10', 'Mul', ['11'], ['Pow', '36', '-1']], 'expression2': ['Equality', 'Add', 'Pow', 'sin(x)', '12', 'Pow', 'cos(x)', '12', 'Mul', ['m'], ['Pow', 'n', '-1']], 'expression3': ['m'], 'expression4': ['n'], 'expression5': ['Add', 'm', 'n']}","{'expression0': ['Equality', 'a', 'sin(x)'], 'expression1': ['Equality', 'b', 'cos(x)'], 'expression2': ['Equality', 'Add', 'Pow', 'a', '2', 'Pow', 'b', '2', '1'], 'expression3': ['Equality', 'Equality', 'Add', 'Pow', 'a', '10', 'Pow', 'b', '10', 'Add', 'Mul', ['11'], ['Pow', '36', '-1'], 'Mul', ['5'], ['Pow', 'a', '2'], ['Pow', 'b', '2'], ['Add', 'Pow', 'a', '6', 'Pow', 'b', '6'], '1'], 'expression4': ['Equality', 'Equality', 'Equality', 'Mul', ['11'], ['Pow', '36', '-1'], 'Add', 'Pow', 'a', '10', 'Pow', 'b', '10', 'Mul', ['Add', 'Pow', 'a', '10', 'Pow', 'b', '10'], ['Add', 'Pow', 'a', '2', 'Pow', 'b', '2'], 'Add', 'Pow', 'a', '12', 'Pow', 'b', '12'], 'expression5': ['Mul', ['Pow', 'a', '2'], ['Pow', 'b', '2'], ['Add', 'Pow', 'a', '8', 'Pow', 'b', '8']], 'expression6': ['Equality', 'y', 'Mul', ['Pow', 'a', '2'], ['Pow', 'b', '2']], 'expression7': ['Equality', 'Add', 'Pow', 'a', '2', 'Pow', 'b', '2', '1'], 'expression8': ['Equality', 'Add', 'Pow', 'a', '6', 'Pow', 'b', '6', '1'], 'expression9': ['Equality', 'Add', 'Pow', 'a', '6', 'Pow', 'b', '6', 'Add', '1', 'Mul', ['-1'], ['3'], ['y']], 'expression10': ['Equality', 'Add', 'Mul', ['11'], ['Pow', '36', '-1'], 'Mul', ['5'], ['Pow', 'a', '2'], ['Pow', 'b', '2'], ['Add', 'Pow', 'a', '6', 'Pow', 'b', '6'], '1'], 'expression11': ['Equality', 'Add', 'Mul', ['Pow', 'a', '2'], ['Pow', 'b', '2'], ['Add', 'Pow', 'a', '6', 'Pow', 'b', '6'], 'Mul', ['2'], ['Pow', 'a', '4'], ['Pow', 'b', '4'], 'Mul', ['5'], ['Pow', '36', '-1']], 'expression12': ['Equality', 'Equality', 'Add', 'Mul', ['y'], ['Add', '1', 'Mul', ['-1'], ['3'], ['y']], 'Mul', ['2'], ['Pow', 'y', '2'], 'Add', 'y', 'Mul', ['-1'], ['Pow', 'y', '2'], 'Mul', ['5'], ['Pow', '36', '-1']], 'expression13': ['Equality', 'y', 'Mul', ['5'], ['Pow', '6', '-1']], 'expression14': ['Equality', 'y', 'Mul', ['1'], ['Pow', '6', '-1']], 'expression15': ['Equality', 'y', 'Mul', ['5'], ['Pow', '6', '-1']], 'expression16': ['Equality', 'y', 'Mul', ['1'], ['Pow', '6', '-1']], 'expression17': ['Equality', 'Equality', 'Add', 'Pow', 'a', '4', 'Pow', 'b', '4', 'Add', 'Pow', 'Add', 'Pow', 'a', '2', 'Pow', 'b', '2', '2', 'Mul', ['-1'], ['2'], ['Pow', 'a', '2'], ['Pow', 'b', '2'], 'Mul', ['2'], ['Pow', '3', '-1']], 'expression18': ['Equality', 'Equality', 'Equality', 'Add', 'Pow', 'a', '8', 'Pow', 'b', '8', 'Add', 'Pow', 'Add', 'Pow', 'a', '4', 'Pow', 'b', '4', '2', 'Mul', ['-1'], ['2'], ['Pow', 'a', '4'], ['Pow', 'b', '4'], 'Add', 'Mul', ['4'], ['Pow', '9', '-1'], 'Mul', ['-1'], ['1'], ['Pow', '18', '-1'], 'Mul', ['7'], ['Pow', '18', '-1']], 'expression19': ['Equality', 'Equality', 'Add', 'Pow', 'a', '12', 'Pow', 'b', '12', 'Add', 'Mul', ['11'], ['Pow', '36', '-1'], 'Mul', ['-1'], ['7'], ['Pow', '18', '-1'], ['1'], ['Pow', '6', '-1'], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression20': ['67']}","{'expression0': ['2'], 'expression1': ['Pow', 'sin(x)', '2'], 'expression2': ['Pow', 'cos(x)', '2'], 'expression3': ['F(a)'], 'expression4': ['Equality', 'F(a)', 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['a']], 'expression5': ['Equality', 'b', 'Pow', 'sin(x*cos(x)**2)', '2'], 'expression6': ['Equality', 'S_k', 'Add', 'Pow', 'Pow', 'sin(x)', '2', 'k', 'Pow', 'Pow', 'cos(x)', '2', 'k'], 'expression7': ['S_6'], 'expression8': ['Equality', 'S_1', '1'], 'expression9': ['Equality', 'S_2', 'Add', '1', 'Mul', ['-1'], ['2'], ['b']], 'expression10': ['Equality', 'Add', 'S_k', 'Mul', ['-1'], ['S_{k-1}'], '0'], 'expression11': ['k >= 3'], 'expression12': ['F(a)'], 'expression13': ['Equality', 'S_3', 'Add', 'S_2', 'Mul', ['-1'], ['b'], ['S_1']], 'expression14': ['Equality', 'S_4', 'Add', 'S_3', 'Mul', ['-1'], ['b'], ['S_2']], 'expression15': ['Equality', 'S_5', 'Add', 'S_4', 'Mul', ['-1'], ['b'], ['S_3']], 'expression16': ['Equality', 'Add', 'Mul', ['5'], ['Pow', 'b', '2'], 'Mul', ['-1'], ['5'], ['b'], 'Mul', ['11'], ['Pow', '36', '-1']], 'expression17': ['Equality', 'b', 'Mul', ['1'], ['Pow', '6', '-1'], ['\\text{or}'], ['5'], ['Pow', '6', '-1']], 'expression18': ['Ne(sin(x*cos(x)**2)**2, 5/6)'], 'expression19': ['Equality', 'Equality', 'Pow', 'sin(x*cos(x)**2)', '2', 'b', 'Mul', ['1'], ['Pow', '6', '-1']], 'expression20': ['Equality', 'S_4', 'Mul', ['7'], ['Pow', '18', '-1']], 'expression21': ['S_6'], 'expression22': ['Equality', 'Equality', 'S_6', 'Add', 'S_5', 'Mul', ['-1'], ['1'], ['Pow', '6', '-1'], ['S_4'], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression23': ['Equality', 'Add', '13', '54', '67']}","{'expression0': ['Equality', 'Add', 'Pow', 'sin(x)', '10', 'Pow', 'cos(x)', '10', 'Mul', ['Add', 'Pow', 'sin(x)', '2', 'Pow', 'cos(x)', '2'], ['Add', 'Pow', 'sin(x)', '8', 'Mul', ['-1'], ['Pow', 'sin(x)', '6'], ['Pow', 'cos(x)', '2']]], 'expression1': ['Equality', 'Add', 'Pow', 'sin(x)', '4', 'Pow', 'cos(x)', '4', 'Add', '1', 'Mul', ['-1'], ['2'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2']], 'expression2': ['Equality', 'Equality', 'Add', 'Pow', 'sin(x)', '4', 'Pow', 'cos(x)', '4', 'Add', 'Pow', 'Add', 'Pow', 'sin(x)', '2', 'Pow', 'cos(x)', '2', '2', 'Mul', ['-1'], ['2'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2'], 'Add', '1', 'Mul', ['-1'], ['2'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2']], 'expression3': ['Equality', 'Add', '1', 'Mul', ['4'], ['Pow', 'sin(x)', '4'], ['Pow', 'cos(x)', '4'], 'Add', '1', 'Mul', ['-1'], ['5'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2']], 'expression4': ['Equality', 'Add', '1', 'Mul', ['4'], ['Pow', 'sin(x)', '4'], ['Pow', 'cos(x)', '4'], 'Add', '1', 'Mul', ['-1'], ['5'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2']], 'expression5': ['Equality', 'Add', '1', 'Mul', ['4'], ['Pow', 'sin(x)', '4'], ['Pow', 'cos(x)', '4'], 'Add', '1', 'Mul', ['-1'], ['5'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2']], 'expression6': ['Equality', 'Add', '1', 'Mul', ['4'], ['Pow', 'sin(x)', '4'], ['Pow', 'cos(x)', '4'], 'Add', '1', 'Mul', ['-1'], ['5'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2']], 'expression7': ['Equality', 'Add', 'Mul', ['5'], ['Pow', 'sin(x)', '4'], ['Pow', 'cos(x)', '4'], 'Mul', ['-1'], ['5'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2'], '0'], 'expression8': ['Equality', 'Add', 'Mul', ['5'], ['Pow', 'sin(x)', '4'], ['Pow', 'cos(x)', '4'], 'Mul', ['-1'], ['5'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2'], '0'], 'expression9': ['Equality', 'Add', 'Mul', ['5'], ['Pow', 'sin(x)', '4'], ['Pow', 'cos(x)', '4'], 'Mul', ['-1'], ['5'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2'], '0'], 'expression10': ['Equality', 'Mul', ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2'], 'a'], 'expression11': ['Equality', 'Add', 'Mul', ['5'], ['Pow', 'a', '2'], 'Mul', ['-1'], ['5'], ['a'], '0'], 'expression12': ['[Eq(a, 5/6), Eq(a, 1/6)]'], 'expression13': ['sin(x)**2*cos(x)**2 <= 1/4'], 'expression14': ['Equality', 'Equality', 'a', 'Mul', ['Add', '1', 'Mul', ['-1'], ['2'], ['Pow', '3', '-1']], ['Pow', '2', '-1'], 'Mul', ['1'], ['Pow', '6', '-1']], 'expression15': ['Equality', 'Mul', ['Add', '1', 'Mul', ['-1'], ['2'], ['1'], ['Pow', '6', '-1']], ['Add', '1', 'Mul', ['-1'], ['2'], ['Pow', 'Mul', ['1'], ['Pow', '6', '-1'], '2']], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression16': ['Equality', 'Mul', ['Add', '1', 'Mul', ['-1'], ['2'], ['1'], ['Pow', '6', '-1']], ['Add', '1', 'Mul', ['-1'], ['2'], ['Pow', 'Mul', ['1'], ['Pow', '6', '-1'], '2']], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression17': ['Equality', 'Mul', ['Add', '1', 'Mul', ['-1'], ['2'], ['1'], ['Pow', '6', '-1']], ['Add', '1', 'Mul', ['-1'], ['2'], ['Pow', 'Mul', ['1'], ['Pow', '6', '-1'], '2']], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression18': ['Equality', 'Mul', ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2'], 'Mul', ['1'], ['Pow', '6', '-1']], 'expression19': ['Equality', 'Mul', ['Add', '1', 'Mul', ['-1'], ['2'], ['1'], ['Pow', '6', '-1']], ['Add', '1', 'Mul', ['-1'], ['2'], ['Pow', 'Mul', ['1'], ['Pow', '6', '-1'], '2']], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression20': ['67']}","{'expression0': ['Equality', 'a_n', 'Add', 'Pow', 'Pow', 'sin(x)', '2', 'n', 'Pow', 'Pow', 'cos(x)', '2', 'n'], 'expression1': ['a_n'], 'expression2': ['a_n'], 'expression3': ['Equality', 'a_n', 'Add', 'Mul', ['p'], ['a_{n-1}'], 'Mul', ['q'], ['a_{n-2}']], 'expression4': ['p'], 'expression5': ['Equality', 'Add', 'Pow', 'sin(x)', '2', 'Pow', 'cos(x)', '2', '1'], 'expression6': ['q'], 'expression7': ['Mul', ['-1'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2']], 'expression8': ['Equality', 'a_0', '2'], 'expression9': ['Equality', 'a_1', '1'], 'expression10': ['Equality', 'a_5', 'Mul', ['11'], ['Pow', '36', '-1']], 'expression11': ['Equality', 'a_2', 'Add', '1', 'Mul', ['2'], ['q']], 'expression12': ['Equality', 'a_3', 'Add', '1', 'Mul', ['3'], ['q']], 'expression13': ['Equality', 'a_4', 'Add', '1', 'Mul', ['4'], ['q']], 'expression14': ['Equality', 'Equality', 'a_5', 'Add', '1', 'Mul', ['5'], ['q'], 'Mul', ['11'], ['Pow', '36', '-1']], 'expression15': ['Equality', 'a_6', 'Add', '1', 'Mul', ['6'], ['q']], 'expression16': ['q'], 'expression17': ['a_5'], 'expression18': ['Equality', 'Add', 'Pow', 'q', '2', 'q', '0'], 'expression19': ['[Eq(q, -1*5/6), -1*1/6]'], 'expression20': ['Equality', 'q', 'Mul', ['-1'], ['Pow', 'sin(x)', '2'], ['Pow', 'cos(x)', '2']], 'expression21': ['Mul', ['-1'], ['1'], ['Pow', '4', '-1']], 'expression22': ['q'], 'expression23': ['Mul', ['-1'], ['5'], ['Pow', '6', '-1']], 'expression24': ['q'], 'expression25': ['a_6'], 'expression26': ['Equality', 'Equality', 'Equality', 'a_6', 'Add', '1', '-1', 'Mul', ['26'], ['Pow', '108', '-1'], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression27': ['Equality', 'Add', '13', '54', '67']}","{'expression0': ['Equality', 'c', 'Pow', 'sin(x*cos(x)**2)', '2'], 'expression1': ['Equality', 'S(n)', 'Add', 'Pow', 'sin(x)', 'Mul', ['2'], ['n'], 'Pow', 'cos(x)', 'Mul', ['2'], ['n']], 'expression2': ['n >= 1'], 'expression3': ['Equality', 'Equality', 'Equality', 'S(6)', 'Add', 'S(5)', 'Mul', ['-1'], ['c'], ['S(4)'], 'Add', 'Mul', ['11'], ['Pow', '36', '-1'], 'Mul', ['-1'], ['1'], ['Pow', '6', '-1'], ['Add', 'Mul', ['2'], ['Pow', 'Mul', ['1'], ['Pow', '6', '-1'], '2'], 'Mul', ['-1'], ['4'], ['1'], ['Pow', '6', '-1']], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression4': ['Equality', 'Equality', 'Equality', 'S(6)', 'Add', 'S(5)', 'Mul', ['-1'], ['c'], ['S(4)'], 'Add', 'Mul', ['11'], ['Pow', '36', '-1'], 'Mul', ['-1'], ['1'], ['Pow', '6', '-1'], ['Add', 'Mul', ['2'], ['Pow', 'Mul', ['1'], ['Pow', '6', '-1'], '2'], 'Mul', ['-1'], ['4'], ['1'], ['Pow', '6', '-1']], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression5': ['Mul', ['a'], ['n'], ['d']], 'expression6': ['Equality', 'Equality', 'Equality', 'S(6)', 'Add', 'S(5)', 'Mul', ['-1'], ['c'], ['S(4)'], 'Add', 'Mul', ['11'], ['Pow', '36', '-1'], 'Mul', ['-1'], ['1'], ['Pow', '6', '-1'], ['Add', 'Mul', ['2'], ['Pow', 'Mul', ['1'], ['Pow', '6', '-1'], '2'], 'Mul', ['-1'], ['4'], ['1'], ['Pow', '6', '-1']], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression7': ['Mul', ['1'], ['Pow', '6', '-1']], 'expression8': ['Equality', 'Equality', 'Equality', 'S(6)', 'Add', 'S(5)', 'Mul', ['-1'], ['c'], ['S(4)'], 'Add', 'Mul', ['11'], ['Pow', '36', '-1'], 'Mul', ['-1'], ['1'], ['Pow', '6', '-1'], ['Add', 'Mul', ['2'], ['Pow', 'Mul', ['1'], ['Pow', '6', '-1'], '2'], 'Mul', ['-1'], ['4'], ['1'], ['Pow', '6', '-1']], 'Mul', ['13'], ['Pow', '54', '-1']], 'expression9': ['Equality', 'Add', '13', '54', '67']}"
"{'expression0': ['\\tau(n)'], 'expression1': ['n'], 'expression2': ['n'], 'expression3': ['Equality', 'Add', '\\tau (n)', 'Mul', ['tau'], ['Add', 'n', '1'], '7']}","{'expression0': ['7'], 'expression1': ['5'], 'expression2': ['2'], 'expression3': ['4'], 'expression4': ['3'], 'expression5': ['0'], 'expression6': ['9'], 'expression7': ['3'], 'expression8': ['16'], 'expression9': ['5'], 'expression10': ['4'], 'expression11': ['3'], 'expression12': ['4'], 'expression13': ['4'], 'expression14': ['5'], 'expression15': ['9'], 'expression16': ['8'], 'expression17': ['9'], 'expression18': ['9'], 'expression19': ['10'], 'expression20': ['{(8, 9)}'], 'expression21': ['{(9, 10)}'], 'expression22': ['16'], 'expression23': ['15'], 'expression24': ['16'], 'expression25': ['16'], 'expression26': ['17'], 'expression27': ['{(16, 17)}'], 'expression28': ['25'], 'expression29': ['24'], 'expression30': ['25'], 'expression31': ['25'], 'expression32': ['26'], 'expression33': ['{(25, 26)}'], 'expression34': ['49'], 'expression35': ['48'], 'expression36': ['49'], 'expression37': ['49'], 'expression38': ['50'], 'expression39': ['81'], 'expression40': ['80'], 'expression41': ['81'], 'expression42': ['81'], 'expression43': ['82'], 'expression44': ['121'], 'expression45': ['120'], 'expression46': ['121'], 'expression47': ['121'], 'expression48': ['122'], 'expression49': ['{(121, 122)}'], 'expression50': ['169'], 'expression51': ['168'], 'expression52': ['169'], 'expression53': ['169'], 'expression54': ['170'], 'expression55': ['289'], 'expression56': ['288'], 'expression57': ['289'], 'expression58': ['289'], 'expression59': ['290'], 'expression60': ['361'], 'expression61': ['360'], 'expression62': ['361'], 'expression63': ['361'], 'expression64': ['362'], 'expression65': ['{(361, 362)}'], 'expression66': ['n'], 'expression67': ['True']}","{'expression0': ['(a, b)'], 'expression1': ['n'], 'expression2': ['Add', '1', 'n'], 'expression3': ['7'], 'expression4': ['((2, 5), (3, 4), (4, 3))'], 'expression5': ['(5, 2)'], 'expression6': ['(2, 5)'], 'expression7': ['n'], 'expression8': ['Add', '1', 'n'], 'expression9': ['Pow', 'a', '4'], 'expression10': ['Add', '1', 'n'], 'expression11': ['Pow', 'a', '4'], 'expression12': ['Equality', 'Equality', 'n', 'Add', 'Pow', 'a', '4', '-1', 'Mul', ['Add', 'Pow', 'a', '2', '1'], ['Add', 'a', '-1'], ['Add', 'a', '1']], 'expression13': ['n'], 'expression14': ['Add', '-1', 'Pow', 'a', '4'], 'expression15': ['n'], 'expression16': ['(4, 3)'], 'expression17': ['n'], 'expression18': ['Pow', 'a', '3'], 'expression19': ['ab'], 'expression20': ['a'], 'expression21': ['b'], 'expression22': ['Add', '1', 'n'], 'expression23': ['Equality', 'Add', 'n', '1', 'Pow', 'A', '2'], 'expression24': ['[Eq(n, a**3), Eq(a**3 + 1, A**2), Eq((A - 1)*(A + 1), a**3)]'], 'expression25': ['(False, False)'], 'expression26': ['Equality', 'n', '8'], 'expression27': ['(5, 2)'], 'expression28': ['n'], 'expression29': ['Pow', 'a', '4'], 'expression30': ['a'], 'expression31': ['Add', '1', 'n'], 'expression32': ['a'], 'expression33': ['Pow', 'a', '4'], 'expression34': ['Equality', 'n', 'Pow', 'a', '4'], 'expression35': ['Pow', 'a', '4'], 'expression36': ['a'], 'expression37': ['(False, False)'], 'expression38': ['(3, 4)'], 'expression39': ['n'], 'expression40': ['Add', '1', 'n'], 'expression41': ['Pow', 'a', '3'], 'expression42': ['ab'], 'expression43': ['a'], 'expression44': ['b'], 'expression45': ['Equality', 'n', 'Pow', 'A', '2'], 'expression46': ['(False, False)'], 'expression47': ['(False, False)'], 'expression48': ['Equality', 'A', '2'], 'expression49': ['Equality', 'Add', '4', '1', '5'], 'expression50': ['Equality', 'A', '3'], 'expression51': ['Equality', 'Equality', 'Add', '9', '1', '10', 'Mul', ['2'], ['5']], 'expression52': ['Equality', 'n', '9'], 'expression53': ['Equality', 'A', '5'], 'expression54': ['Equality', 'Equality', 'Add', '25', '1', '26', 'Mul', ['2'], ['13']], 'expression55': ['Equality', 'n', '25'], 'expression56': ['Equality', 'A', '7'], 'expression57': ['Equality', 'Equality', 'Add', '49', '1', '50', 'Mul', ['2'], ['Pow', '5', '2']], 'expression58': ['Equality', 'A', '11'], 'expression59': ['Equality', 'Equality', 'Add', '121', '1', '122', 'Mul', ['2'], ['61']], 'expression60': ['Equality', 'n', '121'], 'expression61': ['Equality', 'A', '13'], 'expression62': ['Equality', 'Equality', 'Add', '169', '1', '170', 'Mul', ['2'], ['5'], ['17']], 'expression63': ['Equality', 'A', '17'], 'expression64': ['Equality', 'Equality', 'Add', '289', '1', '290', 'Mul', ['2'], ['5'], ['29']], 'expression65': ['Equality', 'A', '19'], 'expression66': ['Equality', 'Equality', 'Add', '361', '1', '362', 'Mul', ['2'], ['181']], 'expression67': ['Equality', 'n', '361'], 'expression68': ['n'], 'expression69': ['Equality', 'Add', '8', '16', '540']}","{'expression0': ['[p, q]'], 'expression1': ['r'], 'expression2': ['Equality', '\\tau(n)', '1'], 'expression3': ['Equality', 'n', '1'], 'expression4': ['n'], 'expression5': ['[\\tau(n), tau*(n + 1)]'], 'expression6': ['[\\tau(n), tau*(n + 1)]'], 'expression7': ['[n, n + 1]'], 'expression8': ['Equality', 'Abs(p - q**4)', '1'], 'expression9': ['Equality', 'q', '2'], 'expression10': ['Equality', 'p', '17'], 'expression11': ['Equality', 'n', '16'], 'expression12': ['q > 2'], 'expression13': ['q'], 'expression14': ['(False, -1)'], 'expression15': ['p'], 'expression16': ['[\\tau(n), tau*(n + 1)]'], 'expression17': ['[n, n + 1]'], 'expression18': ['{qr, p**2}'], 'expression19': ['Equality', 'Abs(p**2 - q**3)', '1'], 'expression20': ['Equality', 'Equality', 'Add', 'Pow', 'p', '2', '-1', 'Mul', ['Add', 'p', '-1'], ['Add', 'p', '1'], 'Pow', 'q', '3'], 'expression21': ['Equality', 'q', '2'], 'expression22': ['Equality', 'p', '3'], 'expression23': ['Equality', 'q', '2'], 'expression24': ['Equality', 'n', '8'], 'expression25': ['Equality', 'Equality', 'Add', 'Pow', 'q', '3', '-1', 'Mul', ['Add', 'q', '-1'], ['Add', 'Pow', 'q', '2', 'q'], 'Pow', 'p', '2'], 'expression26': ['Equality', 'Add', 'q', '-1', '1'], 'expression27': ['Equality', 'Abs(p**2 - q*r)', '1'], 'expression28': ['Equality', 'Equality', 'Add', 'Pow', 'p', '2', '-1', 'Mul', ['Add', 'p', '-1'], ['Add', 'p', '1'], 'Mul', ['q'], ['r']], 'expression29': ['p > 2'], 'expression30': ['Equality', 'Add', 'Pow', 'p', '2', '1', 'Mul', ['q'], ['r']], 'expression31': ['(True, True, True)'], 'expression32': ['Equality', 'Add', 'Pow', '19', '2', '1', '362'], 'expression33': ['n'], 'expression34': ['(8, 9, 16, 25, 121)'], 'expression35': ['361'], 'expression36': ['540']}",{},{}
"{'expression0': ['Sum', 'z_i', 'over', '(i, 1, 673)'], 'expression1': ['Product((x - z_i)**3, (i, 1, 673))'], 'expression2': ['Add', 'Pow', 'x', '2019', 'Mul', ['20'], ['Pow', 'x', '2018']], 'expression3': ['g(x)'], 'expression4': ['2016'], 'expression5': [""['Abs(Sum(z[j]*z[k], (j, 1, 672), (k, j + 1, 673)))']""], 'expression6': ['Mul', ['m'], ['Pow', 'n', '-1']], 'expression7': ['m'], 'expression8': ['n'], 'expression9': ['Add', 'm', 'n']}","{'expression0': [""['Abs(Sum(z[j]*z[k], (j, 1, 672), (k, j + 1, 673)))']""], 'expression1': ['Sum', 'Mul', ['z_i'], ['z_j'], 'over', '(j, i + 1, 673)'], 'expression2': ['S'], 'expression3': ['Product((x - z_i)**3, (i, 1, 673))'], 'expression4': ['P'], 'expression5': ['Sum', 'Add', 'z_i', 'z_i', 'over', '(i, 1, 673)'], 'expression6': ['P'], 'expression7': ['Equality', 'Equality', 'Equality', 'Mul', ['Pow', '-1', '1'], ['20'], ['Pow', '1', '-1'], '-20', 'Sum', 'Mul', ['3'], ['z_i'], 'over', '(i, 1, 673)', 'Mul', ['3'], ['Sum', 'z_i', 'over', '(i, 1, 673)']], 'expression8': ['[]'], 'expression9': ['P'], 'expression10': ['Equality', 'Mul', ['Pow', '-1', '2'], ['19'], ['Pow', '1', '-1'], '19'], 'expression11': ['[Eq(S, 200/9 - 673*z_i**2/2)]'], 'expression12': ['Sum', 'Pow', 'z_i', '2', 'over', '(i, 1, 673)'], 'expression13': ['S'], 'expression14': ['[Eq(S, 200/9 - 452929*z_i**2/2)]'], 'expression15': ['[Eq(S, 200/9 - 673*z_i**2/2)]'], 'expression16': ['Equality', 'Add', 'Mul', ['3'], ['Add', 'Mul', ['400'], ['Pow', '9', '-1'], 'Mul', ['-1'], ['2'], ['S']], 'Mul', ['9'], ['S'], '19'], 'expression17': ['Equality', 'S', 'Mul', ['-1'], ['343'], ['Pow', '9', '-1']], 'expression18': ['False']}","{'expression0': ['Equality', 'z_i', '0'], 'expression1': ['(3 <= i) <= 673'], 'expression2': ['[z_1, Ne(z_2, 0)]'], 'expression3': ['Equality', 'Add', 'Mul', ['3'], ['z_1'], 'Mul', ['3'], ['z_2'], '-20'], 'expression4': ['Equality', 'Add', 'Mul', ['3'], ['Pow', 'z_1', '2'], 'Mul', ['3'], ['Pow', 'z_2', '2'], '19'], 'expression5': ['Equality', 'Add', 'z_1', 'z_2', 'Mul', ['-20'], ['Pow', '3', '-1']], 'expression6': ['Equality', 'Add', 'Mul', ['3'], ['Add', 'Pow', 'z_1', '2', 'Mul', ['2'], ['z_1'], ['z_2']], 'Mul', ['3'], ['z_1'], ['z_2'], '19'], 'expression7': ['Equality', 'Add', 'Mul', ['3'], ['Pow', 'Add', 'z_1', 'z_2', '2'], 'Mul', ['3'], ['z_1'], ['z_2'], '19'], 'expression8': ['Equality', 'Add', 'Mul', ['3'], ['400'], ['Pow', '9', '-1'], 'Mul', ['3'], ['z_1'], ['z_2'], '19'], 'expression9': ['Equality', 'Add', 'Mul', ['400'], ['Pow', '3', '-1'], 'Mul', ['3'], ['z_1'], ['z_2'], 'Mul', ['57'], ['Pow', '3', '-1']], 'expression10': ['Equality', 'Mul', ['3'], ['z_1'], ['z_2'], 'Mul', ['-343'], ['Pow', '3', '-1']], 'expression11': ['Equality', 'Mul', ['z_1'], ['z_2'], 'Mul', ['-343'], ['Pow', '9', '-1']], 'expression12': ['Equality', 'Abs(-343/9)', 'Mul', ['343'], ['Pow', '9', '-1']], 'expression13': ['Equality', 'Equality', 'Add', 'm', 'n', 'Add', '343', '9', '352']}","{'expression0': [""['Eq(x, Sum((z[j] * z[k]), (j, 1, 672), (k, j+1, 673)))']""], 'expression1': ['Equality', 'Equality', 'Equality', 'Mul', ['3'], ['Sum', 'z_i', 'over', '(i, 1, 673)'], '-20', 'Sum', 'z_i', 'over', '(i, 1, 673)', 'Mul', ['-1'], ['20'], ['Pow', '3', '-1']], 'expression2': ['Mul', ['19'], ['Pow', 'x', '2017']], 'expression3': ['(z_i, z_i)'], 'expression4': ['i'], 'expression5': ['(z_j, z_k)'], 'expression6': ['j < k'], 'expression7': ['False'], 'expression8': ['Equality', 'Pow', '3', '2', '9'], 'expression9': ['{False}'], 'expression10': ['{673}'], 'expression11': ['((1 <= j) < k) <= 673'], 'expression12': ['Add', 'Pow', 'Mul', ['-20'], ['Pow', '3', '-1'], '2', 'Mul', ['-1'], ['2'], ['x']], 'expression13': ['{400}'], 'expression14': ['{343}'], 'expression15': ['Equality', 'Add', '343', '9', '352']}","{'expression0': ['Equality', 'Pow', 'f(x)', '3', 'Add', 'Pow', 'x', '2019', 'Mul', ['20'], ['Pow', 'x', '2018']], 'expression1': ['Equality', 'f(x)', 'Product(x - z_i, (i, 1, 673))'], 'expression2': ['Equality', 'f(x)', 'Add', 'Pow', 'x', '673', 'Mul', ['a'], ['Pow', 'x', '672']], 'expression3': ['a'], 'expression4': ['b'], 'expression5': ['h(x)'], 'expression6': ['670'], 'expression7': ['f(x)'], 'expression8': ['b'], 'expression9': ['Pow', 'f(x)', '3'], 'expression10': ['a'], 'expression11': ['b'], 'expression12': ['Equality', '20', 'Mul', ['3'], ['a']], 'expression13': ['Equality', '19', 'Add', 'Mul', ['3'], ['Pow', 'a', '2'], 'Mul', ['3'], ['b']], 'expression14': ['Equality', 'a', 'Mul', ['20'], ['Pow', '3', '-1']], 'expression15': ['Equality', 'b', 'Mul', ['1'], ['Pow', '3', '-1'], ['Add', '19', 'Mul', ['-1'], ['3'], ['Pow', 'Mul', ['20'], ['Pow', '3', '-1'], '2']]], 'expression16': ['Equality', 'Equality', 'Abs(b)', 'Mul', ['343'], ['Pow', '9', '-1'], 'Mul', ['m'], ['Pow', 'n', '-1']], 'expression17': ['Equality', 'Equality', 'Add', 'm', 'n', 'Add', '343', '9', '352']}","{'expression0': ['Product((x - z_i)**3, (i, 1, 673))'], 'expression1': ['Add', 'Pow', 'x', '2019', 'Mul', ['20'], ['Pow', 'x', '2018']], 'expression2': [""['Eq(S,Abs(Sum(z[j]*z[k], (j, 1, 672), (k, j + 1, 673))))']""], 'expression3': ['P_1'], 'expression4': ['Mul', ['3'], ['Sum', 'x_i', 'over', '(i, 1, 673)']], 'expression5': ['P_2'], 'expression6': ['Mul', ['3'], ['Sum', 'Pow', 'z_i', '2', 'over', '(i, 1, 673)']], 'expression7': ['[]'], 'expression8': ['[Eq(S, 19/9 - 673*z_i**2/3)]'], 'expression9': ['19'], 'expression10': ['2037171'], 'expression11': ['Mul', ['3'], ['673']], 'expression12': ['Mul', ['9'], ['226128']], 'expression13': ['Equality', '2037171', 'Add', 'Mul', ['3'], ['673'], 'Mul', ['9'], ['226128']], 'expression14': ['Sum', 'Pow', 'z_i', '2', 'over', '(i, 1, 673)'], 'expression15': ['Equality', 'Add', 'Mul', ['P_1'], ['a_n'], 'Mul', ['1'], ['a_{n-1}'], '0'], 'expression16': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['P_1'], ['1'], 'Mul', ['1'], ['20'], '0', 'P_1', '-20'], 'expression17': ['Add', 'Mul', ['P_2'], ['a_n'], 'Mul', ['P_1'], ['a_{n-1}']], 'expression18': ['Equality', 'Equality', 'Equality', 'Add', 'P_2', 'Mul', ['-20'], ['20'], '0', 'P_2', '362'], 'expression19': ['Equality', 'Equality', 'Equality', '19', 'Add', '362', 'Mul', ['9'], ['S'], 'S', 'Mul', ['343'], ['Pow', '9', '-1']], 'expression20': ['Mul', ['343'], ['Pow', '9', '-1']], 'expression21': ['{352}']}"
"{'expression0': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression1': ['Equality', 'Mul', ['A'], ['B'], 'Mul', ['A'], ['C']], 'expression2': ['omega'], 'expression3': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression4': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression5': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression6': ['\\overline{BC}'], 'expression7': ['omega'], 'expression8': ['omega'], 'expression9': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']]}","{'expression0': ['omega'], 'expression1': ['Equality', 'Mul', ['B'], ['C'], 'a'], 'expression2': ['Equality', 'Mul', ['A'], ['B'], 'b'], 'expression3': ['s'], 'expression4': ['Equality', 'theta', 'Mul', ['\\angle'], ['A'], ['B'], ['C']], 'expression5': ['r'], 'expression6': ['omega'], 'expression7': ['Add', 'r', 'Mul', ['Mul', ['2'], ['r'], ['s']], ['Pow', 'Add', 's', 'Mul', ['-1'], ['a'], '-1']], 'expression8': ['omega'], 'expression9': ['Mul', ['Mul', ['r'], ['s']], ['Pow', 'Add', 's', 'Mul', ['-1'], ['b'], '-1']], 'expression10': ['Mul', ['B'], ['Pow', 'C', '-1']], 'expression11': ['I_B'], 'expression12': ['I'], 'expression13': ['Equality', 'Mul', ['I'], ['I'], 'Mul', ['Mul', ['2'], ['b'], ['I'], ['B']], ['Pow', 'a', '-1']], 'expression14': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression15': ['Mul', ['\\angle'], ['A'], ['B'], ['C']], 'expression16': ['M'], 'expression17': ['Equality', 'Equality', 'Mul', ['A'], ['M'], 'Mul', ['C'], ['M'], 'Mul', ['I'], ['M']], 'expression18': ['alpha'], 'expression19': ['ABCM'], 'expression20': ['Equality', 'Add', 'Mul', ['a'], ['alpha'], 'Mul', ['b'], ['alpha'], 'Mul', ['b'], ['Add', 'alpha', 'Mul', ['I'], ['B']]], 'expression21': ['Equality', 'Mul', ['I'], ['I'], 'Mul', ['2'], ['I'], ['M']], 'expression22': ['Equality', 'Mul', ['I'], ['I'], 'Mul', ['Mul', ['2'], ['b'], ['I'], ['B']], ['Pow', 'a', '-1']], 'expression23': ['Equality', 'Mul', ['Mul', ['2'], ['b'], ['I'], ['B']], ['Pow', 'a', '-1'], 'Add', 'r', 'Mul', ['Mul', ['2'], ['r'], ['s']], ['Pow', 'Add', 's', 'Mul', ['-1'], ['a'], '-1']], 'expression24': ['Add', 's', 'Mul', ['-1'], ['a']], 'expression25': ['Add', 's', 'Mul', ['-1'], ['b']], 'expression26': ['(False, False)'], 'expression27': ['[Eq(a, 2*y), Eq(b, x + y), Eq(s, x + 2*y)]'], 'expression28': ['Equality', 'Equality', 'r', 'Pow', 'Mul', ['Mul', ['Add', 's', 'Mul', ['-1'], ['a']], ['Add', 's', 'Mul', ['-1'], ['b']], ['Add', 's', 'Mul', ['-1'], ['b']]], ['Pow', 's', '-1'], '1/2', 'Pow', 'Mul', ['Mul', ['x'], ['Pow', 'y', '2']], ['Pow', 'Add', 'x', 'Mul', ['2'], ['y'], '-1'], '1/2'], 'expression29': ['IB'], 'expression30': ['BC'], 'expression31': ['<function N at 0x0000027A4DE17880>'], 'expression32': ['Mul', ['\\triangle'], ['I'], ['N'], ['B']], 'expression33': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['I'], ['Pow', 'B', '2'], 'Add', 'Pow', 'r', '2', 'Pow', 'Mul', ['a'], ['Pow', '2', '-1'], '2', 'Add', 'Mul', ['Mul', ['x'], ['Pow', 'y', '2']], ['Pow', 'Add', 'x', 'Mul', ['2'], ['y'], '-1'], 'Pow', 'y', '2', 'Mul', ['Add', 'Mul', ['2'], ['x'], ['Pow', 'y', '2'], 'Mul', ['2'], ['Pow', 'y', '3']], ['Pow', 'Add', 'x', 'Mul', ['2'], ['y'], '-1'], 'Mul', ['Mul', ['2'], ['Pow', 'y', '2'], ['Add', 'x', 'y']], ['Pow', 'Add', 'x', 'Mul', ['2'], ['y'], '-1']], 'expression34': ['Equality', 'Equality', 'Equality', 'Equality', 'Add', 'r', 'Mul', ['Mul', ['2'], ['r'], ['s']], ['Pow', 'Add', 's', 'Mul', ['-1'], ['a'], '-1'], 'Mul', ['r'], ['Add', '1', 'Mul', ['Mul', ['2'], ['Add', 'x', 'Mul', ['2'], ['y']]], ['Pow', 'x', '-1']], 'Mul', ['r'], ['Add', 'Pow', 'x', '2', 'Mul', ['5'], ['x'], ['y']], ['Pow', 'Mul', ['x'], ['y'], '-1'], 'Mul', ['Mul', ['r'], ['Add', 'x', 'Mul', ['4'], ['y']], ['Add', 'x', 'y']], ['Pow', 'Mul', ['x'], ['y'], '-1'], 'Mul', ['Mul', ['2'], ['Add', 'x', 'y'], ['I'], ['B']], ['Pow', 'Mul', ['2'], ['y'], '-1']], 'expression35': ['Equality', 'Mul', ['Mul', ['r'], ['Add', 'x', 'Mul', ['4'], ['y']]], ['Pow', 'x', '-1'], 'Mul', ['I'], ['B']], 'expression36': ['Equality', 'Mul', ['Mul', ['2'], ['Pow', 'y', '2'], ['Add', 'x', 'y']], ['Pow', 'Add', 'x', 'Mul', ['2'], ['y'], '-1'], 'Mul', ['Mul', ['Pow', 'Add', 'x', 'Mul', ['4'], ['y'], '2'], ['x'], ['Pow', 'y', '2']], ['Pow', 'Mul', ['Pow', 'x', '2'], ['Add', 'x', 'Mul', ['2'], ['y']], '-1']], 'expression37': ['Equality', 'Mul', ['Add', 'x', 'Mul', ['-1'], ['8'], ['y']], ['Add', 'x', 'Mul', ['2'], ['y']], '0'], 'expression38': ['Equality', 'Add', 's', 'Mul', ['-1'], ['a'], 'Add', 'Mul', ['8'], ['s'], 'Mul', ['-1'], ['8'], ['b']], 'expression39': ['Equality', 'a', '2'], 'expression40': ['Equality', 'b', '9'], 'expression41': ['Equality', 'Add', '2', '9', '20']}","{'expression0': ['Equality', 'Mul', ['B'], ['C'], '2'], 'expression1': ['Equality', 'Equality', 'Mul', ['A'], ['B'], 'Mul', ['A'], ['C'], 'x'], 'expression2': ['I'], 'expression3': ['r'], 'expression4': ['AB'], 'expression5': ['BC'], 'expression6': ['CA'], 'expression7': ['M'], 'expression8': ['<function N at 0x0000027A4DE17880>'], 'expression9': [""<class 'sympy.series.order.Order'>""], 'expression10': ['r'], 'expression11': ['x'], 'expression12': ['A'], 'expression13': ['I'], 'expression14': ['M'], 'expression15': ['IM'], 'expression16': ['r'], 'expression17': ['AN'], 'expression18': ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], 'expression19': ['AI'], 'expression20': ['Add', 'Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2', 'Mul', ['-1'], ['r']], 'expression21': ['BN'], 'expression22': ['Equality', 'Mul', ['B'], ['C'], '2'], 'expression23': ['Equality', 'Mul', ['B'], ['N'], 'Mul', ['B'], ['M']], 'expression24': ['Equality', 'Mul', ['B'], ['M'], '1'], 'expression25': ['Equality', 'Mul', ['M'], ['A'], 'Add', 'x', '-1'], 'expression26': ['AIM'], 'expression27': ['Equality', 'Add', 'Pow', 'r', '2', 'Pow', 'Add', 'x', '-1', '2', 'Pow', 'Add', 'Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2', 'Mul', ['-1'], ['r'], '2'], 'expression28': ['Equality', 'Add', 'Pow', 'r', '2', 'Pow', 'x', '2', 'Add', 'Pow', 'x', '2', '-1'], 'expression29': ['Equality', 'Mul', ['2'], ['r'], ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], 'Add', 'Mul', ['2'], ['x'], '-2'], 'expression30': ['2'], 'expression31': ['Equality', 'Mul', ['Pow', 'r', '2'], ['Add', 'Pow', 'x', '2', '-1'], 'Pow', 'Add', 'x', '-1', '2'], 'expression32': ['Pow', 'r', '2'], 'expression33': ['Equality', 'Equality', 'Equality', 'Pow', 'r', '2', 'Mul', ['Pow', 'Add', 'x', '-1', '2'], ['Pow', 'Add', 'Pow', 'x', '2', '-1', '-1'], 'Mul', ['Pow', 'Add', 'x', '-1', '2'], ['Pow', 'Mul', ['Add', 'x', '1'], ['Add', 'x', '-1'], '-1'], 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1']], 'expression34': ['Equality', 'r', 'Pow', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2'], 'expression35': ['BC'], 'expression36': ['e_N'], 'expression37': ['r_N'], 'expression38': ['M'], 'expression39': ['I'], 'expression40': ['e_N'], 'expression41': ['AB'], 'expression42': ['H'], 'expression43': ['Equality', 'Mul', ['B'], ['N'], 'Mul', ['B'], ['H']], 'expression44': ['Equality', 'Mul', ['B'], ['H'], '1'], 'expression45': ['MBI'], 'expression46': ['NBI'], 'expression47': ['HBe'], 'expression48': ['NBe'], 'expression49': ['MBI'], 'expression50': ['NBI'], 'expression51': ['alpha'], 'expression52': ['HBe'], 'expression53': ['NBe'], 'expression54': ['beta'], 'expression55': ['Equality', 'Mul', ['M'], ['B'], ['H'], 'Add', 'Mul', ['2'], ['alpha'], 'Mul', ['2'], ['beta']], 'expression56': ['Equality', 'Add', 'alpha', 'beta', 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression57': ['IBe'], 'expression58': ['Ie'], 'expression59': ['Equality', 'Mul', ['B'], ['N'], '1'], 'expression60': ['Equality', 'Mul', ['I'], ['N'], 'r'], 'expression61': ['Equality', 'Mul', ['E'], ['N'], 'r_N'], 'expression62': ['INB'], 'expression63': ['BNe'], 'expression64': ['IBe'], 'expression65': ['Equality', 'Mul', ['Mul', ['I'], ['N']], ['Pow', 'Mul', ['B'], ['N'], '-1'], 'Mul', ['Mul', ['B'], ['N']], ['Pow', 'Mul', ['E'], ['N'], '-1']], 'expression66': ['Equality', 'Mul', ['r'], ['Pow', '1', '-1'], 'Mul', ['1'], ['Pow', 'r_N', '-1']], 'expression67': ['r_N'], 'expression68': ['r'], 'expression69': ['Equality', 'r_N', 'Pow', 'Mul', ['Add', 'x', '1'], ['Pow', 'Add', 'x', '-1', '-1'], '1/2'], 'expression70': ['omega'], 'expression71': ['I'], 'expression72': ['e_N'], 'expression73': ['Add', 'r', 'Mul', ['2'], ['r_N']], 'expression74': ['Add', 'Pow', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2', 'Mul', ['2'], ['Pow', 'Mul', ['Add', 'x', '1'], ['Pow', 'Add', 'x', '-1', '-1'], '1/2']], 'expression75': ['r_{\\omega}'], 'expression76': ['I'], 'expression77': ['AB'], 'expression78': ['omega'], 'expression79': ['r_{\\omega}'], 'expression80': ['e_M'], 'expression81': ['r_M'], 'expression82': ['AB'], 'expression83': ['BC'], 'expression84': ['J'], 'expression85': ['K'], 'expression86': ['I'], 'expression87': ['e_M'], 'expression88': ['r_M'], 'expression89': ['AB'], 'expression90': ['AC'], 'expression91': ['BC'], 'expression92': ['e_M'], 'expression93': ['K'], 'expression94': ['AN'], 'expression95': ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], 'expression96': ['Ie_M'], 'expression97': ['IAe_M'], 'expression98': ['AI'], 'expression99': ['AN'], 'expression100': ['r'], 'expression101': ['Add', 'Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2', 'Mul', ['-1'], ['Pow', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2']], 'expression102': ['Ae_M'], 'expression103': ['AJe_M'], 'expression104': ['BNA'], 'expression105': ['Je_M'], 'expression106': ['NA'], 'expression107': ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], 'expression108': ['e_MAJ'], 'expression109': ['NAB'], 'expression110': ['NAe_M'], 'expression111': ['Mul', ['A'], ['E']], 'expression112': ['Mul', ['I'], ['E']], 'expression113': ['Equality', 'r_{\\omega}', 'Mul', ['I'], ['E']], 'expression114': ['Equality', 'r_{\\omega}', 'Add', 'Pow', 'Add', 'Pow', 'Add', 'Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2', 'Mul', ['-1'], ['Pow', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2'], '2', 'Pow', 'x', '2', '1/2', 'Mul', ['-1'], ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2']], 'expression115': ['Equality', 'Pow', 'Add', 'r_{\\omega}', 'Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2', '2', 'Add', 'Pow', 'Add', 'Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2', 'Mul', ['-1'], ['Pow', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2'], '2', 'Pow', 'x', '2'], 'expression116': ['Equality', 'Add', 'Pow', 'r_{\\omega}', '2', 'Mul', ['2'], ['r_{\\omega}'], ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], 'Add', 'Pow', 'x', '2', '-1'], 'expression117': ['Equality', 'Add', 'Pow', 'r_{\\omega}', '2', 'Mul', ['2'], ['r_{\\omega}'], ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], 'Add', 'Mul', ['-1'], ['2'], ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], ['Pow', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2'], 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1']], 'expression118': ['Equality', 'Equality', 'Mul', ['-1'], ['2'], ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], ['Pow', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2'], 'Mul', ['-1'], ['2'], ['Pow', 'Mul', ['Add', 'x', '1'], ['Add', 'x', '-1'], ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2'], 'Mul', ['-1'], ['2'], ['Add', 'x', '-1']], 'expression119': ['Equality', 'Add', 'Pow', 'r_{\\omega}', '2', 'Mul', ['2'], ['r_{\\omega}'], ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], 'Add', 'Mul', ['-1'], ['2'], ['Add', 'x', '-1'], 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1']], 'expression120': ['r_{\\omega}'], 'expression121': ['Equality', 'Add', 'Pow', 'Add', 'Pow', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2', 'Mul', ['2'], ['Pow', 'Mul', ['Add', 'x', '1'], ['Pow', 'Add', 'x', '-1', '-1'], '1/2'], '2', 'Mul', ['2'], ['Add', 'Pow', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '1/2', 'Mul', ['2'], ['Pow', 'Mul', ['Add', 'x', '1'], ['Pow', 'Add', 'x', '-1', '-1'], '1/2']], ['Pow', 'Add', 'Pow', 'x', '2', '-1', '1/2'], 'Add', 'Mul', ['-1'], ['2'], ['Add', 'x', '-1'], 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1']], 'expression122': ['Equality', 'Add', 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1'], '4', 'Add', 'Mul', ['-1'], ['2'], ['Add', 'x', '-1'], 'Mul', ['Add', 'x', '-1'], ['Pow', 'Add', 'x', '1', '-1']], 'expression123': ['Equality', 'Mul', ['4'], ['Add', 'x', '1'], ['Pow', 'Add', 'x', '-1', '-1'], 'Add', 'Pow', 'x', '2', 'Mul', ['-1'], ['8'], ['x']], 'expression124': ['Add', '-1', 'x'], 'expression125': ['Equality', 'Add', 'Mul', ['4'], ['x'], '4', 'Add', 'Pow', 'x', '3', 'Mul', ['-1'], ['Pow', 'x', '2']], 'expression126': ['Equality', 'Add', 'Pow', 'x', '3', 'Mul', ['-1'], ['9'], ['Pow', 'x', '2'], '0'], 'expression127': ['Equality', 'Mul', ['Pow', 'x', '2'], ['Add', 'x', '-9'], '0'], 'expression128': ['x'], 'expression129': ['0'], 'expression130': ['9'], 'expression131': ['0'], 'expression132': ['Equality', 'x', '9'], 'expression133': ['Mul', ['Mul', ['9'], ['Pow', '2', '-1']], ['Pow', '9', '-1']], 'expression134': ['1'], 'expression135': ['Equality', 'Add', '9', '2', '20']}","{'expression0': ['AII_A'], 'expression1': ['BII_B'], 'expression2': ['e'], 'expression3': ['I_B'], 'expression4': ['AC'], 'expression5': ['F'], 'expression6': ['BC'], 'expression7': ['J'], 'expression8': ['BA'], 'expression9': ['omega'], 'expression10': ['I_A'], 'expression11': ['I_B'], 'expression12': ['ABC'], 'expression13': ['omega'], 'expression14': ['Add', 'Mul', ['2'], ['r_{I_A}'], 'r'], 'expression15': ['Add', 'Mul', ['B'], ['I'], 'Mul', ['-1'], ['B'], ['I']], 'expression16': ['r'], 'expression17': ['r_{I_A}'], 'expression18': ['(False, False)'], 'expression19': ['Equality', 'h', 'Mul', ['A'], ['D']], 'expression20': ['Add', 'Mul', ['2'], ['a'], 'Mul', ['2'], ['b']], 'expression21': ['Add', 'a', 'b'], 'expression22': ['BDI'], 'expression23': ['BI'], 'expression24': ['Mul', ['\\angle'], ['B']], 'expression25': ['Equality', 'Equality', 'Equality', 'Mul', ['Mul', ['A'], ['I']], ['Pow', 'Mul', ['I'], ['D'], '-1'], 'Mul', ['Mul', ['B'], ['A']], ['Pow', 'Mul', ['B'], ['D'], '-1'], 'Mul', ['Add', 'h', 'Mul', ['-1'], ['r']], ['Pow', 'r', '-1'], 'Mul', ['a'], ['Pow', 'b', '-1']], 'expression26': ['Equality', 'r', 'Mul', ['Mul', ['h'], ['b']], ['Pow', 'Add', 'a', 'b', '-1']], 'expression27': ['AGI'], 'expression28': ['Equality', 'Equality', 'Equality', 'Mul', ['A'], ['G'], 'Add', 'a', 'Mul', ['-1'], ['G'], ['B'], 'Add', 'a', 'Mul', ['-1'], ['B'], ['D'], 'Add', 'a', 'Mul', ['-1'], ['b']], 'expression29': ['Equality', 'Equality', 'Mul', ['A'], ['I'], 'Add', 'h', 'Mul', ['-1'], ['r'], 'Mul', ['Mul', ['h'], ['a']], ['Pow', 'Add', 'a', 'b', '-1']], 'expression30': ['Equality', 'Equality', 'Mul', ['G'], ['I'], 'r', 'Mul', ['Mul', ['h'], ['b']], ['Pow', 'Add', 'a', 'b', '-1']], 'expression31': ['AHI_A'], 'expression32': ['Equality', 'Equality', 'Equality', 'Mul', ['A'], ['H'], 'Add', 'Mul', ['A'], ['B'], 'Mul', ['B'], ['H'], 'Add', 'Mul', ['A'], ['B'], 'Mul', ['B'], ['D'], 'Add', 'a', 'b'], 'expression33': ['Equality', 'Mul', ['A'], ['I'], 'Add', 'h', 'r_{I_A}'], 'expression34': ['Equality', 'Mul', ['H'], ['I'], 'r_{I_A}'], 'expression35': ['Equality', 'Mul', ['\\angle'], ['G'], ['A'], ['I'], 'Mul', ['\\angle'], ['H'], ['A'], ['I']], 'expression36': ['Equality', 'Equality', 'Mul', ['\\angle'], ['I'], ['G'], ['A'], 'Mul', ['\\angle'], ['I'], ['H'], ['A'], 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression37': ['AGI'], 'expression38': ['AHI_A'], 'expression39': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['r_{I_A}'], ['Pow', 'r', '-1'], 'Mul', ['Add', 'h', 'r_{I_A}'], ['Pow', 'Add', 'h', 'Mul', ['-1'], ['r'], '-1'], 'r_{I_A}', 'Mul', ['r'], ['Add', 'h', 'r_{I_A}'], ['Pow', 'Add', 'h', 'Mul', ['-1'], ['r'], '-1'], 'Mul', ['Mul', ['h'], ['b']], ['Pow', 'Add', 'a', 'b', '-1'], ['Add', 'h', 'r_{I_A}'], ['Pow', 'Mul', ['Mul', ['h'], ['a']], ['Pow', 'Add', 'a', 'b', '-1'], '-1'], 'Mul', ['Mul', ['b'], ['Add', 'h', 'r_{I_A}']], ['Pow', 'a', '-1']], 'expression40': ['Equality', 'r_{I_A}', 'Mul', ['Mul', ['h'], ['b']], ['Pow', 'Add', 'a', 'Mul', ['-1'], ['b'], '-1']], 'expression41': ['Add', 'Mul', ['Mul', ['2'], ['h'], ['b']], ['Pow', 'Add', 'a', 'Mul', ['-1'], ['b'], '-1'], 'Mul', ['Mul', ['h'], ['b']], ['Pow', 'Add', 'a', 'b', '-1']], 'expression42': ['BFI_B'], 'expression43': ['BI_B'], 'expression44': ['BF'], 'expression45': ['I_BF'], 'expression46': ['Equality', 'Equality', 'Mul', ['B'], ['F'], 'Add', 'Mul', ['B'], ['C'], 'Mul', ['C'], ['F'], 'Add', 'Mul', ['B'], ['C'], 'Mul', ['C'], ['K']], 'expression47': ['CA'], 'expression48': ['CK'], 'expression49': ['AK'], 'expression50': ['DC'], 'expression51': ['Equality', 'Mul', ['B'], ['J'], 'Mul', ['B'], ['F']], 'expression52': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['B'], ['J'], 'Mul', ['B'], ['F'], 'Add', 'Mul', ['B'], ['A'], 'Mul', ['A'], ['J'], 'Add', 'Mul', ['B'], ['A'], 'Mul', ['A'], ['E'], 'Add', 'Mul', ['B'], ['A'], 'Mul', ['B'], ['C']], 'expression53': ['Equality', 'Mul', ['B'], ['F'], 'Add', 'a', 'b'], 'expression54': ['BDI'], 'expression55': ['BFI_B'], 'expression56': ['Equality', 'Mul', ['B'], ['D'], 'b'], 'expression57': ['Equality', 'Equality', 'Mul', ['I'], ['D'], 'r', 'Mul', ['Mul', ['h'], ['b']], ['Pow', 'Add', 'a', 'b', '-1']], 'expression58': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['I'], ['F'], 'Mul', ['B'], ['F'], ['Mul', ['I'], ['D']], ['Pow', 'Mul', ['B'], ['D'], '-1'], 'Mul', ['Add', 'a', 'b'], ['Mul', ['Mul', ['h'], ['b']], ['Pow', 'Add', 'a', 'b', '-1']], ['Pow', 'b', '-1'], 'Mul', ['Mul', ['h'], ['b']], ['Pow', 'b', '-1'], 'h'], 'expression59': ['h'], 'expression60': ['A'], 'expression61': ['Equality', 'Mul', ['B'], ['I'], 'Pow', 'Add', 'Pow', 'Add', 'a', 'b', '2', 'Pow', 'h', '2', '1/2'], 'expression62': ['Equality', 'Mul', ['B'], ['I'], 'Mul', ['b'], ['Pow', 'Add', 'a', 'b', '-1'], ['Pow', 'Add', 'Pow', 'Add', 'a', 'b', '2', 'Pow', 'h', '2', '1/2']], 'expression63': ['Equality', 'Equality', 'r_{I_B}', 'Mul', ['I'], ['F'], 'h'], 'expression64': ['Equality', 'Equality', 'Add', 'Pow', 'Add', 'Pow', 'Add', 'a', 'b', '2', 'Pow', 'h', '2', '1/2', 'Mul', ['-1'], ['b'], ['Pow', 'Add', 'a', 'b', '-1'], ['Pow', 'Add', 'Pow', 'Add', 'a', 'b', '2', 'Pow', 'h', '2', '1/2'], 'Add', 'Mul', ['Pow', 'Add', 'Pow', 'Add', 'a', 'b', '2', 'Pow', 'h', '2', '1/2'], ['Add', '1', 'Mul', ['-1'], ['b'], ['Pow', 'Add', 'a', 'b', '-1']], 'Mul', ['-1'], ['h'], 'Add', 'Mul', ['Pow', 'Add', 'Pow', 'Add', 'a', 'b', '2', 'Pow', 'h', '2', '1/2'], ['a'], ['Pow', 'Add', 'a', 'b', '-1'], 'Mul', ['-1'], ['h']], 'expression65': ['Equality', 'Add', 'Mul', ['Mul', ['2'], ['h'], ['b']], ['Pow', 'Add', 'a', 'Mul', ['-1'], ['b'], '-1'], 'Mul', ['Mul', ['h'], ['b']], ['Pow', 'Add', 'a', 'b', '-1'], 'Add', 'Mul', ['Pow', 'Add', 'Pow', 'Add', 'a', 'b', '2', 'Pow', 'h', '2', '1/2'], ['a'], ['Pow', 'Add', 'a', 'b', '-1'], 'Mul', ['-1'], ['h']], 'expression66': ['Mul', ['Add', 'a', 'b'], ['Add', 'a', 'Mul', ['-1'], ['b']]], 'expression67': ['Equality', 'Add', 'Mul', ['2'], ['h'], ['b'], ['Add', 'a', 'b'], 'Mul', ['h'], ['b'], ['Add', 'a', 'Mul', ['-1'], ['b']], 'Add', 'Mul', ['Pow', 'Add', 'Pow', 'Add', 'a', 'b', '2', 'Pow', 'h', '2', '1/2'], ['a'], ['Add', 'a', 'Mul', ['-1'], ['b']], 'Mul', ['-1'], ['h'], ['Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['Pow', 'b', '2']]], 'expression68': ['Equality', 'b', '1'], 'expression69': ['Equality', 'Add', 'Mul', ['2'], ['h'], ['Add', 'a', '1'], 'Mul', ['h'], ['Add', 'a', '-1'], 'Add', 'Mul', ['Pow', 'Add', 'Pow', 'Add', 'a', '1', '2', 'Pow', 'h', '2', '1/2'], ['a'], ['Add', 'a', '-1'], 'Mul', ['-1'], ['h'], ['Add', 'Pow', 'a', '2', '-1']], 'expression70': ['Equality', 'h', 'Pow', 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['Pow', 'b', '2'], '1/2'], 'expression71': ['Equality', 'Add', 'Mul', ['2'], ['h'], ['Add', 'a', '1'], 'Mul', ['h'], ['Add', 'a', '-1'], 'Add', 'Mul', ['Pow', 'Add', 'Pow', 'a', '2', 'Mul', ['2'], ['a'], '1/2'], ['a'], ['Add', 'a', '-1'], 'Mul', ['-1'], ['h'], ['Add', 'Pow', 'a', '2', '-1']], 'expression72': ['Equality', 'b', '1'], 'expression73': ['Equality', 'Add', 'Mul', ['2'], ['h'], ['Add', 'a', '1'], 'Mul', ['h'], ['Add', 'a', '-1'], 'Add', 'Mul', ['Pow', 'Add', 'Mul', ['2'], ['Pow', 'a', '2'], 'Mul', ['2'], ['a'], '1/2'], ['a'], ['Add', 'a', '-1'], 'Mul', ['-1'], ['h'], ['Add', 'Pow', 'a', '2', '-1']], 'expression74': ['Equality', 'Add', 'Mul', ['3'], ['h'], ['a'], 'h', 'Mul', ['Pow', 'Add', 'Mul', ['2'], ['Pow', 'a', '2'], 'Mul', ['2'], ['a'], '1/2'], ['a'], ['Add', 'a', '-1']], 'expression75': ['Equality', 'Mul', ['a'], ['h'], ['Add', '3', 'a'], 'Mul', ['a'], ['Add', 'a', '-1'], ['Pow', 'Add', 'Mul', ['2'], ['Pow', 'a', '2'], 'Mul', ['2'], ['a'], '1/2']], 'expression76': ['Equality', 'Mul', ['Pow', 'h', '2'], ['Pow', 'Add', '3', 'a', '2'], 'Mul', ['Pow', 'Add', 'a', '-1', '2'], ['2'], ['a'], ['Add', 'a', '1']], 'expression77': ['Equality', 'Mul', ['Add', 'Pow', 'a', '2', '-1'], ['Pow', 'Add', '3', 'a', '2'], 'Mul', ['2'], ['a'], ['Add', 'a', '1'], ['Pow', 'Add', 'a', '-1', '2']], 'expression78': ['Equality', 'Pow', 'Add', '3', 'a', '2', 'Mul', ['2'], ['a'], ['Add', 'a', '-1']], 'expression79': ['Equality', 'Add', '9', 'Mul', ['6'], ['a'], 'Add', 'Mul', ['2'], ['Pow', 'a', '2'], 'Mul', ['-1'], ['2'], ['a']], 'expression80': ['Equality', 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['8'], ['a'], '0'], 'expression81': ['Equality', 'Mul', ['Add', 'a', '-9'], ['Add', 'a', '1'], '0'], 'expression82': ['Equality', 'a', '9'], 'expression83': ['a'], 'expression84': ['b'], 'expression85': ['Equality', 'Equality', 'Add', 'Mul', ['2'], ['a'], 'Mul', ['2'], ['b'], 'Add', '18', '2', '20']}","{'expression0': ['A'], 'expression1': ['omega'], 'expression2': ['omega'], 'expression3': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression4': ['Equality', 'Mul', ['B'], ['C'], '2'], 'expression5': ['Equality', 'Mul', ['A'], ['B'], 'Mul', ['A'], ['C']], 'expression6': ['6'], 'expression7': ['13'], 'expression8': ['6'], 'expression9': ['A'], 'expression10': ['omega'], 'expression11': ['8'], 'expression12': ['9'], 'expression13': ['9'], 'expression14': ['Equality', 'Add', '2', '9', '20'], 'expression15': ['BC'], 'expression16': ['1'], 'expression17': ['Equality', 'Mul', ['A'], ['B'], 'Mul', ['A'], ['C']], 'expression18': ['4.50000000000000']}","{'expression0': ['M'], 'expression1': ['(BC, False, False)'], 'expression2': ['Equality', 's', 'Add', 'b', 'a'], 'expression3': ['r'], 'expression4': ['(I_A, I_B)'], 'expression5': ['(r_A, r_B)'], 'expression6': ['R'], 'expression7': ['omega'], 'expression8': ['Equality', 'R', 'Add', 'r', 'Mul', ['2'], ['r_A']], 'expression9': ['Equality', 'Equality', 'r', 'Pow', 'Mul', ['Mul', ['Add', 's', 'Mul', ['-1'], ['2'], ['a']], ['Pow', 'Add', 's', 'Mul', ['-1'], ['b'], '2']], ['Pow', 's', '-1'], '1/2', 'Mul', ['a'], ['Pow', 'Mul', ['Add', 'b', 'Mul', ['-1'], ['a']], ['Pow', 'Add', 'b', 'a', '-1'], '1/2']], 'expression10': ['Equality', 'Equality', 'Equality', 'Mul', ['r'], ['s'], 'Mul', ['r_A'], ['Add', 's', 'Mul', ['-1'], ['2'], ['a']], 'r_A', 'Mul', ['a'], ['Pow', 'Mul', ['Add', 'b', 'a'], ['Pow', 'Add', 'b', 'Mul', ['-1'], ['a'], '-1'], '1/2']], 'expression11': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['r'], ['s'], 'Mul', ['r_B'], ['Add', 's', 'Mul', ['-1'], ['b']], 'r_B', 'Pow', 'Add', 'Pow', 'b', '2', 'Mul', ['-1'], ['Pow', 'a', '2'], '1/2', 'Mul', ['A'], ['M']], 'expression12': ['Equality', 'Equality', 'Mul', ['I'], ['I'], 'Add', 'R', 'r_B', 'Add', 'r', 'Mul', ['2'], ['r_A']], 'expression13': ['Equality', 'Equality', 'Mul', ['I'], ['I'], 'Add', 'Mul', ['a'], ['Pow', 'Mul', ['Add', 'b', 'Mul', ['-1'], ['a']], ['Pow', 'Add', 'b', 'a', '-1'], '1/2'], 'Mul', ['2'], ['a'], ['Pow', 'Mul', ['Add', 'b', 'a'], ['Pow', 'Add', 'b', 'Mul', ['-1'], ['a'], '-1'], '1/2'], 'Mul', ['b'], ['Add', 'Mul', ['3'], ['a'], 'b'], ['Pow', 'Pow', 'Add', 'Pow', 'b', '2', 'Mul', ['-1'], ['Pow', 'a', '2'], '1/2', '-1']], 'expression14': ['Equality', 'Equality', '\\overline{AI_B}', 'Add', 'Mul', ['Add', 'Mul', ['\\overline{A}'], ['2'], ['a'], 'Mul', ['-1'], ['\\overline{B}'], ['b']], ['Pow', 'Add', 'Mul', ['2'], ['a'], 'Mul', ['-1'], ['b'], '-1'], 'Mul', ['-1'], ['\\overline{A}'], 'Mul', ['b'], ['Add', '\\overline{C}', 'Mul', ['-1'], ['\\overline{B}']], ['Pow', 'Mul', ['2'], ['a'], '-1']], 'expression15': ['[Eq(I*A, b), Eq(Eq(I*A*\\overline{AI_B}, I*I), sqrt(I*A + (A*M - r)**2))]'], 'expression16': ['Equality', 'Equality', 'Mul', ['I'], ['I'], 'Pow', 'Add', 'Pow', 'b', '2', 'Pow', 'Add', 'Pow', 'Add', 'Pow', 'b', '2', 'Mul', ['-1'], ['Pow', 'a', '2'], '1/2', 'Mul', ['-1'], ['a'], ['Pow', 'Mul', ['Add', 'b', 'Mul', ['-1'], ['a']], ['Pow', 'Add', 'b', 'a', '-1'], '1/2'], '2', '1/2', 'Mul', ['b'], ['Pow', 'Mul', ['Mul', ['2'], ['b']], ['Pow', 'Add', 'b', 'a', '-1'], '1/2']], 'expression17': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['b'], ['Add', 'b', 'Mul', ['3'], ['a']], ['Pow', 'Pow', 'Add', 'Pow', 'b', '2', 'Mul', ['-1'], ['Pow', 'a', '2'], '1/2', '-1'], 'Mul', ['b'], ['Pow', 'Mul', ['Mul', ['2'], ['b']], ['Pow', 'Add', 'b', 'a', '-1'], '1/2'], 'Add', 'b', 'Mul', ['3'], ['a'], 'Pow', 'Mul', ['2'], ['b'], ['Add', 'b', 'Mul', ['-1'], ['a']], '1/2', 'Mul', ['Add', 'b', 'Mul', ['-1'], ['9'], ['a']], ['Add', 'b', 'a'], '0', 'b', 'Mul', ['9'], ['a']], 'expression18': ['Equality', 'a', '1'], 'expression19': ['[Eq(b, 9), Eq(Eq(2*s, 2 + 18), 20)]']}"
"{'expression0': ['Equality', 'f(z)', 'Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z']], 'expression1': ['z'], 'expression2': ['z'], 'expression3': ['f(z)'], 'expression4': ['f(f(z))'], 'expression5': ['f(z)'], 'expression6': ['m'], 'expression7': ['n'], 'expression8': ['z'], 'expression9': ['Add', 'm', 'Pow', 'n', '1/2'], 'expression10': ['Add', 'm', 'n']}","{'expression0': [""I don't understand this\nf(f(z))-f(z)/f(z)-z==-f(f(z))-f(z)/z-f(z)iℝ \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression1': ['Equality', 'Add', 'f(t)', 'Mul', ['-1'], ['t'], 'Mul', ['t'], ['Add', 't', '-20']], 'expression2': ['[Eq(Eq(100, \\text{Re}*(a + 11*i)**2), a**2 - 121), Eq(a, sqrt(221)), Eq(a, -sqrt(221))]'], 'expression3': ['{z(z - 20)}'], 'expression4': ['[Eq(Eq(100, \\text{Re}*(a + 11*i)**2), a**2 - 121), Eq(a, sqrt(221)), Eq(a, -sqrt(221))]'], 'expression5': ['Add', '-9', 'z'], 'expression6': ['[Eq(Eq(100, \\text{Re}*(a + 11*i)**2), a**2 - 121), Eq(a, sqrt(221)), Eq(a, -sqrt(221))]'], 'expression7': ['Equality', 'Equality', 'Mul', ['\\text{Im}'], ['Add', 'z', '-9'], '\\text{Im}(z)', '11'], 'expression8': ['Equality', 'Add', 'z', '-9', 'Add', 'a', 'Mul', ['11'], ['i']], 'expression9': ['[Eq(Eq(100, \\text{Re}*(a + 11*i)**2), a**2 - 121), Eq(a, sqrt(221)), Eq(a, -sqrt(221))]'], 'expression10': ['Equality', 'z', 'Add', '9', 'Pow', '221', '1/2'], 'expression11': ['Equality', 'Add', '9', '221', '230']}","{'expression0': ['AB'], 'expression1': ['BC'], 'expression2': ['Mul', ['Add', 'a', 'Mul', ['-1'], ['b']], ['Pow', 'Add', 'b', 'Mul', ['-1'], ['c'], '-1'], ['c'], ['I']], 'expression3': ['0'], 'expression4': ['Mul', ['Add', 'f(z)', 'Mul', ['-1'], ['z']], ['Pow', 'Add', 'Mul', ['f'], ['f(z)'], 'Mul', ['-1'], ['f(z)'], '-1'], ['c'], ['I']], 'expression5': ['Mul', ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z']], ['Pow', 'Add', 'Pow', 'Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z'], '2', 'Mul', ['-1'], ['19'], ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z']], '-1']], 'expression6': ['Mul', ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['20'], ['z']], ['Pow', 'Add', 'Pow', 'z', '4', 'Mul', ['-1'], ['38'], ['Pow', 'z', '3'], '-1']], 'expression7': ['Mul', ['Mul', ['z'], ['Add', 'z', '-20']], ['Pow', 'Mul', ['z'], ['Add', 'z', '1'], ['Add', 'z', '-19'], ['Add', 'z', '-20'], '-1']], 'expression8': ['Mul', ['1'], ['Pow', 'Mul', ['Add', 'z', '1'], ['Add', 'z', '-19'], '-1'], ['c'], ['I']], 'expression9': ['Add', '-20', 'z'], 'expression10': ['Mul', ['Add', 'z', '1'], ['Add', 'z', '-19'], ['c'], ['I']], 'expression11': ['z'], 'expression12': ['Mul', ['11'], ['i']], 'expression13': ['Mul', ['Add', 'r', '1'], ['Add', 'r', '-19'], ['c'], ['I']], 'expression14': ['Equality', 'Add', 'Pow', 'r', '2', 'Mul', ['-1'], ['18'], ['r'], '0'], 'expression15': ['Equality', 'r', 'Add', '9', 'Pow', '221', '1/2'], 'expression16': ['Equality', 'Add', '9', '221', '230']}","{'expression0': ['(A, B, C)'], 'expression1': ['Equality', 'Mul', ['\\angle'], ['A'], ['B'], ['C'], 'Add', 'B', 'Mul', ['-1'], ['A'], ['Pow', 'B', '-1']], 'expression2': ['(False, False, False)'], 'expression3': ['Equality', 'Z_1', 'Mul', ['Add', 'Mul', ['f'], ['f(z)'], 'Mul', ['-1'], ['f(z)']], ['Pow', 'Add', 'z', 'Mul', ['-1'], ['f(z)'], '-1']], 'expression4': ['False'], 'expression5': ['Equality', '\\Re (Z_1)', '0'], 'expression6': ['Equality', 'Z_1', 'Mul', ['Mul', ['z'], ['Add', 'z', '-19'], ['Add', 'z', '1'], ['Add', 'z', '-20']], ['Pow', 'Mul', ['-1'], ['z'], ['Add', 'z', '-20'], '-1']], 'expression7': ['Equality', 'Z_1', 'Mul', ['-1'], ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['18'], ['z']]], 'expression8': ['Equality', 'z', 'Add', 'a', 'Mul', ['11'], ['i']], 'expression9': ['Equality', 'a', 'Add', 'm', 'Pow', 'n', '1/2'], 'expression10': ['Equality', '\\Re (Z_1)', 'Mul', ['-1'], ['Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['18'], ['a']]], 'expression11': ['Equality', 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['18'], ['a'], '0'], 'expression12': ['Equality', 'a', '9'], 'expression13': ['Pow', '221', '1/2'], 'expression14': ['Equality', 'a', 'Add', '9', 'Pow', '221', '1/2'], 'expression15': ['Equality', 'Add', 'm', 'n', '230']}","{'expression0': ['AB'], 'expression1': ['CD'], 'expression2': ['Mul', ['Add', 'd', 'Mul', ['-1'], ['c']], ['Pow', 'Add', 'b', 'Mul', ['-1'], ['a'], '-1']], 'expression3': ['Equality', 'A', 'z'], 'expression4': ['(B, False)'], 'expression5': ['Equality', 'D', 'Mul', ['f'], ['f(z)']], 'expression6': ['Mul', ['Add', 'Mul', ['f'], ['f(z)'], 'Mul', ['-1'], ['f(z)']], ['Pow', 'Add', 'f(z)', 'Mul', ['-1'], ['z'], '-1']], 'expression7': ['Equality', 'f(z)', 'Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z']], 'expression8': ['Mul', ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z']], ['Pow', 'Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z'], '-1']], 'expression9': ['Mul', ['Add', 'z', '-19'], ['Add', 'z', '1']], 'expression10': ['Equality', 'z', 'Add', 'a', 'Mul', ['b'], ['i']], 'expression11': ['Mul', ['Add', 'a', 'Mul', ['b'], ['i']], ['Add', 'a', 'Mul', ['b'], ['i']]], 'expression12': ['Add', 'Pow', 'a', '2', 'Mul', ['a'], ['b'], ['i']], 'expression13': ['0'], 'expression14': ['Equality', 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['18'], ['a'], '0'], 'expression15': ['Equality', 'b', '11'], 'expression16': ['Equality', 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['18'], ['a'], '0'], 'expression17': ['[Eq(a, 9 + sqrt(221)), -sqrt(221)]'], 'expression18': ['Equality', 'a', 'Add', '9', 'Pow', '221', '1/2'], 'expression19': ['Equality', 'Add', '9', '221', '230']}","{'expression0': ['Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression1': ['[A, B]'], 'expression2': ['C'], 'expression3': ['B'], 'expression4': ['Mul', ['Add', 'C', 'Mul', ['-1'], ['B']], ['Pow', 'Add', 'B', 'Mul', ['-1'], ['A'], '-1']], 'expression5': ['0'], 'expression6': ['Add', 'Pow', 'Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z'], '2', 'Mul', ['-1'], ['19'], ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z']]], 'expression7': ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z']], 'expression8': ['Mul', ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z']], ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['19'], ['z']]], 'expression9': ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['20'], ['z']], 'expression10': ['Mul', ['z'], ['Add', 'z', '-19'], ['Add', 'z', '1'], ['Add', 'z', '-20']], 'expression11': ['{z(z - 20)}'], 'expression12': ['0'], 'expression13': ['Equality', 'z', 'Add', 'x', 'Mul', ['11'], ['i']], 'expression14': ['Add', 'Pow', 'z', '2', 'Mul', ['-1'], ['18'], ['z']], 'expression15': ['Add', 'Pow', 'x', '2', 'Mul', ['-1'], ['Pow', '11', '2']], 'expression16': ['0'], 'expression17': ['[Eq(x, 9 + sqrt(221)), -sqrt(221)]'], 'expression18': ['Equality', 'Add', '9', '221', '230']}"
"{'expression0': ['ABC'], 'expression1': ['Equality', 'Mul', ['A'], ['B'], '4'], 'expression2': ['Equality', 'Mul', ['B'], ['C'], '5'], 'expression3': ['Equality', 'Mul', ['C'], ['A'], '6'], 'expression4': ['D'], 'expression5': ['e'], 'expression6': ['AB'], 'expression7': ['(A*B < A*D) < E*A'], 'expression8': ['Ne(F, C)'], 'expression9': ['Mul', ['\\triangle'], ['A'], ['C'], ['D']], 'expression10': ['Mul', ['\\triangle'], ['E'], ['B'], ['C']], 'expression11': ['Equality', 'Mul', ['D'], ['F'], '2'], 'expression12': ['Equality', 'Mul', ['E'], ['F'], '7'], 'expression13': ['Be'], 'expression14': ['Mul', ['Add', 'a', 'Mul', ['b'], ['Pow', 'c', '1/2']], ['Pow', 'd', '-1']], 'expression15': ['a'], 'expression16': ['b'], 'expression17': ['c'], 'expression18': ['d'], 'expression19': ['a'], 'expression20': ['d'], 'expression21': ['c'], 'expression22': ['Add', 'a', 'b']}","{'expression0': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['\\angle'], ['D'], ['F'], ['E'], 'Add', 'Mul', ['\\angle'], ['C'], ['F'], ['E'], 'Mul', ['-1'], ['\\angle'], ['C'], ['F'], ['D'], 'Add', 'Mul', ['\\angle'], ['C'], ['B'], ['E'], 'Mul', ['-1'], ['\\angle'], ['C'], ['A'], ['D'], 'Add', '180', 'Mul', ['-1'], ['B'], 'C'], 'expression1': ['Equality', 'Equality', 'cos(C)', 'Mul', ['Add', 'Mul', ['A'], ['Pow', 'C', '2'], 'Mul', ['B'], ['Pow', 'C', '2']], ['Pow', 'Mul', ['2'], ['A'], ['C'], ['B'], ['C'], '-1'], 'Mul', ['3'], ['Pow', '4', '-1']], 'expression2': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['D'], ['exp(2)'], 'Add', 'Mul', ['D'], ['Pow', 'F', '2'], 'Mul', ['E'], ['Pow', 'F', '2'], '32', 'Mul', ['D'], ['E'], 'Mul', ['4'], ['Pow', '2', '1/2']], 'expression3': ['Equality', 'X', '\\text{Intersection}(\\overline{AB}, \\overline{CF})'], 'expression4': ['Equality', 'a', 'Mul', ['X'], ['B']], 'expression5': ['Equality', 'b', 'Mul', ['X'], ['D']], 'expression6': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['X'], ['A'], ['X'], ['D'], 'Mul', ['X'], ['C'], ['X'], ['F'], 'Mul', ['X'], ['B'], ['X'], ['E'], 'Mul', ['b'], ['Add', 'a', '4'], 'Mul', ['a'], ['Add', 'b', 'Mul', ['4'], ['Pow', '2', '1/2']], 'b', 'Mul', ['a'], ['Pow', '2', '1/2']], 'expression7': ['Mul', ['\\triangle'], ['X'], ['F'], ['D'], ['\\text{sim}'], ['\\triangle'], ['X'], ['A'], ['C']], 'expression8': ['Equality', 'Mul', ['X'], ['F'], 'Mul', ['Add', '4', 'a'], ['Pow', '3', '-1']], 'expression9': ['Mul', ['\\triangle'], ['X'], ['F'], ['E'], ['\\text{sim}'], ['\\triangle'], ['X'], ['B'], ['C']], 'expression10': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['7'], ['Pow', '5', '-1'], 'Mul', ['Add', '4', 'a'], ['Pow', 'Mul', ['3'], ['a'], '-1'], 'a', 'Mul', ['5'], ['Pow', '4', '-1'], 'Mul', ['B'], ['E'], 'Add', 'a', 'Mul', ['a'], ['Pow', '2', '1/2'], 'Mul', ['Add', '5', 'Mul', ['21'], ['Pow', '2', '1/2']], ['Pow', '4', '-1']], 'expression11': ['Equality', 'Add', '5', '21', '32']}","{'expression0': ['Equality', 'Mul', ['\\angle'], ['A'], ['C'], ['B'], 'Add', 'Mul', ['\\angle'], ['C'], ['B'], ['E'], 'Mul', ['-1'], ['\\angle'], ['C'], ['A'], ['D']], 'expression1': ['Equality', 'Mul', ['\\angle'], ['C'], ['B'], ['E'], 'Mul', ['\\angle'], ['C'], ['F'], ['E']], 'expression2': ['CBFe'], 'expression3': ['Equality', 'Mul', ['\\angle'], ['C'], ['A'], ['D'], 'Mul', ['\\angle'], ['C'], ['F'], ['D']], 'expression4': ['CAFD'], 'expression5': ['Equality', 'Mul', ['\\angle'], ['A'], ['C'], ['B'], 'Add', 'Mul', ['\\angle'], ['C'], ['F'], ['E'], 'Mul', ['-1'], ['\\angle'], ['C'], ['F'], ['D']], 'expression6': ['Equality', 'Add', 'Mul', ['\\angle'], ['C'], ['F'], ['E'], 'Mul', ['-1'], ['\\angle'], ['C'], ['F'], ['D'], 'Mul', ['\\angle'], ['D'], ['F'], ['E']], 'expression7': ['Equality', 'Mul', ['\\angle'], ['A'], ['C'], ['B'], 'Mul', ['\\angle'], ['D'], ['F'], ['E']], 'expression8': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression9': ['Equality', 'cos(A*B*C*\\angle)', 'Mul', ['3'], ['Pow', '4', '-1']], 'expression10': ['Equality', 'Mul', ['\\angle'], ['A'], ['C'], ['B'], 'Mul', ['\\angle'], ['D'], ['F'], ['E']], 'expression11': ['Equality', 'cos(E*D*F*\\angle)', 'Mul', ['3'], ['Pow', '4', '-1']], 'expression12': ['Equality', 'Mul', ['D'], ['F'], '2'], 'expression13': ['Equality', 'Mul', ['F'], ['E'], '7'], 'expression14': ['Mul', ['\\triangle'], ['D'], ['E'], ['F']], 'expression15': ['Equality', 'Mul', ['D'], ['E'], 'Mul', ['4'], ['Pow', '2', '1/2']], 'expression16': ['G'], 'expression17': ['\\overline{Ae}'], 'expression18': ['\\overline{CF}'], 'expression19': ['G'], 'expression20': ['omega_1'], 'expression21': ['Equality', 'Mul', ['A'], ['G'], ['G'], ['D'], 'Mul', ['C'], ['G'], ['G'], ['F']], 'expression22': ['G'], 'expression23': ['omega_2'], 'expression24': ['Equality', 'Mul', ['C'], ['G'], ['G'], ['F'], 'Mul', ['B'], ['G'], ['G'], ['E']], 'expression25': ['Equality', 'Mul', ['A'], ['G'], ['G'], ['D'], 'Mul', ['B'], ['G'], ['G'], ['E']], 'expression26': ['Equality', 'Mul', ['A'], ['G'], ['G'], ['D'], 'Mul', ['B'], ['G'], ['G'], ['E']], 'expression27': ['Equality', 'Mul', ['Add', 'Mul', ['A'], ['B'], 'Mul', ['B'], ['G']], ['G'], ['D'], 'Mul', ['B'], ['G'], ['Add', 'Mul', ['G'], ['D'], 'Mul', ['D'], ['E']]], 'expression28': ['Equality', 'Add', 'Mul', ['A'], ['B'], ['G'], ['D'], 'Mul', ['B'], ['G'], ['G'], ['D'], 'Add', 'Mul', ['B'], ['G'], ['G'], ['D'], 'Mul', ['B'], ['G'], ['D'], ['E']], 'expression29': ['Equality', 'Mul', ['A'], ['B'], ['G'], ['D'], 'Mul', ['B'], ['G'], ['D'], ['E']], 'expression30': ['Equality', 'Mul', ['4'], ['G'], ['D'], 'Mul', ['B'], ['G'], ['4'], ['Pow', '2', '1/2']], 'expression31': ['Equality', 'Mul', ['G'], ['D'], 'Mul', ['B'], ['G'], ['Pow', '2', '1/2']], 'expression32': ['Mul', ['\\triangle'], ['G'], ['A'], ['C']], 'expression33': ['Mul', ['\\triangle'], ['G'], ['F'], ['D']], 'expression34': ['Equality', 'Mul', ['G'], ['F'], 'Mul', ['Add', 'Mul', ['B'], ['G'], '4'], ['Pow', '3', '-1']], 'expression35': ['Mul', ['\\triangle'], ['G'], ['B'], ['C']], 'expression36': ['Mul', ['\\triangle'], ['G'], ['F'], ['E']], 'expression37': ['Equality', 'Mul', ['G'], ['F'], 'Mul', ['Mul', ['7'], ['B'], ['G']], ['Pow', '5', '-1']], 'expression38': ['Equality', 'Mul', ['B'], ['G'], 'Mul', ['5'], ['Pow', '4', '-1']], 'expression39': ['Be'], 'expression40': ['Add', 'Mul', ['B'], ['G'], ['Add', 'Pow', '2', '1/2', '1'], 'Mul', ['4'], ['Pow', '2', '1/2']], 'expression41': ['Mul', ['Add', '5', 'Mul', ['21'], ['Pow', '2', '1/2']], ['Pow', '4', '-1']], 'expression42': ['32']}","{'expression0': ['FC'], 'expression1': ['Equality', 'K', '\\text{Intersection}(C*F, E*A)'], 'expression2': ['Equality', 'Mul', ['F'], ['K'], 'x'], 'expression3': ['Mul', ['\\triangle'], ['F'], ['K'], ['E'], ['\\text{sim}'], ['\\triangle'], ['B'], ['K'], ['C']], 'expression4': ['Equality', 'Mul', ['B'], ['K'], 'Mul', ['5'], ['Pow', '7', '-1'], ['x']], 'expression5': ['Mul', ['\\triangle'], ['F'], ['D'], ['K'], ['\\text{sim}'], ['A'], ['C'], ['K']], 'expression6': ['Equality', 'Equality', 'Mul', ['3'], ['x'], 'Mul', ['A'], ['K'], 'Add', '4', 'Mul', ['5'], ['Pow', '7', '-1'], ['x']], 'expression7': ['Equality', 'Equality', 'Mul', ['B'], ['K'], 'Add', 'Mul', ['21'], ['Pow', '4', '-1'], '-4', 'Mul', ['5'], ['Pow', '4', '-1']], 'expression8': ['Ke'], 'expression9': ['Equality', 'Equality', 'Add', '180', 'Mul', ['-1'], ['\\angle'], ['A'], ['B'], ['C'], 'Mul', ['\\angle'], ['K'], ['B'], ['C'], 'Mul', ['\\angle'], ['K'], ['F'], ['E']], 'expression10': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression11': ['Equality', 'cos(A*B*C*\\angle)', 'Mul', ['1'], ['Pow', '8', '-1']], 'expression12': ['Mul', ['\\triangle'], ['E'], ['F'], ['K']], 'expression13': ['Equality', 'Mul', ['K'], ['E'], 'Mul', ['Mul', ['21'], ['Pow', '2', '1/2']], ['Pow', '4', '-1']], 'expression14': ['Equality', 'Mul', ['B'], ['E'], 'Mul', ['Add', '5', 'Mul', ['21'], ['Pow', '2', '1/2']], ['Pow', '4', '-1']]}","{'expression0': ['Equality', 'P', '\\text{Intersection}(E*A, C*F)'], 'expression1': ['Equality', 'Mul', ['C'], ['P'], 'Mul', ['5'], ['x']], 'expression2': ['Equality', 'Mul', ['B'], ['P'], 'Mul', ['5'], ['y']], 'expression3': ['Mul', ['\\triangle'], ['C'], ['B'], ['P'], ['\\text{sim}'], ['\\triangle'], ['E'], ['F'], ['P']], 'expression4': ['Equality', 'Mul', ['E'], ['P'], 'Mul', ['7'], ['x']], 'expression5': ['Equality', 'Mul', ['F'], ['P'], 'Mul', ['7'], ['y']], 'expression6': ['Mul', ['\\triangle'], ['C'], ['A'], ['P'], ['\\text{sim}'], ['\\triangle'], ['D'], ['F'], ['P']], 'expression7': ['Equality', 'Mul', ['6'], ['Pow', 'Add', '4', 'Mul', ['5'], ['y'], '-1'], 'Mul', ['2'], ['Pow', 'Mul', ['7'], ['y'], '-1']], 'expression8': ['Equality', 'y', 'Mul', ['1'], ['Pow', '4', '-1']], 'expression9': ['Equality', 'Mul', ['B'], ['P'], 'Mul', ['5'], ['Pow', '4', '-1']], 'expression10': ['Equality', 'Mul', ['F'], ['P'], 'Mul', ['7'], ['Pow', '4', '-1']], 'expression11': ['Equality', 'Mul', ['D'], ['P'], 'Mul', ['5'], ['Pow', '3', '-1'], ['x']], 'expression12': ['Equality', 'Mul', ['D'], ['E'], 'Mul', ['16'], ['Pow', '3', '-1'], ['x']], 'expression13': ['Mul', ['\\triangle'], ['F'], ['E'], ['P']], 'expression14': ['FD'], 'expression15': ['Equality', 'Add', 'Mul', ['560'], ['Pow', '9', '-1'], ['Pow', 'x', '3'], 'Mul', ['28'], ['x'], 'Add', 'Mul', ['49'], ['Pow', '3', '-1'], ['x'], 'Mul', ['245'], ['Pow', '3', '-1'], ['x']], 'expression16': ['Equality', 'x', 'Mul', ['Mul', ['3'], ['Pow', '2', '1/2']], ['Pow', '4', '-1']], 'expression17': ['Equality', 'Equality', 'Mul', ['B'], ['E'], 'Add', 'Mul', ['5'], ['Pow', '4', '-1'], 'Mul', ['7'], ['x'], 'Mul', ['Add', '5', 'Mul', ['21'], ['Pow', '2', '1/2']], ['Pow', '4', '-1']], 'expression18': ['32']}","{'expression0': ['CF'], 'expression1': ['Ae'], 'expression2': ['J'], 'expression3': ['Mul', ['\\triangle'], ['A'], ['C'], ['J'], ['\\text{sim}'], ['\\triangle'], ['F'], ['J'], ['D']], 'expression4': ['Equality', 'Equality', 'Mul', ['Mul', ['A'], ['J']], ['Pow', 'Mul', ['F'], ['J'], '-1'], 'Mul', ['Mul', ['A'], ['C']], ['Pow', 'Mul', ['F'], ['D'], '-1'], '3'], 'expression5': ['Mul', ['\\triangle'], ['C'], ['B'], ['J'], ['\\text{sim}'], ['\\triangle'], ['E'], ['F'], ['J']], 'expression6': ['Equality', 'Equality', 'Equality', 'Mul', ['Mul', ['C'], ['B']], ['Pow', 'Mul', ['E'], ['F'], '-1'], 'Mul', ['Mul', ['B'], ['J']], ['Pow', 'Mul', ['F'], ['J'], '-1'], 'Mul', ['Mul', ['C'], ['J']], ['Pow', 'Mul', ['E'], ['J'], '-1'], 'Mul', ['5'], ['Pow', '7', '-1']], 'expression7': ['[Eq(B*J, 5*x), Eq(F*J, 7*x)]'], 'expression8': ['Equality', 'Mul', ['Mul', ['A'], ['J']], ['Pow', 'Mul', ['F'], ['J'], '-1'], '3'], 'expression9': ['Equality', 'Equality', 'Equality', 'Mul', ['Mul', ['A'], ['J']], ['Pow', 'Mul', ['F'], ['J'], '-1'], 'Mul', ['Add', 'Mul', ['A'], ['B'], 'Mul', ['B'], ['J']], ['Pow', 'Mul', ['F'], ['J'], '-1'], 'Mul', ['Add', '4', 'Mul', ['5'], ['x']], ['Pow', 'Mul', ['7'], ['x'], '-1'], '3'], 'expression10': ['[Eq(x, 1/4), Eq(B*J, 5/4), Eq(F*J, 7/4)]'], 'expression11': ['[Eq(E*B*J*J, C*F*J*J), Eq(A*D*J*J, C*F*J*J)]'], 'expression12': ['[Eq(D*J, 5*k), Eq(C*J, 15*k)]'], 'expression13': ['[Eq(E*J, 21*k), Eq(E*D, 16*k)]'], 'expression14': ['[A*C*J*\\triangle, E*F*J*\\triangle]'], 'expression15': ['Equality', 'Add', 'Mul', ['1'], ['Pow', 'Pow', 'Mul', ['15'], ['k'], '2', '-1'], 'Pow', 'Mul', ['21'], ['Pow', '4', '-1'], '2', '36'], 'expression16': ['Equality', 'Add', 'Mul', ['2'], ['Pow', 'Pow', 'Mul', ['21'], ['k'], '2', '-1'], 'Pow', 'Mul', ['7'], ['Pow', '4', '-1'], '2', '49'], 'expression17': ['Equality', 'Mul', ['\\angle'], ['C'], ['J'], ['A'], 'Mul', ['\\angle'], ['F'], ['J'], ['E']], 'expression18': ['Add', 'Mul', ['15'], ['2'], 'Mul', ['-1'], ['7'], ['1']], 'expression19': ['cos'], 'expression20': ['Equality', 'Mul', ['5040'], ['Pow', 'k', '2'], '630'], 'expression21': ['Equality', 'k', 'Mul', ['Pow', '2', '1/2'], ['Pow', '4', '-1']], 'expression22': ['[Eq(Eq(E*B, 21*k), (21*sqrt(2))/4), Eq(B*J, 5/4)]'], 'expression23': ['Mul', ['Add', 'Mul', ['21'], ['Pow', '2', '1/2'], '5'], ['Pow', '4', '-1']], 'expression24': ['32']}"
{'expression0': ['276115350402095809603387042']},"{'expression0': ['Equality', 'Pow', '2019', '8', 'Mod(-1, p)'], 'expression1': ['p'], 'expression2': ['p'], 'expression3': ['Equality', 'Pow', '2019', '16', 'Mod(1, p)'], 'expression4': ['Equality', 'Pow', '2019', '16', 'Mod(1, p)'], 'expression5': ['2019'], 'expression6': ['p'], 'expression7': ['16'], 'expression8': ['2019'], 'expression9': ['p'], 'expression10': ['(1, 2, 4)'], 'expression11': ['8'], 'expression12': ['276115350402095809603387041'], 'expression13': ['Mod(1, p)'], 'expression14': ['Equality', 'Pow', '2019', '8', 'Mod(-1, p)'], 'expression15': ['2019'], 'expression16': ['p'], 'expression17': ['16'], 'expression18': ['p'], 'expression19': ['\\phi(p)'], 'expression20': ['\\phi(p)'], 'expression21': ['16'], 'expression22': ['p'], 'expression23': ['Equality', 'Equality', '\\phi(p)', 'Mul', ['p'], ['Add', '1', 'Mul', ['-1'], ['1'], ['Pow', 'p', '-1']], 'Add', 'p', '-1'], 'expression24': ['Equality', 'p', 'Mod(1, 16)'], 'expression25': ['Mod(1, 16)'], 'expression26': ['17'], 'expression27': ['97'], 'expression28': ['Mul', ['Add', 'p', '-1'], ['Pow', '16', '-1']], 'expression29': ['p - 1 >= 16'], 'expression30': ['p'], 'expression31': ['Mul', ['Add', 'Pow', '2019', '8', '1'], ['Pow', 'p', '-1']], 'expression32': ['Ne(2019**8, Mod(-1, 17))'], 'expression33': ['Equality', 'Pow', '2019', '8', 'Mod(-1, 97)'], 'expression34': ['p'], 'expression35': ['97']}","{'expression0': ['k'], 'expression1': ['p'], 'expression2': ['Add', 'Mul', ['16'], ['k'], '1'], 'expression3': ['p'], 'expression4': ['Add', 'Mul', ['16'], ['k'], '1'], 'expression5': ['276115350402095809603387042'], 'expression6': ['p'], 'expression7': ['2019'], 'expression8': ['276115350402095809603387041'], 'expression9': ['p'], 'expression10': ['276115350402095809603387042'], 'expression11': ['p'], 'expression12': ['2019'], 'expression13': ['276115350402095809603387042'], 'expression14': ['p'], 'expression15': ['Equality', 'Add', 'Pow', '2019', '8', '1', 'Mod(0, p)'], 'expression16': ['Equality', 'Pow', '2019', '8', 'Mod(-1, p)'], 'expression17': ['Equality', 'Pow', '2019', 'Add', 'Mul', ['16'], ['k'], '8', 'Mod(-1, p)'], 'expression18': ['p'], 'expression19': ['Add', 'Mul', ['16'], ['k'], 'm'], 'expression20': ['m'], 'expression21': ['3'], 'expression22': ['15'], 'expression23': ['Equality', 'Pow', '2019', 'Add', 'p', '-1', 'Mod(1, p)'], 'expression24': ['Equality', 'Pow', '2019', 'Add', 'Mul', ['16'], ['k'], 'n', 'Mod(1, p)'], 'expression25': ['Equality', 'n', 'Add', 'm', '-1'], 'expression26': ['2'], 'expression27': ['14'], 'expression28': ['Equality', 'n', '8'], 'expression29': ['Equality', 'Pow', '2019', 'Add', 'Mul', ['16'], ['k'], '8', 'Mod(1, p)'], 'expression30': ['n'], 'expression31': ['8'], 'expression32': ['4'], 'expression33': ['Equality', 'Pow', '2019', 'Add', 'Mul', ['16'], ['k'], 'n', 'Mod(1, p)'], 'expression34': ['n'], 'expression35': ['Equality', 'Pow', '2019', 'Add', 'Mul', ['16'], ['k'], 'n', 'Mod(1, p)'], 'expression36': ['4'], 'expression37': ['0'], 'expression38': ['n'], 'expression39': ['Add', 'Mul', ['16'], ['k'], '1'], 'expression40': ['276115350402095809603387042'], 'expression41': ['17'], 'expression42': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Add', 'Pow', '2019', '8', '1', 'Add', 'Pow', '13', '8', '1', 'Add', 'Pow', '169', '4', '1', 'Add', 'Pow', '-1', '4', '1', 'Add', '1', '1', 'Mod(2, 17)'], 'expression43': ['97'], 'expression44': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Add', 'Pow', '2019', '8', '1', 'Add', 'Pow', '-18', '8', '1', 'Add', 'Pow', '324', '4', '1', 'Add', 'Pow', '33', '4', '1', 'Add', 'Pow', '1089', '2', '1', 'Add', 'Pow', '22', '2', '1', 'Add', '484', '1', 'Add', '-1', '1', 'Mod(0, 97)'], 'expression45': ['97']}","{'expression0': ['p > 2'], 'expression1': ['276115350402095809603387042'], 'expression2': ['Equality', 'Pow', '2019', '8', 'Mod(-1, p)'], 'expression3': ['Equality', 'Pow', '2019', '16', 'Mod(1, p)'], 'expression4': ['Equality', 'Pow', '2019', 'm', 'Mod(1, p)'], 'expression5': ['(0 < m) < 16'], 'expression6': ['Equality', 'Pow', '2019', '1', 'Mod(1, p)'], 'expression7': ['\\text{and}'], 'expression8': ['Equality', 'Pow', '2019', '8', 'Mod(-1, p)'], 'expression9': ['1'], 'expression10': ['8'], 'expression11': ['Pow', '2019', '16'], 'expression12': ['Mod(1, p)'], 'expression13': ['Equality', 'Pow', '2019', 'Add', 'p', '-1', 'Mod(1, p)'], 'expression14': ['Equality', 'p', 'Add', 'Mul', ['16'], ['k'], '1'], 'expression15': ['k'], 'expression16': ['17'], 'expression17': ['97'], 'expression18': ['276115350402095809603387042'], 'expression19': ['17'], 'expression20': ['Equality', 'Equality', 'Equality', '2019', 'Mod(13, 17*\\text{and}*13**2)', '169', 'Mod(-1, 17)'], 'expression21': ['\\text{and}'], 'expression22': ['Ne(Eq(2019**8, 1), Mod(-1, 17))'], 'expression23': ['Equality', '2019', 'Mod(-18, 97)'], 'expression24': ['\\text{and}'], 'expression25': ['{97}'], 'expression26': ['97']}","{'expression0': ['n'], 'expression1': ['Equality', 'Pow', '2019', '8', 'Mod(-1, n)'], 'expression2': ['Equality', 'Pow', '2019', '16', 'Mod(1, n)'], 'expression3': ['Equality', 'Pow', 'a', 'Add', 'n', '-1', 'Mod(1, n)'], 'expression4': ['Add', '-1', 'n'], 'expression5': ['Equality', 'Pow', '2019', '8', 'Mod(-1, n)'], 'expression6': ['Equality', 'Pow', '2019', '8', 'Mod(13**8, 17)'], 'expression7': ['Equality', 'Pow', '169', '4', 'Mod(16**4, 17)'], 'expression8': ['Equality', 'Pow', '256', '2', 'Mod(1, 17)'], 'expression9': ['Equality', 'Add', '1', '1', '2'], 'expression10': ['Equality', 'Pow', '2019', '8', 'Mod(79**8, 97)'], 'expression11': ['Equality', 'Pow', '6241', '4', 'Mod(33**4, 97)'], 'expression12': ['Equality', 'Pow', '1089', '2', 'Mod(22**2, 97)'], 'expression13': ['Equality', '484', 'Mod(-1, 97)'], 'expression14': ['Equality', 'Add', '-1', '1', '0'], 'expression15': ['97']}",{}
"{'expression0': ['\\overline{AB}'], 'expression1': ['omega'], 'expression2': ['P'], 'expression3': ['\\overline{AB}'], 'expression4': ['omega_1'], 'expression5': ['A'], 'expression6': ['P'], 'expression7': ['omega'], 'expression8': ['omega_2'], 'expression9': ['B'], 'expression10': ['P'], 'expression11': ['omega'], 'expression12': ['omega_1'], 'expression13': ['omega_2'], 'expression14': ['P'], 'expression15': ['<sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>'], 'expression16': ['PQ'], 'expression17': ['omega'], 'expression18': ['X'], 'expression19': ['Y'], 'expression20': ['Equality', 'Mul', ['A'], ['P'], '5'], 'expression21': ['Equality', 'Mul', ['P'], ['B'], '3'], 'expression22': ['Equality', 'Mul', ['X'], ['Y'], '11'], 'expression23': ['Equality', 'Mul', ['P'], ['Pow', 'Q', '2'], 'Mul', ['m'], ['Pow', 'n', '-1']], 'expression24': ['m'], 'expression25': ['n'], 'expression26': ['Add', 'm', 'n']}","{'expression0': ['O_1'], 'expression1': ['O_2'], 'expression2': ['omega_1'], 'expression3': ['omega_2'], 'expression4': ['A'], 'expression5': ['omega'], 'expression6': ['omega_1'], 'expression7': ['B'], 'expression8': ['P'], 'expression9': [""<class 'sympy.series.order.Order'>""], 'expression10': ['O_1'], 'expression11': ['[\\overline{OO_2}, \\text{parallel}, \\overline{O_1P}]'], 'expression12': ['[\\overline{OO_1}, \\text{parallel}, \\overline{O_2P}]'], 'expression13': ['OO_1PO_2'], 'expression14': ['Equality', 'Equality', 'Mul', ['\\angle'], ['O_1'], ['Q'], ['O_2'], 'Mul', ['\\angle'], ['O_1'], ['P'], ['O_2'], 'Mul', ['\\angle'], ['O_1'], ['O'], ['O_2']], 'expression15': ['OO_1O_2Q'], 'expression16': ['Equality', 'Equality', 'Mul', ['O'], ['O_1'], 'Mul', ['O_2'], ['P'], 'Mul', ['O_2'], ['Q']], 'expression17': ['OO_1O_2Q'], 'expression18': ['Mul', ['\\overline{O_1O_2}'], ['\\overline{XY}']], 'expression19': ['Mul', ['\\overline{OQ}'], ['\\overline{XY}']], 'expression20': ['<sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>'], 'expression21': ['\\overline{XY}'], 'expression22': ['Equality', 'Equality', 'Mul', ['P'], ['X'], ['P'], ['Y'], 'Mul', ['P'], ['A'], ['P'], ['B'], '15'], 'expression23': ['Equality', 'Equality', 'Add', 'Mul', ['P'], ['X'], 'Mul', ['P'], ['Y'], 'Mul', ['X'], ['Y'], '11'], 'expression24': ['Equality', 'Mul', ['X'], ['Q'], 'Mul', ['11'], ['Pow', '2', '-1']], 'expression25': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['X'], ['P'], 'Mul', ['Add', '11', 'Mul', ['-1'], ['Pow', '61', '1/2']], ['Pow', '2', '-1'], 'Mul', ['P'], ['Q'], 'Add', 'Mul', ['X'], ['Q'], 'Mul', ['-1'], ['X'], ['P'], 'Mul', ['Pow', '61', '1/2'], ['Pow', '2', '-1'], 'Mul', ['P'], ['Pow', 'Q', '2'], 'Mul', ['61'], ['Pow', '4', '-1']], 'expression26': ['Equality', 'Add', '61', '4', '65']}","{'expression0': ['omega'], 'expression1': ['A'], 'expression2': ['B'], 'expression3': ['R'], 'expression4': ['Equality', 'Mul', ['R'], ['Pow', 'A', '2'], 'Mul', ['R'], ['Pow', 'B', '2']], 'expression5': ['R'], 'expression6': ['omega_1'], 'expression7': ['omega_2'], 'expression8': ['\\overline{PQ}'], 'expression9': ['I expected something else here\n-1==(A,B;X,Y),stackrel,A==(R,P;X,Y)\n~~~~~~^'], 'expression10': ['transpose(Q)'], 'expression11': ['\\overline{XY}'], 'expression12': ['Mul', ['E'], ['G'], ['M'], ['O'], ['917/100']], 'expression13': ['Equality', 'Equality', 'Equality', 'Mul', ['R'], ['P'], ['R'], ['transpose(Q)'], 'Mul', ['R'], ['X'], ['R'], ['Y'], 'Mul', ['R'], ['Pow', 'A', '2'], 'Mul', ['R'], ['P'], ['R'], ['Q']], 'expression14': ['Equality', 'Q', 'transpose(Q)'], 'expression15': ['Equality', 'Mul', ['X'], ['P'], 'Mul', ['Add', '11', 'Mul', ['-1'], ['Pow', '61', '1/2']], ['Pow', '2', '-1']], 'expression16': ['Equality', 'Mul', ['X'], ['Q'], 'Mul', ['11'], ['Pow', '2', '-1']], 'expression17': ['Equality', 'Mul', ['P'], ['Q'], 'Mul', ['Pow', '61', '1/2'], ['Pow', '2', '-1']], 'expression18': ['Equality', 'Mul', ['P'], ['Pow', 'Q', '2'], 'Mul', ['61'], ['Pow', '4', '-1']], 'expression19': ['Equality', 'Add', '61', '4', '65']}","{'expression0': ['<sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>'], 'expression1': ['XY'], 'expression2': ['(w, w_1, w_2)'], 'expression3': [""(<class 'sympy.series.order.Order'>, O_1, O_2)""], 'expression4': [""(A, O_1, <class 'sympy.series.order.Order'>)""], 'expression5': [""(<class 'sympy.series.order.Order'>, O_2, B)""], 'expression6': ['(O_1P, O_2P, O_1Q, O_2Q)'], 'expression7': ['Equality', 'Equality', 'Equality', 'Mul', ['\\angle'], ['B'], 'Mul', ['\\angle'], ['A'], 'Mul', ['\\angle'], ['A'], ['P'], ['O_1'], 'Mul', ['\\angle'], ['B'], ['P'], ['O_2']], 'expression8': ['[O_1*P, \\text{parallel}, O*O_2]'], 'expression9': ['[O*O_1, \\text{parallel}, O_2*P]'], 'expression10': ['PO_2OO_1'], 'expression11': ['Equality', 'Mul', ['\\angle'], ['O_2'], ['P'], ['O_1'], 'Mul', ['\\angle'], ['O']], 'expression12': ['O_1O_2PQ'], 'expression13': ['O_1O_2'], 'expression14': ['PQ'], 'expression15': ['Equality', 'Equality', 'Mul', ['\\angle'], ['O_2'], ['Q'], ['O_1'], 'Mul', ['\\angle'], ['O_2'], ['P'], ['O_1'], 'Mul', ['\\angle'], ['O']], 'expression16': [""(O_2, <sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>, <class 'sympy.series.order.Order'>, O_1)""], 'expression17': ['Equality', 'Equality', 'Mul', ['\\angle'], ['O'], ['Q'], ['O_1'], 'Mul', ['\\angle'], ['O'], ['O_2'], ['O_1'], 'Mul', ['\\angle'], ['O_2'], ['O_1'], ['P']], 'expression18': ['Equality', 'Add', 'Mul', ['\\angle'], ['O_1'], ['P'], ['Q'], 'Mul', ['\\angle'], ['O_2'], ['O_1'], ['P'], 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression19': ['Equality', 'Equality', 'Equality', 'Mul', ['\\angle'], ['O'], ['Q'], ['P'], 'Add', 'Mul', ['\\angle'], ['O'], ['Q'], ['O_1'], 'Mul', ['\\angle'], ['O_1'], ['Q'], ['P'], 'Add', 'Mul', ['\\angle'], ['O_2'], ['O_1'], ['P'], 'Mul', ['O_1'], ['P'], ['Q'], 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression20': ['OQPQ'], 'expression21': ['<sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>'], 'expression22': ['XY'], 'expression23': ['Equality', 'Mul', ['X'], ['P'], 'x'], 'expression24': ['Equality', 'Mul', ['P'], ['Y'], 'y'], 'expression25': ['x < y'], 'expression26': ['Equality', 'Mul', ['A'], ['P'], ['P'], ['B'], 'Mul', ['X'], ['P'], ['P'], ['Y']], 'expression27': ['Equality', 'Mul', ['x'], ['y'], '15'], 'expression28': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['X'], ['P'], 'Mul', ['P'], ['Y'], 'Add', 'x', 'y', 'Mul', ['X'], ['Y'], '11'], 'expression29': ['Equality', 'Equality', 'x', 'Mul', ['Add', '11', 'Mul', ['-1'], ['Pow', '61', '1/2']], ['Pow', '2', '-1'], 'Mul', ['X'], ['P']], 'expression30': ['Equality', 'Equality', 'Equality', 'Mul', ['P'], ['Q'], 'Add', 'Mul', ['X'], ['Q'], 'Mul', ['-1'], ['X'], ['P'], 'Add', 'Mul', ['11'], ['Pow', '2', '-1'], 'Mul', ['-1'], ['Add', '11', 'Mul', ['-1'], ['Pow', '61', '1/2']], ['Pow', '2', '-1'], 'Mul', ['Pow', '61', '1/2'], ['Pow', '2', '-1']], 'expression31': ['Equality', 'Mul', ['P'], ['Pow', 'Q', '2'], 'Mul', ['61'], ['Pow', '4', '-1']], 'expression32': ['Equality', 'Equality', 'Add', 'm', 'n', 'Add', '61', '4', '65']}","{'expression0': ['A'], 'expression1': ['B'], 'expression2': ['Z'], 'expression3': ['XY'], 'expression4': ['Equality', 'Mul', ['\\angle'], ['Z'], ['A'], ['B'], 'Mul', ['\\angle'], ['Z'], ['Q'], ['A']], 'expression5': ['Equality', 'Mul', ['\\angle'], ['Z'], ['B'], ['A'], 'Mul', ['\\angle'], ['Z'], ['Q'], ['B']], 'expression6': ['Equality', 'Equality', 'Add', 'Mul', ['\\angle'], ['A'], ['Z'], ['B'], 'Mul', ['\\angle'], ['A'], ['Q'], ['B'], 'Add', 'Mul', ['\\angle'], ['A'], ['Z'], ['B'], 'Mul', ['\\angle'], ['Z'], ['A'], ['B'], 'Mul', ['180'], ['pi'], ['Pow', '180', '-1']], 'expression7': [""I don't understand this\n{1/2 (11 +√(61), -√(61))}\n~~~~~~~~~~^""], 'expression8': ['ZAQB'], 'expression9': [""<class 'sympy.series.order.Order'>""], 'expression10': ['omega'], 'expression11': ['ZAOB'], 'expression12': ['ZO'], 'expression13': ['Equality', 'Mul', ['\\angle'], ['Z'], ['Q'], ['O'], 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression14': ['<sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>'], 'expression15': ['XY'], 'expression16': ['P'], 'expression17': ['Equality', 'Equality', 'Mul', ['P'], ['Y'], ['P'], ['X'], 'Mul', ['P'], ['A'], ['P'], ['B'], '15'], 'expression18': [""I don't understand this\n{1/2 (11 +√(61), -√(61))}\n~~~~~~~~~~^""], 'expression19': ['Equality', 'Add', 'Mul', ['P'], ['Y'], 'Mul', ['P'], ['X'], '11'], 'expression20': [""I don't understand this\nPY, PX ∈{1/2 (11 +√(61), -√(61))}\n~~~~~~~^""], 'expression21': [""I don't understand this\n{1/2 (11 +√(61), -√(61))}\n~~~~~~~~~~^""], 'expression22': ['Equality', 'Mul', ['P'], ['Q'], 'Mul', ['Pow', '61', '1/2'], ['Pow', '2', '-1']], 'expression23': ['Equality', 'Mul', ['P'], ['Pow', 'Q', '2'], 'Mul', ['61'], ['Pow', '4', '-1']], 'expression24': ['Equality', 'Add', '61', '4', '65']}","{'expression0': ['(AQ, QB)'], 'expression1': ['Equality', 'Equality', 'Mul', ['\\angle'], ['A'], ['O_1'], ['P'], 'Mul', ['\\angle'], ['A'], ['O'], ['B'], 'Mul', ['\\angle'], ['B'], ['O_2'], ['P']], 'expression2': ['[Eq(Eq(Eq(A*P*Q*\\angle, (A*O_1*P*\\angle)/2), B*P*Q*\\angle), (B*O_2*P*\\angle)/2), Eq(A*B*Q*\\angle, A*B*O*\\angle)]'], 'expression3': [""(A, <class 'sympy.series.order.Order'>, <sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>, B)""], 'expression4': ['Equality', 'Equality', 'Equality', 'Mul', ['\\angle'], ['A'], ['O_1'], ['P'], 'Mul', ['\\angle'], ['A'], ['O'], ['B'], 'Mul', ['\\angle'], ['B'], ['O_2'], ['P'], 'Mul', ['2'], ['alpha']], 'expression5': ['[Eq(B*P*Q*\\angle, alpha), Eq(A*O_1*P*\\angle, -alpha + 90*pi/180)]'], 'expression6': ['OQXY'], 'expression7': ['<sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>'], 'expression8': ['XY'], 'expression9': ['[Eq(P*P*X*Y, 15), Eq(P*X, (11 - sqrt(61))/2), Eq(Eq(P*Q, -1*(11 - sqrt(61))/2 + 11/2), sqrt(61)/2)]'], 'expression10': ['65']}"
"{'expression0': ['C'], 'expression1': ['D'], 'expression2': ['AB'], 'expression3': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression4': ['Mul', ['\\triangle'], ['B'], ['A'], ['D']], 'expression5': ['Equality', 'Mul', ['A'], ['B'], '9'], 'expression6': ['Equality', 'Equality', 'Mul', ['B'], ['C'], 'Mul', ['A'], ['D'], '10'], 'expression7': ['Equality', 'Equality', 'Mul', ['C'], ['A'], 'Mul', ['D'], ['B'], '17'], 'expression8': ['Mul', ['m'], ['Pow', 'n', '-1']], 'expression9': ['m'], 'expression10': ['n'], 'expression11': ['Add', 'm', 'n']}","{'expression0': ['AB'], 'expression1': ['6'], 'expression2': ['8'], 'expression3': ['AD'], 'expression4': ['CD'], 'expression5': ['0'], 'expression6': ['CD'], 'expression7': ['Equality', 'Add', '9', '6', '21'], 'expression8': [""<class 'sympy.series.order.Order'>""], 'expression9': ['BD'], 'expression10': ['AC'], 'expression11': ['Mul', ['\\triangle'], ['A'], ['B'], ['O']], 'expression12': ['Mul', ['\\triangle'], ['D'], ['C'], ['O']], 'expression13': ['Equality', 'Mul', ['21'], ['Pow', '9', '-1'], 'Mul', ['7'], ['Pow', '3', '-1']], 'expression14': ['y'], 'expression15': [""<class 'sympy.series.order.Order'>""], 'expression16': ['DC'], 'expression17': ['x'], 'expression18': ['Mul', ['\\triangle'], ['A'], ['B'], ['O']], 'expression19': ['Equality', 'Mul', ['7'], ['Pow', '3', '-1'], 'Mul', ['y'], ['Pow', 'x', '-1']], 'expression20': ['Equality', 'Mul', ['7'], ['Pow', '3', '-1'], 'Mul', ['Add', '8', 'Mul', ['-1'], ['x']], ['Pow', 'x', '-1']], 'expression21': ['Equality', 'Mul', ['7'], ['x'], 'Add', '24', 'Mul', ['-1'], ['3'], ['x']], 'expression22': ['Equality', 'Mul', ['10'], ['x'], '24'], 'expression23': ['Equality', 'x', 'Mul', ['12'], ['Pow', '5', '-1']], 'expression24': ['Equality', 'Equality', 'A', 'Mul', ['1'], ['Pow', '2', '-1'], ['9'], ['12'], ['Pow', '5', '-1'], 'Mul', ['54'], ['Pow', '5', '-1']], 'expression25': ['Equality', 'Add', '54', '5', '59']}","{'expression0': ['e'], 'expression1': ['BD'], 'expression2': ['AC'], 'expression3': ['C'], 'expression4': ['Mul', ['\\triangle'], ['B'], ['C'], ['E']], 'expression5': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression6': ['Mul', ['\\triangle'], ['B'], ['C'], ['E']], 'expression7': ['Mul', ['\\triangle'], ['A'], ['D'], ['E']], 'expression8': ['Equality', 'Mul', ['A'], ['E'], 'Mul', ['B'], ['E']], 'expression9': ['Equality', 'Mul', ['D'], ['E'], 'Mul', ['C'], ['E']], 'expression10': ['Equality', 'Mul', ['B'], ['E'], 'Mul', ['A'], ['E']], 'expression11': ['Equality', 'Mul', ['C'], ['E'], 'Add', '17', 'Mul', ['-1'], ['B'], ['E']], 'expression12': ['Mul', ['\\triangle'], ['A'], ['B'], ['E']], 'expression13': ['I expected something else here\nABC-\n~~~~^'], 'expression14': ['Mul', ['\\triangle'], ['B'], ['C'], ['E']], 'expression15': ['Equality', 'Mul', ['\\triangle'], ['A'], ['B'], ['C'], '36'], 'expression16': ['C'], 'expression17': ['Equality', 'Pow', '9', '2', 'Add', 'Pow', '17', '2', 'Pow', '10', '2'], 'expression18': ['Equality', '-308', 'Mul', ['-1'], ['340'], ['c'], ['o'], ['s'], ['C']], 'expression19': ['Equality', 'Mul', ['c'], ['o'], ['s'], ['C'], 'Mul', ['308'], ['Pow', '340', '-1']], 'expression20': ['Mul', ['\\triangle'], ['B'], ['C'], ['E']], 'expression21': ['Equality', 'Mul', ['B'], ['exp(2)'], 'Add', 'Pow', '10', '2', 'Pow', 'Add', '17', 'Mul', ['-1'], ['B'], ['E'], '2'], 'expression22': ['Equality', 'Mul', ['B'], ['exp(2)'], 'Add', '389', 'Mul', ['-1'], ['34'], ['B'], ['E']], 'expression23': ['Equality', '0', 'Add', '389', 'Mul', ['-1'], ['34'], ['B'], ['E']], 'expression24': ['Equality', '0', 'Add', '389', 'Mul', ['-1'], ['34'], ['B'], ['E']], 'expression25': ['Equality', '0', 'Add', '81', 'Mul', ['-1'], ['Mul', ['270'], ['B'], ['E']], ['Pow', '17', '-1']], 'expression26': ['Equality', '81', 'Mul', ['Mul', ['270'], ['B'], ['E']], ['Pow', '17', '-1']], 'expression27': ['Equality', 'Mul', ['B'], ['E'], 'Mul', ['51'], ['Pow', '10', '-1']], 'expression28': ['Equality', 'Equality', 'Equality', 'Mul', ['C'], ['E'], 'Add', '17', 'Mul', ['-1'], ['B'], ['E'], 'Add', '17', 'Mul', ['-1'], ['51'], ['Pow', '10', '-1'], 'Mul', ['119'], ['Pow', '10', '-1']], 'expression29': ['Mul', ['\\triangle'], ['B'], ['C'], ['E']], 'expression30': ['Mul', ['126'], ['Pow', '5', '-1']], 'expression31': ['Mul', ['\\triangle'], ['B'], ['C'], ['E']], 'expression32': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression33': ['Mul', ['\\triangle'], ['A'], ['B'], ['E']], 'expression34': ['Mul', ['54'], ['Pow', '5', '-1']], 'expression35': ['Equality', 'Add', '54', '5', '59']}","{'expression0': ['AD'], 'expression1': ['-12'], 'expression2': ['DB'], 'expression3': ['AC'], 'expression4': ['e'], 'expression5': ['DB'], 'expression6': ['-24'], 'expression7': ['e'], 'expression8': ['h'], 'expression9': ['4.50000000000000'], 'expression10': ['h'], 'expression11': ['Equality', 'Mul', ['h'], ['Pow', '9/2', '-1'], 'Mul', ['8'], ['Pow', '15', '-1']], 'expression12': ['Equality', 'Equality', 'h', 'Mul', ['36'], ['Pow', '15', '-1'], 'Mul', ['12'], ['Pow', '5', '-1']], 'expression13': ['Mul', ['\\triangle'], ['A'], ['B'], ['E']], 'expression14': ['Equality', 'Mul', ['Mul', ['12'], ['Pow', '5', '-1'], ['9']], ['Pow', '2', '-1'], 'Mul', ['54'], ['Pow', '5', '-1']], 'expression15': ['Equality', 'Add', '54', '5', '59']}","{'expression0': ['Equality', 'a', 'Mul', ['\\angle'], ['C'], ['A'], ['B']], 'expression1': ['Equality', 'Equality', 'cos(a)', 'Mul', ['Add', 'Pow', '17', '2', 'Pow', '9', '2'], ['Pow', 'Mul', ['2'], ['9'], ['17'], '-1'], 'Mul', ['15'], ['Pow', '17', '-1']], 'expression2': ['Equality', 'Equality', 'sin(a)', 'Pow', 'Add', '1', 'Mul', ['-1'], ['Pow', 'cos(a)', '2'], '1/2', 'Mul', ['8'], ['Pow', '17', '-1']], 'expression3': ['Equality', 'tan(a)', 'Mul', ['8'], ['Pow', '15', '-1']], 'expression4': ['Equality', 'Equality', 'A', 'Mul', ['1'], ['Pow', '2', '-1'], ['9'], ['9'], ['Pow', '2', '-1'], ['tan(a)'], 'Mul', ['54'], ['Pow', '5', '-1']], 'expression5': ['Equality', 'Add', '54', '5', '59']}","{'expression0': ['Equality', 'Mul', ['A'], ['D'], 'Mul', ['B'], ['C']], 'expression1': ['Equality', 'Mul', ['\\angle'], ['B'], ['A'], ['D'], 'Mul', ['\\angle'], ['A'], ['B'], ['C']], 'expression2': ['ABCD'], 'expression3': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Add', 'Mul', ['A'], ['B'], ['C'], ['D'], 'Mul', ['B'], ['C'], ['A'], ['D'], 'Mul', ['A'], ['C'], ['B'], ['D'], 'Add', 'Mul', ['9'], ['C'], ['D'], 'Pow', '10', '2', 'Pow', '17', '2', 'Mul', ['C'], ['D'], '21'], 'expression4': ['Equality', 'P', '\\text{Intersection}(A*B, C*D)'], 'expression5': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['\\triangle'], ['A'], ['P'], ['B'], ['\\text{sim}'], ['\\triangle'], ['C'], ['P'], ['D'], 'Mul', ['Mul', ['A'], ['P']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Mul', ['Mul', ['C'], ['P']], ['Pow', 'Mul', ['C'], ['D'], '-1'], 'Mul', ['Mul', ['A'], ['P']], ['Pow', '9', '-1'], 'Mul', ['Add', '17', 'Mul', ['-1'], ['A'], ['P']], ['Pow', '21', '-1'], 'Mul', ['A'], ['P'], '51/10'], 'expression6': ['Mul', ['\\triangle'], ['A'], ['B'], ['P']], 'expression7': ['Equality', 'Equality', 'Equality', 'Mul', ['A'], ['B'], ['C'], 'Pow', 'Mul', ['48/5'], ['Add', '48/5', '-51/10'], ['Add', '48/5', '-51/10'], ['Add', '48/5', '-9'], '1/2', '54/5', 'Mul', ['54'], ['Pow', '5', '-1']]}"
"{'expression0': ['Sum', 'n', 'over', '(n, 1, oo)'], 'expression1': ['1'], 'expression2': ['k'], 'expression3': ['Add', '1', 'k'], 'expression4': ['Add', '2', 'k'], 'expression5': ['Mul', ['1'], ['Pow', '2', '-1']], 'expression6': ['7'], 'expression7': ['Mul', ['p'], ['Pow', 'q', '-1']], 'expression8': ['p'], 'expression9': ['q'], 'expression10': ['Add', 'p', 'q']}","{'expression0': ['P_n'], 'expression1': ['7'], 'expression2': ['n'], 'expression3': ['Equality', 'P_7', '1'], 'expression4': ['Equality', 'P_6', 'Mul', ['1'], ['Pow', '2', '-1']], 'expression5': ['Equality', 'P_n', 'Mul', ['1'], ['Pow', '2', '-1'], ['Add', 'P_{n+1}', 'P_{n+2}']], 'expression6': ['(1 <= n) <= 5'], 'expression7': ['Equality', 'P_5', 'Mul', ['3'], ['Pow', '4', '-1']], 'expression8': ['Equality', 'P_4', 'Mul', ['5'], ['Pow', '8', '-1']], 'expression9': ['Equality', 'P_3', 'Mul', ['11'], ['Pow', '16', '-1']], 'expression10': ['Equality', 'P_2', 'Mul', ['21'], ['Pow', '32', '-1']], 'expression11': ['Equality', 'P_1', 'Mul', ['43'], ['Pow', '64', '-1']], 'expression12': ['Equality', 'Add', '43', '64', '107']}","{'expression0': ['k'], 'expression1': ['Add', '1', 'k'], 'expression2': ['k'], 'expression3': ['Add', '2', 'k'], 'expression4': ['Mul', ['6'], ['o'], ['n'], ['E'], ['j'], ['u'], ['m'], ['p'], ['s']], 'expression5': ['Equality', 'Pow', 'Mul', ['1'], ['Pow', '2', '-1'], '6', 'Mul', ['1'], ['Pow', '64', '-1']], 'expression6': ['Mul', ['4'], ['o'], ['n'], ['E'], ['j'], ['u'], ['m'], ['p'], ['s'], ['a'], ['n'], ['d'], ['1'], ['t'], ['w'], ['o'], ['j'], ['u'], ['m'], ['p'], ['s']], 'expression7': ['Equality', 'Mul', ['5'], ['Pow', 'Mul', ['1'], ['Pow', '2', '-1'], '5'], 'Mul', ['5'], ['Pow', '32', '-1']], 'expression8': ['Mul', ['2'], ['o'], ['n'], ['E'], ['j'], ['u'], ['m'], ['p'], ['s'], ['a'], ['n'], ['d'], ['2'], ['t'], ['w'], ['o'], ['j'], ['u'], ['m'], ['p'], ['s']], 'expression9': ['Equality', 'Mul', ['6'], ['Pow', 'Mul', ['1'], ['Pow', '2', '-1'], '4'], 'Mul', ['3'], ['Pow', '8', '-1']], 'expression10': ['Mul', ['3'], ['t'], ['w'], ['o'], ['j'], ['u'], ['m'], ['p'], ['s']], 'expression11': ['Equality', 'Pow', 'Mul', ['1'], ['Pow', '2', '-1'], '3', 'Mul', ['1'], ['Pow', '8', '-1']], 'expression12': ['Mul', ['43'], ['Pow', '64', '-1']], 'expression13': ['{107}']}","{'expression0': ['P_n'], 'expression1': ['n'], 'expression2': ['n'], 'expression3': ['Mul', ['1'], ['Pow', '2', '-1'], ['P_{n-1}']], 'expression4': ['Equality', 'Add', '1', 'Mul', ['-1'], ['P_n'], 'Mul', ['1'], ['Pow', '2', '-1'], ['P_{n-1}']], 'expression5': ['Equality', 'P_n', 'Add', '1', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], ['P_{n-1}']], 'expression6': ['Equality', 'P_1', '1'], 'expression7': ['P_7'], 'expression8': ['{1}'], 'expression9': ['{2}'], 'expression10': ['{1}'], 'expression11': ['{2}'], 'expression12': ['{1}'], 'expression13': ['{2}'], 'expression14': ['{1}'], 'expression15': ['{2}'], 'expression16': ['{3}'], 'expression17': ['{4}'], 'expression18': ['{5}'], 'expression19': ['{8}'], 'expression20': ['{11}'], 'expression21': ['{16}'], 'expression22': ['{21}'], 'expression23': ['{32}'], 'expression24': ['{43}'], 'expression25': ['{64}'], 'expression26': ['P_7'], 'expression27': ['Mul', ['43'], ['Pow', '64', '-1']], 'expression28': ['{107}']}","{'expression0': ['n'], 'expression1': ['n'], 'expression2': ['P_n'], 'expression3': ['n'], 'expression4': ['Add', '-2', 'n'], 'expression5': ['Add', '-1', 'n'], 'expression6': ['Add', '-2', 'n'], 'expression7': ['Mul', ['1'], ['Pow', '2', '-1']], 'expression8': ['Add', '-1', 'n'], 'expression9': ['Equality', 'P_n', 'Mul', ['Add', 'P_{n-2}', 'P_{n-1}'], ['Pow', '2', '-1']], 'expression10': ['Equality', 'P_1', '1'], 'expression11': ['Equality', 'P_2', 'Mul', ['1'], ['Pow', '2', '-1']], 'expression12': ['Equality', 'P_7', 'Mul', ['43'], ['Pow', '64', '-1']], 'expression13': ['Equality', 'Add', '43', '64', '107']}",{}
"{'expression0': ['7'], 'expression1': ['(a, b, c, d, e, f, g)']}","{'expression0': ['c'], 'expression1': ['d'], 'expression2': ['e'], 'expression3': ['c'], 'expression4': ['e'], 'expression5': ['None'], 'expression6': ['(a, b, f, g)'], 'expression7': ['Equality', 'Mul', ['a'], ['b'], '70'], 'expression8': ['Equality', 'Mul', ['f'], ['g'], '72'], 'expression9': ['Equality', 'Mul', ['a'], ['b'], '70'], 'expression10': ['Equality', '70', 'Mul', ['Pow', '2', '1'], ['Pow', '5', '1'], ['Pow', '7', '1']], 'expression11': ['Equality', 'Equality', 'd(70)', 'Mul', ['Add', '1', '1'], ['Add', '1', '1'], ['Add', '1', '1'], '8'], 'expression12': ['Equality', '72', 'Mul', ['Pow', '2', '3'], ['Pow', '3', '2']], 'expression13': ['Equality', 'Equality', 'd(72)', 'Mul', ['4'], ['3'], '12'], 'expression14': ['Equality', 'Mul', ['8'], ['12'], '96']}","{'expression0': ['Equality', 'c', '1'], 'expression1': ['Equality', 'E', '1'], 'expression2': ['d'], 'expression3': ['71'], 'expression4': ['Equality', 'Mul', ['a'], ['b'], '70'], 'expression5': ['Equality', 'Mul', ['f'], ['g'], '72'], 'expression6': ['70'], 'expression7': ['72'], 'expression8': ['8'], 'expression9': ['12'], 'expression10': ['Equality', 'Mul', ['8'], ['12'], '96']}",{},{},{}
"{'expression0': ['Mul', ['m'], ['Pow', 'n', '-1']], 'expression1': ['m'], 'expression2': ['n'], 'expression3': ['Add', 'm', 'n']}","{'expression0': ['0'], 'expression1': ['Mul', ['1'], ['Pow', 'Pow', '6', '4', '-1']], 'expression2': ['n >= 1'], 'expression3': ['a_n'], 'expression4': ['n'], 'expression5': ['Equality', 'a_1', '2'], 'expression6': ['a_{n+1}'], 'expression7': ['a_n'], 'expression8': ['0'], 'expression9': ['n'], 'expression10': ['Mul', ['2'], ['a_n']], 'expression11': ['n'], 'expression12': ['Add', 'Pow', '5', 'n', 'Mul', ['-1'], ['a_n'], ['o'], ['u'], ['t'], ['c'], ['o'], ['m'], ['E'], ['s']], 'expression13': ['0'], 'expression14': ['n'], 'expression15': ['Mul', ['Pow', '2', 'x'], ['Pow', '3', 'y']], 'expression16': ['x'], 'expression17': ['y'], 'expression18': ['x'], 'expression19': ['y'], 'expression20': ['x'], 'expression21': ['y'], 'expression22': ['Add', 'Pow', '5', 'n', 'Mul', ['-1'], ['a_n']], 'expression23': ['Equality', 'Equality', 'a_{n+1}', 'Add', 'Mul', ['2'], ['a_n'], 'Pow', '5', 'n', 'Add', 'Pow', '5', 'n', 'a_n'], 'expression24': ['a_2'], 'expression25': ['a_3'], 'expression26': ['a_4'], 'expression27': ['Equality', 'a_2', '7'], 'expression28': ['Equality', 'a_3', '32'], 'expression29': ['Equality', 'a_4', '157'], 'expression30': ['a_2'], 'expression31': ['Equality', '6', '6'], 'expression32': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['Add', '1', 'Mul', ['6'], ['7']], ['Pow', 'Pow', '6', '4', '-1'], 'Mul', ['200'], ['Pow', 'Pow', '6', '4', '-1'], 'Mul', ['25'], ['Pow', '162', '-1'], 'Add', 'm', 'n', '187']}","{'expression0': ['Pow', 'Mul', ['1'], ['Pow', '3', '-1'], '4'], 'expression1': ['Mul', ['4'], ['Pow', 'Mul', ['1'], ['Pow', '3', '-1'], '3'], ['2'], ['Pow', '3', '-1']], 'expression2': ['Mul', ['6'], ['Pow', 'Mul', ['1'], ['Pow', '3', '-1'], '2'], ['Pow', 'Mul', ['2'], ['Pow', '3', '-1'], '2']], 'expression3': ['Mul', ['4'], ['1'], ['Pow', '3', '-1'], ['Pow', 'Mul', ['2'], ['Pow', '3', '-1'], '3']], 'expression4': ['Pow', 'Mul', ['2'], ['Pow', '3', '-1'], '4'], 'expression5': ['0'], 'expression6': ['Mul', ['1'], ['Pow', '4', '-1']], 'expression7': ['Mul', ['factorial(3)'], ['Pow', 'Pow', '4', '3', '-1']], 'expression8': ['Mul', ['3'], ['Pow', '32', '-1']], 'expression9': ['0'], 'expression10': ['Mul', ['40'], ['Pow', 'Pow', '4', '4', '-1']], 'expression11': ['Mul', ['5'], ['Pow', '32', '-1']], 'expression12': ['0'], 'expression13': ['Equality', 'Add', 'Mul', ['Pow', 'Mul', ['1'], ['Pow', '3', '-1'], '4'], ['1'], 'Mul', ['4'], ['Pow', 'Mul', ['1'], ['Pow', '3', '-1'], '3'], ['2'], ['Pow', '3', '-1'], ['0'], 'Mul', ['25'], ['Pow', '162', '-1']], 'expression14': ['187'], 'expression15': ['{187}']}","{'expression0': ['Equality', 'Pow', '2', '4', '16'], 'expression1': ['Equality', 'Pow', '2', '2', '4'], 'expression2': ['Equality', 'Mul', ['factorial(4)'], ['Pow', 'Mul', ['factorial(2)'], ['factorial(2)'], '-1'], '6'], 'expression3': ['Equality', 'Mul', ['4'], ['4'], ['6'], '96'], 'expression4': ['24'], 'expression5': ['Ne(2*4, 48)'], 'expression6': ['6'], 'expression7': ['Equality', 'Mul', ['factorial(4)'], ['Pow', 'Mul', ['factorial(2)'], ['factorial(2)'], '-1'], '6'], 'expression8': ['Equality', 'Mul', ['6'], ['6'], '36'], 'expression9': ['4'], 'expression10': ['Equality', 'Add', '4', '36', '40'], 'expression11': ['Equality', 'Add', '16', '0', '200'], 'expression12': ['Equality', 'Pow', '6', '4', '1296'], 'expression13': ['Equality', 'Mul', ['200'], ['Pow', '1296', '-1'], 'Mul', ['25'], ['Pow', '162', '-1']], 'expression14': ['Equality', 'Add', '25', '162', '187']}","{'expression0': ['1'], 'expression1': ['1296'], 'expression2': ['1'], 'expression3': ['(1, 1, 1, 1)'], 'expression4': ['1'], 'expression5': ['4'], 'expression6': ['(4, 1, 1, 1)'], 'expression7': ['(2, 2, 1, 1)'], 'expression8': ['Equality', 'Add', '6', '4', '10'], 'expression9': ['9'], 'expression10': ['(3, 3, 1, 1)'], 'expression11': ['Equality', '6', '6'], 'expression12': ['16'], 'expression13': ['(4, 4, 1, 1)'], 'expression14': ['(2, 2, 2, 2)'], 'expression15': ['(2, 2, 4, 1)'], 'expression16': ['Equality', 'Add', '6', '1', '19'], 'expression17': ['25'], 'expression18': ['(5, 5, 1, 1)'], 'expression19': ['Equality', '6', '6'], 'expression20': ['36'], 'expression21': ['(6, 6, 1, 1)'], 'expression22': ['(1, 2, 3, 6)'], 'expression23': ['(2, 3, 2, 3)'], 'expression24': ['(3, 3, 4, 1)'], 'expression25': ['Equality', 'Add', 'Mul', ['2'], ['6'], 'factorial(4)', '48'], 'expression26': ['49'], 'expression27': ['0'], 'expression28': ['64'], 'expression29': ['(4, 4, 4, 1)'], 'expression30': ['(2, 4, 2, 4)'], 'expression31': ['Equality', 'Add', '6', '4', '10'], 'expression32': ['81'], 'expression33': ['(3, 3, 3, 3)'], 'expression34': ['1'], 'expression35': ['100'], 'expression36': ['(2, 2, 5, 5)'], 'expression37': ['(1, 4, 5, 5)'], 'expression38': ['Equality', 'Add', '6', '12', '18'], 'expression39': ['121'], 'expression40': ['0'], 'expression41': ['49'], 'expression42': ['144'], 'expression43': ['(6, 6, 2, 2)'], 'expression44': ['(4, 4, 3, 3)'], 'expression45': ['(2, 3, 4, 6)'], 'expression46': ['(1, 4, 6, 6)'], 'expression47': ['Equality', 'Add', 'Mul', ['2'], ['6'], 'factorial(4)', '48'], 'expression48': ['169'], 'expression49': ['0'], 'expression50': ['196'], 'expression51': ['0'], 'expression52': ['225'], 'expression53': ['(3, 3, 5, 5)'], 'expression54': ['Equality', '6', '6'], 'expression55': ['256'], 'expression56': ['(4, 4, 4, 4)'], 'expression57': ['1'], 'expression58': ['289'], 'expression59': ['0'], 'expression60': ['324'], 'expression61': ['(3, 3, 6, 6)'], 'expression62': ['Equality', '6', '6'], 'expression63': ['361'], 'expression64': ['0'], 'expression65': ['400'], 'expression66': ['(4, 4, 5, 5)'], 'expression67': ['Equality', '6', '6'], 'expression68': ['441'], 'expression69': ['0'], 'expression70': ['484'], 'expression71': ['0'], 'expression72': ['529'], 'expression73': ['0'], 'expression74': ['576'], 'expression75': ['(4, 4, 6, 6)'], 'expression76': ['Equality', '6', '6'], 'expression77': ['625'], 'expression78': ['(5, 5, 5, 5)'], 'expression79': ['1'], 'expression80': ['676'], 'expression81': ['0'], 'expression82': ['729'], 'expression83': ['0'], 'expression84': ['784'], 'expression85': ['0'], 'expression86': ['841'], 'expression87': ['0'], 'expression88': ['900'], 'expression89': ['(5, 5, 6, 6)'], 'expression90': ['6'], 'expression91': ['961'], 'expression92': ['0'], 'expression93': ['1024'], 'expression94': ['0'], 'expression95': ['1089'], 'expression96': ['0'], 'expression97': ['1156'], 'expression98': ['0'], 'expression99': ['1225'], 'expression100': ['0'], 'expression101': ['1296'], 'expression102': ['(6, 6, 6, 6)'], 'expression103': ['1'], 'expression104': ['Equality', 'Pow', '6', '4', '1296'], 'expression105': ['200'], 'expression106': ['Equality', 'Equality', 'Mul', ['200'], ['Pow', '1296', '-1'], 'Mul', ['25'], ['Pow', '162', '-1'], '187']}","{'expression0': ['4'], 'expression1': ['n'], 'expression2': ['Equality', 'p', 'Mul', ['Pow', '2', 'a'], ['Pow', '3', 'b'], ['Pow', '5', 'c']], 'expression3': ['A_n'], 'expression4': ['n'], 'expression5': ['a'], 'expression6': ['b'], 'expression7': ['c'], 'expression8': ['B_n'], 'expression9': ['n'], 'expression10': ['b'], 'expression11': ['a'], 'expression12': ['c'], 'expression13': ['C_n'], 'expression14': ['n'], 'expression15': ['c'], 'expression16': ['a'], 'expression17': ['b'], 'expression18': ['D_n'], 'expression19': ['n'], 'expression20': ['c'], 'expression21': ['a'], 'expression22': ['b'], 'expression23': ['E'], 'expression24': ['n'], 'expression25': ['b'], 'expression26': ['a'], 'expression27': ['c'], 'expression28': ['F_n'], 'expression29': ['n'], 'expression30': ['a'], 'expression31': ['b'], 'expression32': ['c'], 'expression33': ['G_n'], 'expression34': ['n'], 'expression35': ['(a, b)'], 'expression36': ['c'], 'expression37': ['S_n'], 'expression38': ['n'], 'expression39': ['(a, b)'], 'expression40': ['c'], 'expression41': ['Equality', 'A_n', 'Add', 'S_{n-1}', 'B_{n-1}'], 'expression42': ['Equality', 'B_n', 'Add', 'A_{n-1}', 'D_{n-1}'], 'expression43': ['Equality', 'C_n', 'Add', 'S_{n-1}', 'E'], 'expression44': ['Equality', 'D_n', 'Add', 'S_{n-1}', 'A_{n-1}'], 'expression45': ['E'], 'expression46': ['Equality', 'F_n', 'Add', 'B_{n-1}', 'E'], 'expression47': ['Equality', 'G_n', 'Add', 'C_{n-1}', 'D_{n-1}'], 'expression48': ['Equality', 'S_n', 'Add', 'A_{n-1}', 'C_{n-1}'], 'expression49': ['[Eq(Eq(Eq(Eq(A_1, B_1), C_1), D_1), 1), E]'], 'expression50': ['(False, False, False, False)'], 'expression51': ['(False, False, False, False)'], 'expression52': ['Equality', 'S_4', '200'], 'expression53': ['Equality', 'Equality', 'Mul', ['m'], ['Pow', 'n', '-1'], 'Mul', ['200'], ['Pow', '1296', '-1'], 'Mul', ['25'], ['Pow', '162', '-1']], 'expression54': ['{187}']}"
"{'expression0': ['12'], 'expression1': ['1'], 'expression2': ['12'], 'expression3': ['<function N at 0x0000027A4DE17880>'], 'expression4': ['8'], 'expression5': ['<function N at 0x0000027A4DE17880>'], 'expression6': ['1000']}","{'expression0': ['4'], 'expression1': ['6'], 'expression2': ['3'], 'expression3': ['2'], 'expression4': ['Ne(4, 24)'], 'expression5': ['4'], 'expression6': ['4'], 'expression7': ['6'], 'expression8': ['4'], 'expression9': ['5'], 'expression10': ['Equality', 'Mul', ['24'], ['6'], ['5'], '720'], 'expression11': ['6'], 'expression12': ['3'], 'expression13': ['4'], 'expression14': ['3'], 'expression15': ['1'], 'expression16': ['2'], 'expression17': ['Equality', 'Mul', ['24'], ['6'], ['4'], ['2'], '1152'], 'expression18': ['3'], 'expression19': ['2'], 'expression20': ['2'], 'expression21': ['3'], 'expression22': ['Equality', 'Mul', ['24'], ['3'], ['3'], ['3'], '648'], 'expression23': ['Equality', 'Add', '720', '1152', '2520'], 'expression24': ['2520'], 'expression25': ['1000'], 'expression26': ['{520}']}","{'expression0': ['0'], 'expression1': ['0'], 'expression2': ['8'], 'expression3': ['Equality', 'Equality', 'binomial(-1 + 4 + 4, -1 + 4)', '35', '35'], 'expression4': ['0'], 'expression5': ['Equality', 'Mul', ['12'], ['35'], ['6'], '2520'], 'expression6': ['{520}']}","{'expression0': ['Mul', ['6'], ['5'], ['4'], ['3'], ['Pow', '2', '4']], 'expression1': ['Equality', '6', '6'], 'expression2': ['Equality', 'Mul', ['6'], ['2'], '12'], 'expression3': ['Equality', 'Mul', ['6'], ['2'], '12'], 'expression4': ['Equality', 'Mul', ['6'], ['12'], ['12'], ['4'], '3456'], 'expression5': ['Equality', 'Mul', ['Mul', ['6'], ['3']], ['Pow', 'factorial(2)', '-1'], '9'], 'expression6': ['Ne(9*4, 216)'], 'expression7': ['Equality', 'Add', '5760', '-3456', '2520'], 'expression8': ['{520}']}","{'expression0': ['Equality', 'Mul', ['factorial(7)'], ['Pow', 'Mul', ['factorial(3)'], ['factorial(4)'], '-1'], '35'], 'expression1': ['Equality', 'Mul', ['factorial(8)'], ['Pow', 'Mul', ['factorial(4)'], ['factorial(4)'], '-1'], '70'], 'expression2': ['Ne(4, 24)'], 'expression3': ['Equality', 'Equality', 'N', 'Mul', ['Add', '35', '70'], ['24'], '2520'], 'expression4': ['{520}']}",{}
"{'expression0': ['b'], 'expression1': ['b >= 2'], 'expression2': ['Equality', 'Mul', ['3'], ['log(sqrt(x)*log(x, 10), 10)'], '56'], 'expression3': ['Equality', 'log(x, log(x, 10))', '54'], 'expression4': ['x > 1'], 'expression5': ['b']}","{'expression0': ['Equality', 'Mul', ['log(x, 10)'], ['Pow', 'log(log(x, b), 10)', '-1'], '54'], 'expression1': ['Equality', 'log(x, 10)', 'Mul', ['54'], ['log(log(x, b), 10)']], 'expression2': ['Equality', 'x', 'Pow', 'log(x, b)', '54'], 'expression3': ['Pow', 'x', '1/2'], 'expression4': ['Equality', 'Mul', ['3'], ['log(log(x, b)*log(x, b)**27, b)'], '56'], 'expression5': ['Equality', 'Mul', ['3'], ['log(log(x, b)**28, b)'], '56'], 'expression6': ['Equality', 'log(log(x, b)**84, b)', '56'], 'expression7': ['Equality', 'x', 'Pow', 'log(x, b)', '54'], 'expression8': ['Equality', 'log(log(x, b)**54, b)', 'Mul', ['56'], ['54'], ['Pow', '84', '-1']], 'expression9': ['Equality', 'log(x, b)', '36'], 'expression10': ['Equality', 'Pow', 'log(x, b)', '54', 'Pow', '36', '54'], 'expression11': ['Equality', 'x', 'Pow', '6', '108'], 'expression12': ['Equality', 'log(x, b)', '36'], 'expression13': ['x'], 'expression14': ['Pow', 'b', '36'], 'expression15': ['Equality', 'Pow', 'b', '36', 'Pow', '6', '108'], 'expression16': ['Equality', 'Equality', 'b', 'Pow', '6', '3', '216']}","{'expression0': ['Equality', 'Equality', 'Mul', ['3'], ['log(sqrt(x)*log(x, 10), b)'], 'log(x**(3/2)*log(x, 10)**3, b)', '56'], 'expression1': ['Equality', 'Mul', ['Pow', 'x', '3'], ['Pow', '2', '-1'], ['l'], ['o'], ['Pow', 'g_b', '3'], ['x'], 'Pow', 'b', '56'], 'expression2': ['Equality', 'Equality', 'log(x, log(x, 10))', 'Mul', ['log(x, b)'], ['Pow', 'log(log(x, b), b)', '-1'], '54'], 'expression3': ['Equality', 'Equality', 'log(x, b)', 'Mul', ['54'], ['log(log(x, b), b)'], 'log(log(x, b**54), b)'], 'expression4': ['Equality', 'x', 'log(x, b**54)'], 'expression5': ['Equality', 'Equality', 'Mul', ['log(x, b**(54*3/2))'], ['log(x, b**3)'], 'log(x, b**84)', 'Pow', 'b', '56'], 'expression6': ['Equality', 'Equality', 'x', 'Pow', 'b', 'Pow', 'b', 'Mul', ['56'], ['Pow', '84', '-1'], 'Pow', 'b', 'Pow', 'b', 'Mul', ['2'], ['Pow', '3', '-1']], 'expression7': ['Equality', 'x', 'log(x, b**54)'], 'expression8': ['Equality', 'Equality', 'Equality', 'Mul', ['Pow', 'b', 'Pow', 'b', '2'], ['Pow', '3', '-1'], 'Mul', ['l'], ['o'], ['Pow', 'g_b', '54'], ['Pow', 'b', 'Pow', 'b', '2'], ['Pow', '3', '-1'], 'Mul', ['Pow', 'b', '2'], ['Pow', '3', '-1'], ['54'], 'Pow', 'b', '36'], 'expression9': ['Equality', 'Pow', 'b', 'Mul', ['2'], ['Pow', '3', '-1'], '36'], 'expression10': ['Equality', 'Equality', 'Equality', 'b', 'Pow', '36', 'Mul', ['3'], ['Pow', '2', '-1'], 'Pow', '6', '3', '216']}","{'expression0': ['Equality', 'log(x, log(x, 10))', '54'], 'expression1': ['Equality', 'Mul', ['log(x, b)'], ['Pow', 'log(log(x, b), b)', '-1'], '54'], 'expression2': ['Equality', 'Mul', ['log(x, b)'], ['Pow', '54', '-1'], 'log(log(x, b), b)'], 'expression3': ['Equality', 'Mul', ['3'], ['log(sqrt(x)*log(x, 10), 10)'], '56'], 'expression4': ['Equality', 'Mul', ['3'], ['Add', 'Mul', ['1'], ['Pow', '2', '-1'], ['log(x, b)'], 'log(log(x, b), b)'], '56'], 'expression5': ['Equality', 'Mul', ['log(x, b)'], ['Pow', '54', '-1'], 'log(log(x, b), b)'], 'expression6': ['Equality', 'Add', 'Mul', ['1'], ['Pow', '2', '-1'], ['log(x, b)'], 'log(log(x, b), b)', 'Mul', ['56'], ['Pow', '3', '-1']], 'expression7': ['Equality', 'Equality', 'Add', 'Mul', ['1'], ['Pow', '2', '-1'], ['log(x, b)'], 'Mul', ['log(x, b)'], ['Pow', '54', '-1'], 'Mul', ['Mul', ['28'], ['log(x, b)']], ['Pow', '54', '-1'], 'Mul', ['56'], ['Pow', '3', '-1']], 'expression8': ['Equality', 'log(x, b)', '36'], 'expression9': ['Equality', 'Mul', ['log(x, b)'], ['Pow', '54', '-1'], 'log(log(x, b), b)'], 'expression10': ['Equality', 'Mul', ['36'], ['Pow', '54', '-1'], 'log(36, b)'], 'expression11': ['Equality', 'Pow', 'b', 'Mul', ['2'], ['Pow', '3', '-1'], '36']}","{'expression0': ['Equality', 'log(sqrt(x)*log(x, 10), 10)', 'Mul', ['56'], ['Pow', '3', '-1']], 'expression1': ['Equality', 'Equality', 'Add', 'log(sqrt(x), 10)', 'log(log(x, 10), 10)', 'Add', 'Mul', ['1'], ['Pow', '2', '-1'], ['log(x, 10)'], 'log(log(x, 10), 10)', 'Mul', ['56'], ['Pow', '3', '-1']], 'expression2': ['Equality', 'x', 'Pow', 'log(x, 10)', '54'], 'expression3': ['Equality', 'log(x, 10)', 'a'], 'expression4': ['Equality', 'x', 'Pow', 'b', 'a'], 'expression5': ['Equality', 'Pow', 'b', 'a', 'Pow', 'a', '54'], 'expression6': ['Equality', 'b', 'Pow', 'a', 'Mul', ['54'], ['Pow', 'a', '-1']], 'expression7': ['Equality', 'Add', 'Mul', ['1'], ['Pow', 'Mul', ['2'], ['a'], '-1'], 'Mul', ['Mul', ['l'], ['o'], ['Pow', 'g_a', '54']], ['Pow', 'Mul', ['a'], ['a'], '-1'], 'Mul', ['56'], ['Pow', '3', '-1']], 'expression8': ['Equality', 'Add', 'Mul', ['1'], ['Pow', '2', '-1'], ['a'], 'Mul', ['1'], ['Pow', '54', '-1'], ['a'], 'Mul', ['56'], ['Pow', '3', '-1']], 'expression9': ['Equality', 'Mul', ['14'], ['Pow', '27', '-1'], ['a'], 'Mul', ['56'], ['Pow', '3', '-1']], 'expression10': ['Equality', 'a', '36'], 'expression11': ['False']}","{'expression0': ['Equality', 'y', 'log(x, b)'], 'expression1': ['Equality', 'Mul', ['3'], ['log(sqrt(x)*y, b)'], '56'], 'expression2': ['Equality', 'log(x, y)', '54'], 'expression3': ['Equality', 'Pow', 'y', '54', 'x'], 'expression4': ['Equality', 'Equality', 'Mul', ['3'], ['log(y*y**27, b)'], 'Mul', ['3'], ['log(y**28, b)'], '56'], 'expression5': ['Equality', 'log(y, b)', 'Mul', ['2'], ['Pow', '3', '-1']], 'expression6': ['Equality', 'Pow', 'b', 'Mul', ['2'], ['Pow', '3', '-1'], 'y'], 'expression7': ['Equality', 'Pow', 'b', '36', 'x'], 'expression8': ['Equality', 'Equality', 'y', 'log(x, b)', '36'], 'expression9': ['False']}"
"{'expression0': ['ABC'], 'expression1': ['(False, False)'], 'expression2': ['Equality', 'Mul', ['A'], ['C'], '180'], 'expression3': ['[\\ell_A, \\ell_B]'], 'expression4': ['\\ell_C'], 'expression5': ['[\\overline{BC}, \\overline{AC}]'], 'expression6': ['\\overline{AB}'], 'expression7': ['[\\ell_A, \\ell_B]'], 'expression8': ['\\ell_C'], 'expression9': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression10': ['(55, 45)'], 'expression11': ['15'], 'expression12': ['[\\ell_A, \\ell_B]'], 'expression13': ['\\ell_C']}","{'expression0': ['[\\ell_A, \\ell_B, \\ell_C]'], 'expression1': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression2': ['(BD, De, eC, CF, FG, GA, AH, HI, IB)'], 'expression3': ['Mul', ['\\triangle'], ['X'], ['Y'], ['Z']], 'expression4': ['X'], 'expression5': ['BC'], 'expression6': ['Y'], 'expression7': ['AC'], 'expression8': ['Z'], 'expression9': ['AB'], 'expression10': ['Equality', 'Add', 'Mul', ['X'], ['E'], 'Mul', ['E'], ['F'], 'Add', 'Mul', ['D'], ['X'], 'Mul', ['X'], ['E']], 'expression11': ['Equality', 'Mul', ['H'], ['G'], '55'], 'expression12': ['Equality', 'Mul', ['E'], ['F'], '15'], 'expression13': ['Equality', 'Mul', ['I'], ['D'], '45'], 'expression14': ['Mul', ['\\triangle'], ['A'], ['H'], ['G'], ['\\text{sim}'], ['\\triangle'], ['B'], ['I'], ['D'], ['\\text{sim}'], ['\\triangle'], ['E'], ['F'], ['C'], ['\\text{sim}'], ['\\triangle'], ['A'], ['B'], ['C']], 'expression15': ['Equality', 'Equality', 'Mul', ['B'], ['I'], 'Mul', ['H'], ['A'], '30'], 'expression16': ['Equality', 'Equality', 'Mul', ['B'], ['D'], 'Mul', ['H'], ['G'], '55'], 'expression17': ['Equality', 'Mul', ['F'], ['C'], 'Mul', ['45'], ['Pow', '2', '-1']], 'expression18': ['Equality', 'Mul', ['E'], ['C'], 'Mul', ['55'], ['Pow', '2', '-1']], 'expression19': ['Mul', ['\\triangle'], ['E'], ['F'], ['C'], ['\\text{sim}'], ['\\triangle'], ['Y'], ['F'], ['G'], ['\\text{sim}'], ['\\triangle'], ['E'], ['X'], ['D']], 'expression20': ['Mul', ['\\triangle'], ['B'], ['I'], ['D'], ['\\text{sim}'], ['\\triangle'], ['H'], ['I'], ['Z']], 'expression21': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['F'], ['Y'], 'Mul', ['Y'], ['G'], 'Mul', ['Mul', ['G'], ['F']], ['Pow', 'Mul', ['F'], ['C'], '-1'], ['Add', 'Mul', ['E'], ['F'], 'Mul', ['E'], ['C']], 'Mul', ['225'], ['Pow', '45', '-1'], ['Add', '15', 'Mul', ['55'], ['Pow', '2', '-1']], 'Mul', ['425'], ['Pow', '2', '-1']], 'expression22': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['D'], ['X'], 'Mul', ['X'], ['E'], 'Mul', ['Mul', ['D'], ['E']], ['Pow', 'Mul', ['E'], ['C'], '-1'], ['Add', 'Mul', ['E'], ['F'], 'Mul', ['F'], ['C']], 'Mul', ['275'], ['Pow', '55', '-1'], ['Add', '15', 'Mul', ['45'], ['Pow', '2', '-1']], 'Mul', ['375'], ['Pow', '2', '-1']], 'expression23': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['H'], ['Z'], 'Mul', ['Z'], ['I'], 'Mul', ['Mul', ['I'], ['H']], ['Pow', 'Mul', ['B'], ['I'], '-1'], ['Add', 'Mul', ['I'], ['D'], 'Mul', ['B'], ['D']], 'Mul', ['2'], ['Add', '45', '55'], '200'], 'expression24': ['Equality', 'Equality', 'Add', '200', 'Mul', ['Add', '425', '375'], ['Pow', '2', '-1'], 'Add', '600', '115', '715']}","{'expression0': ['Equality', 'Mul', ['Mul', ['A'], ['H']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Mul', ['Mul', ['G'], ['H']], ['Pow', 'Mul', ['B'], ['C'], '-1']], 'expression1': ['Equality', 'Mul', ['Mul', ['I'], ['B']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Mul', ['Mul', ['D'], ['I']], ['Pow', 'Mul', ['A'], ['C'], '-1']], 'expression2': ['Equality', 'Equality', 'Mul', ['H'], ['I'], 'Add', 'Mul', ['A'], ['B'], 'Mul', ['-1'], ['A'], ['H'], '60'], 'expression3': [""I don't understand this\n△IHZsim△ABC\n^""], 'expression4': ['Equality', 'Mul', ['Mul', ['H'], ['I']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Mul', ['1'], ['Pow', '2', '-1']], 'expression5': [""I don't understand this\n△IHZ\n^""], 'expression6': ['Z'], 'expression7': [""I don't understand this\n△ABC\n^""], 'expression8': ['C'], 'expression9': ['Mul', ['h'], ['Pow', '2', '-1']], 'expression10': ['Equality', 'Mul', ['Mul', ['E'], ['F']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Mul', ['1'], ['Pow', '8', '-1']], 'expression11': ['\\ell_C'], 'expression12': ['AB'], 'expression13': ['Mul', ['7'], ['Pow', '8', '-1'], ['h']], 'expression14': [""I don't understand this\n△XYZ\n^""], 'expression15': ['Z'], 'expression16': ['Equality', 'Add', 'Mul', ['1'], ['Pow', '2', '-1'], ['h'], 'Mul', ['7'], ['Pow', '8', '-1'], ['h'], 'Mul', ['11'], ['Pow', '8', '-1'], ['h']], 'expression17': [""I don't understand this\n△XYZ\n^""], 'expression18': ['Mul', ['11'], ['Pow', '8', '-1']], 'expression19': [""I don't understand this\n△ABC\n^""], 'expression20': ['Equality', 'Mul', ['11'], ['Pow', '8', '-1'], ['Add', '220', '180'], '715']}","{'expression0': ['Equality', 'Equality', 'Equality', 'Equality', 'k_1', 'Mul', ['Mul', ['E'], ['F']], ['Pow', 'Mul', ['B'], ['C'], '-1'], 'Mul', ['Mul', ['A'], ['E']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Mul', ['Mul', ['A'], ['F']], ['Pow', 'Mul', ['A'], ['C'], '-1'], 'Mul', ['1'], ['Pow', '4', '-1']], 'expression1': ['Equality', 'Equality', 'Equality', 'k_2', 'Mul', ['Mul', ['F'], ['E']], ['Pow', 'Mul', ['A'], ['C'], '-1'], 'Mul', ['Mul', ['B'], ['F']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Mul', ['1'], ['Pow', '4', '-1']], 'expression2': ['Equality', 'Equality', 'Equality', 'k_3', 'Mul', ['Mul', ['E'], ['transpose(F)']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Mul', ['Mul', ['E'], ['C']], ['Pow', 'Mul', ['A'], ['C'], '-1'], 'Mul', ['1'], ['Pow', '8', '-1']], 'expression3': ['Equality', 'Equality', 'Equality', 'Mul', ['Mul', ['Z'], ['E']], ['Pow', 'Mul', ['B'], ['C'], '-1'], 'Mul', ['Mul', ['F'], ['E']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Mul', ['Add', 'Mul', ['A'], ['B'], 'Mul', ['-1'], ['A'], ['E']], ['Pow', 'Mul', ['A'], ['B'], '-1'], 'Add', '1', 'Mul', ['-1'], ['k_1']], 'expression4': ['Equality', 'Equality', 'Equality', 'Mul', ['Mul', ['F'], ['Y']], ['Pow', 'Mul', ['B'], ['C'], '-1'], 'Mul', ['Mul', ['F'], ['E']], ['Pow', 'Mul', ['A'], ['C'], '-1'], 'Mul', ['Add', 'Mul', ['A'], ['C'], 'Mul', ['-1'], ['A'], ['F']], ['Pow', 'Mul', ['A'], ['C'], '-1'], 'Add', '1', 'Mul', ['-1'], ['k_1']], 'expression5': ['Equality', 'Equality', 'Equality', 'k', 'Mul', ['Mul', ['Z'], ['Y']], ['Pow', 'Mul', ['B'], ['C'], '-1'], 'Mul', ['Add', 'Mul', ['Z'], ['E'], 'Mul', ['E'], ['F']], ['Pow', 'Mul', ['B'], ['C'], '-1'], 'Add', '1', 'Mul', ['-1'], ['k_1']], 'expression6': ['Equality', 'Equality', 'Equality', 'k', 'Add', '2', 'Mul', ['-1'], ['k_1'], 'Add', '2', 'Mul', ['-1'], ['1'], ['Pow', '4', '-1'], 'Mul', ['11'], ['Pow', '8', '-1']], 'expression7': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['Add', 'Mul', ['Z'], ['Y'], 'Mul', ['Y'], ['X']], ['Pow', 'Add', 'Mul', ['B'], ['C'], 'Mul', ['A'], ['B'], '-1'], 'k', 'Add', 'Mul', ['Z'], ['Y'], 'Mul', ['Y'], ['X'], 'Mul', ['11'], ['Pow', '8', '-1'], ['Add', '220', '120'], '715']}","{'expression0': ['65.0000000000000'], 'expression1': ['65']}",{}
"{'expression0': ['Equality', 'f(z)', 'Add', 'Mul', ['a'], ['Pow', 'z', '2018'], 'Mul', ['b'], ['Pow', 'z', '2017']], 'expression1': ['2019'], 'expression2': ['Equality', 'Mul', ['f'], ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], 'Add', '2015', 'Mul', ['2019'], ['Pow', '3', '1/2'], ['i']], 'expression3': ['f(1)'], 'expression4': ['1000']}","{'expression0': ['Equality', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], 'omega'], 'expression1': ['Equality', 'omega', 'exp((pi*i)/3)'], 'expression2': ['{2018}'], 'expression3': ['{2017}'], 'expression4': ['{2016}'], 'expression5': ['Equality', 'f(1)', 'Add', 'a', 'b'], 'expression6': ['Equality', '\\text{Re}(omega**2)', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1']], 'expression7': ['Equality', '\\text{Re}(omega)', 'Mul', ['1'], ['Pow', '2', '-1']], 'expression8': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], ['a'], 'Mul', ['1'], ['Pow', '2', '-1'], ['b'], '2015', 'Add', 'Mul', ['-1'], ['a'], 'b', '4030'], 'expression9': ['Equality', 'Equality', '\\text{Im}(omega**2)', '\\text{Im}(omega)', 'Mul', ['Pow', '3', '1/2'], ['Pow', '2', '-1']], 'expression10': ['Equality', 'Equality', 'Equality', 'Mul', ['Pow', '3', '1/2'], ['Pow', '2', '-1'], ['Add', 'a', 'b'], 'Mul', ['2019'], ['Pow', '3', '1/2'], 'Add', 'a', 'b', '4038'], 'expression11': ['a'], 'expression12': ['b'], 'expression13': ['Equality', 'a', '2019'], 'expression14': ['Equality', 'b', '2019'], 'expression15': ['Equality', 'Equality', 'c', 'Mul', ['4030'], ['Pow', '2', '-1'], '2015'], 'expression16': ['[Eq(Eq(f(1), 2015 + 4038), 6053), Eq(Mod(f(1), 1000), 53)]']}","{'expression0': ['Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1']], 'expression1': ['omega'], 'expression2': [""I don't understand this\n(-b+√(b^2-4ac), -√(b^2-4ac)/2a)\n~~~~^""], 'expression3': ['omega'], 'expression4': ['Equality', 'Add', 'Mul', ['a'], ['Pow', 'x', '2'], 'Mul', ['b'], ['x'], '0'], 'expression5': ['Equality', 'Mul', ['2'], ['a'], '2'], 'expression6': ['Equality', 'Mul', ['-1'], ['b'], '1'], 'expression7': ['Equality', 'Add', 'Pow', 'b', '2', 'Mul', ['-1'], ['4'], ['a'], ['c'], '-3'], 'expression8': ['Equality', 'a', '1'], 'expression9': ['Equality', 'b', '-1'], 'expression10': ['Equality', 'c', '1'], 'expression11': ['omega'], 'expression12': ['Equality', 'Add', 'Pow', 'x', '2', 'Mul', ['-1'], ['x'], '0'], 'expression13': ['Equality', 'Add', 'Pow', 'x', '2', 'Mul', ['-1'], ['x'], '0'], 'expression14': ['Add', '1', 'x'], 'expression15': ['Equality', 'Add', 'Pow', 'x', '3', '1', '0'], 'expression16': ['Add', '-1', 'Pow', 'x', '3'], 'expression17': ['Equality', 'Add', 'Pow', 'x', '6', '-1', '0'], 'expression18': ['Equality', 'Pow', 'x', '6', '1'], 'expression19': ['Equality', 'Pow', 'omega', '6', '1'], 'expression20': ['Equality', 'Equality', 'Add', 'Mul', ['a'], ['Pow', 'omega', '2018'], 'Mul', ['b'], ['Pow', 'omega', '2017'], 'f(omega)', 'Add', '2015', 'Mul', ['2019'], ['Pow', '3', '1/2'], ['i']], 'expression21': ['Equality', 'Add', 'Mul', ['a'], ['Pow', 'omega', '2'], 'Mul', ['b'], ['omega'], 'Add', '2015', 'Mul', ['2019'], ['Pow', '3', '1/2'], ['i']], 'expression22': ['Equality', 'omega', 'Add', 'Mul', ['1'], ['Pow', '2', '-1'], 'Mul', ['Pow', '3', '1/2'], ['Pow', '2', '-1'], ['i']], 'expression23': ['Equality', 'Pow', 'omega', '2', 'Add', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], 'Mul', ['Pow', '3', '1/2'], ['Pow', '2', '-1'], ['i']], 'expression24': ['Equality', 'Add', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], ['a'], 'Mul', ['1'], ['Pow', '2', '-1'], ['b'], '2015'], 'expression25': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['Pow', '3', '1/2'], ['Pow', '2', '-1'], ['a'], 'Mul', ['Pow', '3', '1/2'], ['Pow', '2', '-1'], ['b'], 'Mul', ['2019'], ['Pow', '3', '1/2'], 'Add', 'a', 'b', '4038'], 'expression26': ['a'], 'expression27': ['b'], 'expression28': ['2019'], 'expression29': ['2019'], 'expression30': ['a'], 'expression31': ['b'], 'expression32': ['Equality', 'c', '2015'], 'expression33': ['Equality', 'Equality', 'Equality', 'f(1)', 'Add', 'a', 'b', 'Add', '2019', '2019', '6053'], 'expression34': ['Equality', 'Mod(6053, 1000)', '53']}","{'expression0': ['Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1']], 'expression1': ['Equality', 'Pow', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], '1', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1']], 'expression2': ['Equality', 'Pow', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], '2', 'Mul', ['Add', '-1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1']], 'expression3': ['Equality', 'Pow', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], '3', '-1'], 'expression4': ['Equality', 'Pow', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], '4', 'Mul', ['Add', '-1', 'Mul', ['-1'], ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1']], 'expression5': ['Equality', 'Pow', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], '5', 'Mul', ['Add', '1', 'Mul', ['-1'], ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1']], 'expression6': ['Equality', 'Pow', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], '6', '1'], 'expression7': ['Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1']], 'expression8': ['Equality', 'Mul', ['f'], ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], 'Mul', ['Add', 'Mul', ['a'], ['Pow', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], '2'], 'Mul', ['b'], ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1']], ['Pow', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], '2016']], 'expression9': ['Equality', 'Pow', 'Mul', ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], '2016', '1'], 'expression10': ['Equality', 'Mul', ['f'], ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], 'Add', 'Mul', ['a'], ['Add', '-1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], 'Mul', ['b'], ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1']], 'expression11': ['Equality', 'Equality', 'Mul', ['f'], ['Add', '1', 'Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], 'Add', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], ['a'], 'Mul', ['1'], ['Pow', '2', '-1'], ['b'], 'Add', '2015', 'Mul', ['2019'], ['Pow', '3', '1/2'], ['i']], 'expression12': ['Equality', 'Add', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], ['a'], 'Mul', ['1'], ['Pow', '2', '-1'], ['b'], '2015'], 'expression13': ['Equality', 'Add', 'Mul', ['Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], ['a'], 'Mul', ['Mul', ['Pow', '3', '1/2'], ['i']], ['Pow', '2', '-1'], ['b'], 'Mul', ['2019'], ['Pow', '3', '1/2'], ['i']], 'expression14': ['Equality', 'Add', 'Mul', ['-1'], ['a'], 'b', '4030'], 'expression15': ['Equality', 'Add', 'a', 'b', '4038'], 'expression16': ['2019'], 'expression17': ['Equality', 'Equality', 'a', 'b', '2019'], 'expression18': ['Equality', 'Mul', ['2'], ['c'], '4030'], 'expression19': ['Equality', 'c', '2015'], 'expression20': ['Equality', 'Equality', 'Equality', 'f(1)', 'Add', 'a', 'b', 'Add', '2019', '2019', '6053'], 'expression21': ['1000'], 'expression22': ['53']}",{},{}
"{'expression0': ['n'], 'expression1': ['k'], 'expression2': ['n'], 'expression3': ['k'], 'expression4': ['n'], 'expression5': ['k'], 'expression6': ['18'], 'expression7': ['6'], 'expression8': ['S'], 'expression9': ['2019'], 'expression10': ['20'], 'expression11': ['Mul', ['S'], ['Pow', '20', '-1']]}","{'expression0': ['Equality', 'n', 'Mul', ['Pow', '2', 'a'], ['Pow', '5', 'b'], ['k']], 'expression1': ['a >= 2'], 'expression2': ['b >= 1'], 'expression3': ['Equality', '1', '1'], 'expression4': ['Equality', 'd(n)', '20'], 'expression5': ['d(n)'], 'expression6': ['n'], 'expression7': ['Equality', '20', 'Mul', ['Add', 'a', '1'], ['Add', 'b', '1'], ['d(k)']], 'expression8': ['Mul', ['Add', 'a', '1'], ['Add', 'b', '1']], 'expression9': ['Equality', 'Add', 'a', '1', '4'], 'expression10': ['Equality', 'Add', 'b', '1', '5'], 'expression11': ['None'], 'expression12': ['2**3*5**4 > 2019'], 'expression13': ['Equality', 'Add', 'a', '1', '5'], 'expression14': ['Equality', 'Add', 'b', '1', '2'], 'expression15': ['4'], 'expression16': ['Equality', 'n', 'Mul', ['Pow', '2', '4'], ['Pow', '5', '1'], ['p']], 'expression17': ['p'], 'expression18': ['[Eq(Eq(80*p < 2019, p), 3), 7, 11, 13, 17, 19, 23]'], 'expression19': ['n'], 'expression20': ['Equality', 'Mul', ['80'], ['Add', '3', '7'], '7440'], 'expression21': ['Equality', 'Add', 'b', '1', '4'], 'expression22': ['Equality', 'd(k)', '1'], 'expression23': ['Equality', 'Equality', 'n', 'Mul', ['Pow', '2', '4'], ['Pow', '5', '3'], '2000'], 'expression24': ['Equality', 'Add', 'a', '1', '10'], 'expression25': ['Equality', 'Add', 'b', '1', '2'], 'expression26': ['2**9*5**1 > 2019'], 'expression27': ['Add', '1', 'a'], 'expression28': ['Equality', 'Equality', 'Equality', 'Mul', ['S'], ['Pow', '20', '-1'], 'Mul', ['Add', 'Mul', ['80'], ['Add', '3', '7'], '2000'], ['Pow', '20', '-1'], 'Add', '372', '100', '472']}","{'expression0': ['n'], 'expression1': ['20'], 'expression2': ['n'], 'expression3': ['[p**19, p**9*q, p**4*q**3, p**4*q*r]'], 'expression4': ['(p, q, r)'], 'expression5': ['20'], 'expression6': ['20'], 'expression7': ['Mul', ['Pow', '2', '9'], ['5']], 'expression8': ['2019'], 'expression9': ['20'], 'expression10': ['Equality', 'Pow', 'Pow', '2', '45', '3', '2000'], 'expression11': ['Equality', 'Pow', 'Pow', '2', '35', '4', '5000'], 'expression12': ['2000'], 'expression13': ['Mul', ['Pow', '2', '45'], ['r']], 'expression14': ['r'], 'expression15': ['2'], 'expression16': ['5'], 'expression17': ['20'], 'expression18': ['Eq(n, 80*r) < 2019'], 'expression19': ['r <= 25'], 'expression20': ['r'], 'expression21': ['(3, 7, 11, 13, 17, 19)'], 'expression22': ['23'], 'expression23': ['Equality', 'Equality', 'Equality', 'Mul', ['S'], ['Pow', '20', '-1'], 'Mul', ['Add', '2000', 'Mul', ['80'], ['Sum', 'Add', '3', 'Mul', ['4'], ['k'], 'over', '(k, 0, 5)']], ['Pow', '20', '-1'], 'Add', '100', 'Mul', ['4'], ['Sum', 'Add', '3', 'Mul', ['4'], ['k'], 'over', '(k, 0, 5)'], '472']}","{'expression0': ['20'], 'expression1': ['{1, 2, 4, 5, 10, 20}'], 'expression2': ['v_2(n)'], 'expression3': [""I don't understand this\n≥2\n^""], 'expression4': ['Equality', '20', 'Mul', ['Pow', '2', '2'], ['5']], 'expression5': ['v_2(n)'], 'expression6': ['3'], 'expression7': ['4'], 'expression8': ['Mul', ['l'], ['i'], ['k'], ['E'], ['Pow', '2', '9'], ['5']], 'expression9': ['Equality', 'v_2(n)', '3'], 'expression10': ['Equality', 'Equality', 'Mul', ['20'], ['Pow', '4', '-1'], '5', 'Mul', ['5'], ['1']], 'expression11': ['5000'], 'expression12': ['True'], 'expression13': ['Equality', 'v_2(n)', '4'], 'expression14': ['Equality', 'Equality', 'Equality', 'Mul', ['20'], ['Pow', '5', '-1'], '4', 'Mul', ['4'], ['1'], 'Mul', ['2'], ['2']], 'expression15': ['Mul', ['4'], ['1']], 'expression16': ['Equality', 'Mul', ['Pow', '2', '4'], ['Pow', '5', '3'], '2000'], 'expression17': ['Mul', ['2'], ['2']], 'expression18': ['Mul', ['Pow', '2', '4'], ['5'], ['Add', '3', '7']], 'expression19': ['23'], 'expression20': ['n'], 'expression21': ['2019'], 'expression22': ['I expected something else here\n1/20(2000+80(3+7+..+23)) == 472\n~~~~~~~~~~~~~~~~~^']}",{},{}
"{'expression0': ['theta'], 'expression1': ['Mul', ['0'], ['pi'], ['Pow', '180', '-1']], 'expression2': ['Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression3': ['n'], 'expression4': ['tan(2**n*theta)'], 'expression5': ['n'], 'expression6': ['3'], 'expression7': ['theta'], 'expression8': ['Mul', ['p'], ['Pow', 'q', '-1']], 'expression9': ['p'], 'expression10': ['q'], 'expression11': ['Add', 'p', 'q']}","{'expression0': ['tan(theta)'], 'expression1': ['theta'], 'expression2': ['(0*pi/180 < theta) < Mod(90*pi/180, 180*pi/180)'], 'expression3': ['tan(2**n*theta)'], 'expression4': ['n'], 'expression5': ['3'], 'expression6': ['Equality', 'Sum', 'Mul', ['Pow', '2', 'Mul', ['3'], ['k']], ['theta'], 'over', '(k, 0, oo)', 'Mod(theta, 180*pi/180)'], 'expression7': ['Equality', 'Mul', ['Pow', '2', '3'], ['theta'], 'Mod(2**0*theta, 180*pi/180)'], 'expression8': ['Equality', 'Mul', ['7'], ['theta'], 'Mod(0*pi/180, 180*pi/180)'], 'expression9': ['(0*pi/180 < theta) < 90*pi/180'], 'expression10': ['theta'], 'expression11': ['[180*pi/(7*180), 360*pi/(7*180), 540*pi/(7*180)]'], 'expression12': ['Mul', ['180'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression13': ['tan(2*180*pi/(7*180))'], 'expression14': ['Mul', ['360'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression15': ['tan(4*360*pi/(7*180))'], 'expression16': ['Equality', 'theta', 'Mul', ['540'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression17': ['Equality', 'Add', '540', '7', '547']}","{'expression0': ['tan(theta)'], 'expression1': ['theta'], 'expression2': ['tan(2**n*theta)'], 'expression3': ['n'], 'expression4': ['3'], 'expression5': ['theta'], 'expression6': ['Mul', ['Pow', '2', '3'], ['theta']], 'expression7': ['Mul', ['Pow', '2', '6'], ['theta']], 'expression8': [""I don't understand this\nθ∈(0,90)\n^""], 'expression9': ['Mul', ['Pow', '2', 'n'], ['theta']], 'expression10': ['n'], 'expression11': ['Equality', 'Equality', 'n', '1', '90180'], 'expression12': ['Equality', 'Equality', 'n', '2', '270360'], 'expression13': ['Equality', 'Equality', 'n', '3', '180270'], 'expression14': ['Equality', 'Equality', 'n', '4', '90180'], 'expression15': ['Equality', 'Equality', 'n', '5', '270360'], 'expression16': ['Equality', 'Equality', 'n', '6', '180270'], 'expression17': [""I don't understand this\n⋯\n^""], 'expression18': ['3'], 'expression19': ['Equality', 'n', '1'], 'expression20': ['theta'], 'expression21': ['0'], 'expression22': ['0'], 'expression23': ['Equality', 'Mul', ['90'], ['Pow', '2', '-1'], '45'], 'expression24': ['Equality', 'n', '1'], 'expression25': ['Add', '45', 'Mul', ['45'], ['Pow', '2', '-1']], 'expression26': ['Equality', 'n', '2'], 'expression27': ['Add', '45', 'Mul', ['45'], ['Pow', '2', '-1']], 'expression28': ['Equality', 'n', '3'], 'expression29': ['Add', '45', 'Mul', ['45'], ['Pow', '2', '-1']], 'expression30': ['Equality', 'n', '4'], 'expression31': ['Add', '45', 'Mul', ['45'], ['Pow', '2', '-1']], 'expression32': ['Equality', 'n', '5'], 'expression33': ['n'], 'expression34': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Sum', 'Mul', ['Add', '45', 'Mul', ['45'], ['Pow', '2', '-1']], ['Pow', 'Mul', ['1'], ['Pow', '8', '-1'], 'k'], 'over', '(k, 0, oo)', 'Mul', ['Add', '45', 'Mul', ['45'], ['Pow', '2', '-1']], ['Pow', 'Add', '1', 'Mul', ['-1'], ['1'], ['Pow', '8', '-1'], '-1'], 'Mul', ['Mul', ['135'], ['Pow', '2', '-1']], ['Pow', 'Mul', ['7'], ['Pow', '8', '-1'], '-1'], 'Mul', ['540'], ['Pow', '7', '-1'], 'Add', 'p', 'q', 'Add', '540', '7', '547']}","{'expression0': ['tan(theta) > 0'], 'expression1': ['(0 < theta) < 90'], 'expression2': ['tan(2*theta) < 0'], 'expression3': ['theta'], 'expression4': ['(0, 90)'], 'expression5': ['(45, 90)'], 'expression6': ['tan(4*theta) < 0'], 'expression7': ['theta'], 'expression8': ['(67.5000000000000, 90)'], 'expression9': ['tan(8*theta) > 0'], 'expression10': ['theta'], 'expression11': ['(67.5000000000000, 90)'], 'expression12': ['theta'], 'expression13': ['(0, 90)'], 'expression14': ['(0, 1)'], 'expression15': ['Equality', 'Add', 'Sum', 'Pow', 'Mul', ['1'], ['Pow', '2', '-1'], 'Add', 'Mul', ['2'], ['k'], '1', 'over', '(k, 0, oo)', 'Sum', 'Pow', 'Mul', ['1'], ['Pow', '2', '-1'], 'Add', 'Mul', ['2'], ['k'], '2', 'over', '(k, 0, oo)', 'Mul', ['6'], ['Pow', '7', '-1']], 'expression16': ['(0, 90)'], 'expression17': ['Equality', 'Equality', 'theta', 'Mul', ['6'], ['Pow', '7', '-1'], ['90'], 'Mul', ['540'], ['Pow', '7', '-1']], 'expression18': ['Equality', 'Equality', 'Add', 'p', 'q', 'Add', '540', '7', '547']}","{'expression0': ['3'], 'expression1': ['Equality', 'Mul', ['540'], ['Pow', '8', '-1'], '135/2'], 'expression2': ['Equality', 'Mul', ['630'], ['Pow', '8', '-1'], '315/4'], 'expression3': ['3'], 'expression4': ['Equality', 'Mul', ['Mul', ['360'], ['25/2']], ['Pow', '64', '-1'], '1125/16'], 'expression5': ['Equality', 'Mul', ['Mul', ['360'], ['55/4']], ['Pow', '64', '-1'], '2475/32'], 'expression6': ['3'], 'expression7': ['0'], 'expression8': ['90'], 'expression9': ['Equality', 'Add', '90', '-315/4', '45/4'], 'expression10': ['Equality', 'Add', '315/4', '-2475/32', '45/32'], 'expression11': ['Equality', 'Mul', ['45/4'], ['Pow', '45/32', '-1'], '8'], 'expression12': ['11.2500000000000'], 'expression13': ['u'], 'expression14': ['Add', '90', 'Mul', ['-1'], ['Mul', ['8'], ['u']], ['Pow', '7', '-1']], 'expression15': ['Add', '90', 'Mul', ['-1'], ['u'], ['Pow', 'Add', '1', 'Mul', ['-1'], ['1'], ['Pow', '8', '-1'], '-1']], 'expression16': ['Mul', ['u'], ['Pow', 'Mul', ['7'], ['Pow', '8', '-1'], '-1']], 'expression17': ['Mul', ['45'], ['Pow', '4', '-1'], ['8'], ['Pow', '7', '-1']], 'expression18': ['Mul', ['90'], ['Pow', '7', '-1']], 'expression19': ['Mul', ['90'], ['Pow', '7', '-1']], 'expression20': ['Mul', ['630'], ['Pow', '7', '-1']], 'expression21': ['Mul', ['540'], ['Pow', '7', '-1']], 'expression22': ['{547}']}","{'expression0': ['7'], 'expression1': ['Pow', '2', 'floor(x)'], 'expression2': ['\\text{(mod7)}'], 'expression3': ['theta'], 'expression4': ['Mul', ['180'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression5': ['Mul', ['180'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression6': ['Mul', ['360'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression7': ['Mul', ['540'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression8': ['Mul', ['720'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression9': ['Mul', ['900'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression10': ['Mul', ['1080'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression11': ['theta'], 'expression12': ['Mul', ['540'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression13': ['547'], 'expression14': ['{547}']}"
"{'expression0': ['ABC'], 'expression1': ['(False, False)'], 'expression2': ['Equality', 'Mul', ['C'], ['A'], '9'], 'expression3': ['omega_1'], 'expression4': ['B'], 'expression5': ['AC'], 'expression6': ['A'], 'expression7': ['omega_2'], 'expression8': ['C'], 'expression9': ['AB'], 'expression10': ['A'], 'expression11': ['K'], 'expression12': ['omega_1'], 'expression13': ['omega_2'], 'expression14': ['A'], 'expression15': ['False'], 'expression16': ['m'], 'expression17': ['n'], 'expression18': ['Add', 'm', 'n']}","{'expression0': ['Mul', ['\\angle'], ['C'], ['A'], ['B']], 'expression1': ['AB'], 'expression2': ['AC'], 'expression3': ['Mul', ['\\angle'], ['A'], ['K'], ['B']], 'expression4': ['Mul', ['\\angle'], ['A'], ['K'], ['C']], 'expression5': ['Equality', 'Equality', 'Mul', ['\\angle'], ['A'], ['K'], ['C'], 'Mul', ['\\angle'], ['A'], ['K'], ['B'], 'Add', 'Mul', ['180'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['\\angle'], ['B'], ['A'], ['C']], 'expression6': ['Equality', 'Mul', ['\\angle'], ['A'], ['B'], ['K'], 'Mul', ['\\angle'], ['K'], ['A'], ['C']], 'expression7': [""I don't understand this\n^(*)\n^""], 'expression8': ['Mul', ['\\triangle'], ['A'], ['K'], ['B'], ['\\text{sim}'], ['\\triangle'], ['C'], ['K'], ['A']], 'expression9': ['Equality', 'Mul', ['A'], ['Pow', 'K', '2'], 'Mul', ['B'], ['K'], ['K'], ['C']], 'expression10': ['Equality', 'Mul', ['A'], ['B'], '7'], 'expression11': ['Equality', 'Mul', ['C'], ['A'], '9'], 'expression12': ['[Eq(B*K, 7*A*K/9), Eq(C*K, 9*A*K/7)]'], 'expression13': ['Mul', ['\\triangle'], ['A'], ['K'], ['B']], 'expression14': ['Equality', 'Equality', 'Equality', 'Equality', 'cos(A*B*C*\\angle)', 'Mul', ['11'], ['Pow', '21', '-1'], 'cos(-A*B*C*\\angle + 180*pi/180)', 'Mul', ['\\angle'], ['A'], ['K'], ['B'], 'Mul', ['-1'], ['11'], ['Pow', '21', '-1']], 'expression15': ['Equality', 'Add', 'Mul', ['A'], ['Pow', 'K', '2'], 'Mul', ['49'], ['Pow', '81', '-1'], ['A'], ['Pow', 'K', '2'], '49'], 'expression16': ['Equality', 'Mul', ['196'], ['Pow', '81', '-1'], ['A'], ['Pow', 'K', '2'], '49'], 'expression17': ['Equality', 'Mul', ['A'], ['K'], 'Mul', ['9'], ['Pow', '2', '-1']], 'expression18': ['Equality', 'Add', '9', '2', '11'], 'expression19': [""I don't understand this\n^(*)\n^""], 'expression20': [""<class 'sympy.series.order.Order'>""], 'expression21': ['omega_1'], 'expression22': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['\\angle'], ['K'], ['A'], ['C'], 'Add', '90', 'Mul', ['-1'], ['\\angle'], ['O'], ['A'], ['K'], 'Add', '90', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], ['Add', '180', 'Mul', ['-1'], ['\\angle'], ['A'], ['O'], ['K']], 'Mul', ['Mul', ['\\angle'], ['A'], ['O'], ['K']], ['Pow', '2', '-1'], 'Mul', ['\\angle'], ['A'], ['B'], ['K']], 'expression23': ['Equality', 'Mul', ['\\angle'], ['A'], ['B'], ['K'], 'Mul', ['\\angle'], ['K'], ['A'], ['C']], 'expression24': [""I don't understand this\n^(*)\n^""], 'expression25': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression26': ['Mul', ['\\angle'], ['B'], ['A'], ['C']], 'expression27': ['Mul', ['\\angle'], ['A'], ['K'], ['B']], 'expression28': ['Equality', 'Mul', ['\\angle'], ['A'], ['B'], ['K'], 'Mul', ['\\angle'], ['K'], ['A'], ['C']], 'expression29': ['Equality', 'Mul', ['\\angle'], ['K'], ['C'], ['A'], 'Mul', ['\\angle'], ['K'], ['A'], ['B']], 'expression30': ['Equality', 'Equality', 'Mul', ['\\angle'], ['A'], ['K'], ['C'], 'Mul', ['\\angle'], ['A'], ['K'], ['B'], 'Add', 'Mul', ['180'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['Add', 'Mul', ['\\angle'], ['A'], ['B'], ['K'], 'Mul', ['\\angle'], ['K'], ['A'], ['B']]], 'expression31': ['Equality', 'Equality', 'Add', 'Mul', ['\\angle'], ['A'], ['B'], ['K'], 'Mul', ['\\angle'], ['K'], ['A'], ['B'], 'Add', 'Mul', ['\\angle'], ['K'], ['A'], ['C'], 'Mul', ['\\angle'], ['K'], ['A'], ['B'], 'Mul', ['\\angle'], ['B'], ['A'], ['C']], 'expression32': ['Equality', 'Mul', ['\\angle'], ['A'], ['K'], ['B'], 'Add', 'Mul', ['180'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['\\angle'], ['B'], ['A'], ['C']], 'expression33': ['ABKC'], 'expression34': ['Mul', ['360'], ['pi'], ['Pow', '180', '-1']], 'expression35': ['Equality', 'Mul', ['\\angle'], ['A'], ['K'], ['B'], 'Mul', ['1'], ['Pow', '2', '-1']], 'expression36': ['Mul', ['\\angle'], ['B'], ['K'], ['C']], 'expression37': ['Equality', 'Mul', ['1'], ['Pow', '2', '-1'], ['Add', 'Mul', ['360'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['2'], ['Add', 'Mul', ['\\angle'], ['K'], ['A'], ['B'], 'Mul', ['\\angle'], ['K'], ['B'], ['A']]], 'Add', 'Mul', ['180'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['\\angle'], ['B'], ['A'], ['C']]}","{'expression0': ['A'], 'expression1': ['Equality', 'r', 'Mul', ['A'], ['K']], 'expression2': ['I expected something else here\nAB*AB^*==AK^2\n~~~~~~^'], 'expression3': ['I expected something else here\nAB^*==AK^2/7\n~~~^'], 'expression4': ['I expected something else here\nAC^*==AK^2/9\n~~~^'], 'expression5': ['I expected something else here\nAB^*KC^*\n~~~^'], 'expression6': ['omega_1'], 'expression7': ['omega_2'], 'expression8': ['AC'], 'expression9': ['AB'], 'expression10': ['I expected something else here\nAC^*==B^*K\n~~~^'], 'expression11': ['I expected something else here\ncos(\\angleAB^*K)==cos(180-\\angleBAC)==-11/21\n~~~~~~~~~~~~~^'], 'expression12': ['I expected something else here\nAB^*K\n~~~^'], 'expression13': ['I expected something else here\n(AK)^2==(AB^*)2+(B^*K)^2-2*AB^**B^*K *cos(\\angleAB^*K)\n~~~~~~~~~~~~^'], 'expression14': [""I don't understand this\n⇒(AK)^2==AK^4/49+AK^4/81-2*AK^2/7AK^2/9-11/21\n^""], 'expression15': [""I don't understand this\n⇒1==AK^2/49+AK^2/81+22AK^2/63*21\n^""], 'expression16': [""I don't understand this\n⇒AK==9/2\n^""], 'expression17': ['Equality', 'Add', '9', '2', '11']}","{'expression0': ['K'], 'expression1': ['Mul', ['B'], ['A']], 'expression2': ['A'], 'expression3': ['M'], 'expression4': ['BC'], 'expression5': ['transpose(M)'], 'expression6': ['A'], 'expression7': ['K'], 'expression8': ['Mul', ['\\triangle'], ['A'], ['B'], ['transpose(M)'], ['\\text{sim}'], ['\\triangle'], ['A'], ['M'], ['C']], 'expression9': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['A'], ['K'], 'Mul', ['Mul', ['A'], ['transpose(M)']], ['Pow', '2', '-1'], 'Mul', ['Mul', ['A'], ['C'], ['A'], ['B']], ['Pow', 'Mul', ['2'], ['A'], ['M'], '-1'], 'Mul', ['Mul', ['7'], ['9']], ['Pow', 'Mul', ['2'], ['Pow', 'Mul', ['Add', 'Mul', ['Pow', '9', '2'], ['4'], 'Mul', ['Pow', '7', '2'], ['4']], ['Pow', '8', '-1'], '1/2'], '-1'], 'Mul', ['Mul', ['7'], ['9']], ['Pow', 'Mul', ['2'], ['Pow', '49', '1/2'], '-1'], 'Mul', ['9'], ['Pow', '2', '-1'], 'Add', 'm', 'n', '11']}","{'expression0': ['O_1'], 'expression1': ['O_2'], 'expression2': ['O_1'], 'expression3': ['7'], 'expression4': ['Equality', 'Mul', ['\\angle'], ['B'], ['A'], ['C'], 'x'], 'expression5': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['\\angle'], ['O_1'], ['A'], ['B'], 'Mul', ['\\angle'], ['O_1'], ['B'], ['A'], 'Mul', ['\\angle'], ['O_2'], ['A'], ['C'], 'Mul', ['\\angle'], ['O_2'], ['C'], ['A'], 'Add', 'Mul', ['90'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['x']], 'expression6': ['Equality', 'Equality', 'Mul', ['\\angle'], ['A'], ['O_1'], ['B'], 'Mul', ['\\angle'], ['A'], ['O_2'], ['C'], 'Mul', ['2'], ['x']], 'expression7': ['cos(x)'], 'expression8': [""I don't understand this\n△ABC\n^""], 'expression9': ['Equality', '64', 'Add', '81', '48'], 'expression10': ['Equality', 'cos(x)', 'Mul', ['11'], ['Pow', '21', '-1']], 'expression11': ['Equality', 'sin(x)', 'Mul', ['Mul', ['8'], ['Pow', '5', '1/2']], ['Pow', '21', '-1']], 'expression12': [""I don't understand this\n△AO_1B\n^""], 'expression13': ['Equality', 'Mul', ['7'], ['Pow', 'sin(2*x)', '-1'], 'Mul', ['Mul', ['O_1'], ['B']], ['Pow', 'sin(-x + 90*pi/180)', '-1']], 'expression14': ['Equality', 'Mul', ['7'], ['Pow', 'Mul', ['2'], ['sin(x)'], ['cos(x)'], '-1'], 'Mul', ['Mul', ['O_1'], ['B']], ['Pow', 'cos(x)', '-1']], 'expression15': ['Equality', 'Equality', 'Mul', ['O_1'], ['B'], 'Mul', ['O_1'], ['A'], 'Mul', ['147'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1']], 'expression16': ['Equality', 'Mul', ['O_2'], ['A'], 'Mul', ['189'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1']], 'expression17': ['Equality', 'Mul', ['\\angle'], ['O_1'], ['A'], ['O_2'], 'Add', 'Mul', ['180'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['x']], 'expression18': [""I don't understand this\n△O_1AO_2\n^""], 'expression19': [""I don't understand this\nO_1O_2 ==√((147/16√(5))^2+(189/16√(5))^2-2 *(147/16√(5))*189/16√(5)*-11/21)\n~~~~~~~~~^""], 'expression20': ['Equality', 'Pow', 'Add', 'Pow', 'Mul', ['Add', '189', '147'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1'], '2', 'Mul', ['-1'], ['2'], ['147'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1'], ['189'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1'], ['10'], ['Pow', '21', '-1'], '1/2', 'Pow', 'Add', 'Pow', 'Mul', ['168'], ['Pow', 'Mul', ['8'], ['Pow', '5', '1/2'], '-1'], '2', 'Mul', ['-1'], ['Mul', ['7'], ['189'], ['5']], ['Pow', 'Mul', ['8'], ['Pow', '5', '1/2'], ['8'], ['Pow', '5', '1/2'], '-1'], '1/2'], 'expression21': ['Equality', 'Pow', 'Mul', ['Mul', ['Pow', '21', '2'], ['Add', 'Pow', '8', '2', '-15']], ['Pow', 'Pow', 'Mul', ['8'], ['Pow', '5', '1/2'], '2', '-1'], '1/2', 'Mul', ['147'], ['Pow', 'Mul', ['8'], ['Pow', '5', '1/2'], '-1']], 'expression22': ['Equality', 'Equality', 'Mul', ['O_1'], ['A'], ['O_2'], 'Mul', ['1'], ['Pow', '2', '-1'], ['147'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1'], ['189'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1'], ['sin(-x + 180*pi/180)'], 'Mul', ['1'], ['Pow', '2', '-1'], ['147'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1'], ['189'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1'], ['Mul', ['8'], ['Pow', '5', '1/2']], ['Pow', '21', '-1']], 'expression23': ['AK'], 'expression24': [""I don't understand this\n△O_1AO_2\n^""], 'expression25': ['h'], 'expression26': ['Equality', 'Mul', ['1'], ['Pow', '2', '-1'], ['h'], ['147'], ['Pow', 'Mul', ['8'], ['Pow', '5', '1/2'], '-1'], 'Mul', ['1'], ['Pow', '2', '-1'], ['147'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1'], ['189'], ['Pow', 'Mul', ['16'], ['Pow', '5', '1/2'], '-1'], ['Mul', ['8'], ['Pow', '5', '1/2']], ['Pow', '21', '-1']], 'expression27': ['Equality', 'h', 'Mul', ['9'], ['Pow', '4', '-1']], 'expression28': ['Equality', 'Equality', 'Mul', ['9'], ['Pow', '2', '-1'], 'Add', 'm', 'n', '11']}","{'expression0': ['A'], 'expression1': ['(0, 0)'], 'expression2': ['B'], 'expression3': ['(7, 0)'], 'expression4': ['C'], 'expression5': ['x'], 'expression6': ['AB'], 'expression7': ['C'], 'expression8': [""I don't understand this\n(33/7, 24√(5)/7)\n~~~~~~~~~^""], 'expression9': ['O1'], 'expression10': ['omega_1'], 'expression11': ['O2'], 'expression12': ['omega_2'], 'expression13': ['omega_1'], 'expression14': ['A'], 'expression15': ['B'], 'expression16': ['O1'], 'expression17': ['AB'], 'expression18': ['O2'], 'expression19': ['AC'], 'expression20': ['AB'], 'expression21': ['Equality', 'x', '7/2'], 'expression22': ['AC'], 'expression23': ['Equality', 'y', 'Add', 'Mul', ['Mul', ['-1'], ['11'], ['Pow', '5', '1/2']], ['Pow', '40', '-1'], ['x'], 'Mul', ['Mul', ['189'], ['Pow', '5', '1/2']], ['Pow', '80', '-1']], 'expression24': ['omega_1'], 'expression25': ['AC'], 'expression26': ['A'], 'expression27': ['AC'], 'expression28': ['A'], 'expression29': ['Equality', 'y', 'Mul', ['Mul', ['-11'], ['Pow', '5', '1/2']], ['Pow', '40', '-1'], ['x']], 'expression30': ['x'], 'expression31': ['O1'], 'expression32': ['Equality', 'Equality', 'Mul', ['O'], ['1'], 'Mul', ['Mul', ['Mul', ['-11'], ['Pow', '5', '1/2']], ['Pow', '40', '-1'], ['7']], ['Pow', '2', '-1'], 'Mul', ['Mul', ['-77'], ['Pow', '5', '1/2']], ['Pow', '80', '-1']], 'expression33': ['omega_2'], 'expression34': ['AB'], 'expression35': ['A'], 'expression36': ['AB'], 'expression37': ['A'], 'expression38': ['Equality', 'x', '0'], 'expression39': ['O2'], 'expression40': ['O2'], 'expression41': [""I don't understand this\n(0, 189√(5)/80)\n~~~~~~~^""], 'expression42': ['O1O2'], 'expression43': ['omega_1'], 'expression44': ['omega_2'], 'expression45': ['Equality', 'Mul', ['Mul', ['Mul', ['266'], ['Pow', '5', '1/2']], ['Pow', '80', '-1'], ['-2']], ['Pow', '7', '-1'], 'Mul', ['Mul', ['-19'], ['Pow', '5', '1/2']], ['Pow', '20', '-1']], 'expression46': ['y'], 'expression47': ['Mul', ['O'], ['2'], ['Mul', ['189'], ['Pow', '5', '1/2']], ['Pow', '80', '-1']], 'expression48': ['Equality', 'y', 'Add', 'Mul', ['Mul', ['-19'], ['Pow', '5', '1/2']], ['Pow', '20', '-1'], ['x'], 'Mul', ['Mul', ['189'], ['Pow', '5', '1/2']], ['Pow', '80', '-1']], 'expression49': ['omega_1'], 'expression50': ['omega_2'], 'expression51': ['A'], 'expression52': ['K'], 'expression53': ['AK'], 'expression54': ['AK'], 'expression55': ['Mul', ['Mul', ['4'], ['Pow', '5', '1/2']], ['Pow', '19', '-1']], 'expression56': ['A'], 'expression57': ['(0, 0)'], 'expression58': ['y'], 'expression59': ['0'], 'expression60': ['y'], 'expression61': ['Mul', ['Mul', ['4'], ['Pow', '5', '1/2']], ['Pow', '19', '-1'], ['x']], 'expression62': ['Equality', 'Mul', ['Mul', ['4'], ['Pow', '5', '1/2']], ['Pow', '19', '-1'], ['x'], 'Add', 'Mul', ['Mul', ['-19'], ['Pow', '5', '1/2']], ['Pow', '20', '-1'], ['x'], 'Mul', ['Mul', ['189'], ['Pow', '5', '1/2']], ['Pow', '80', '-1']], 'expression63': ['I'], 'expression64': ['AK'], 'expression65': ['O1O2'], 'expression66': ['I(57/28, (3*sqrt(5))/7)'], 'expression67': ['A'], 'expression68': ['I'], 'expression69': ['K'], 'expression70': ['AK'], 'expression71': ['Mul', ['2'], ['A'], ['I']], 'expression72': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['2'], ['Pow', 'Add', 'Pow', 'Mul', ['57'], ['Pow', '28', '-1'], '2', 'Pow', 'Mul', ['Mul', ['3'], ['Pow', '5', '1/2']], ['Pow', '7', '-1'], '2', '1/2'], 'Mul', ['2'], ['Pow', 'Mul', ['3969'], ['Pow', '784', '-1'], '1/2'], 'Mul', ['Mul', ['2'], ['63']], ['Pow', '28', '-1'], 'Mul', ['Mul', ['2'], ['9']], ['Pow', '4', '-1'], 'Mul', ['9'], ['Pow', '2', '-1']], 'expression73': ['Equality', 'Add', '9', '2', '11']}"
"{'expression0': ['n >= 1'], 'expression1': ['Sum', 'a_i', 'over', '(i, 1, n)'], 'expression2': ['a_i < a_{i+1}'], 'expression3': ['a_i'], 'expression4': ['a_{i+1}'], 'expression5': ['(1 <= i) <= n - 1'], 'expression6': ['360']}","{'expression0': ['x'], 'expression1': ['x'], 'expression2': ['Add', 'Mul', ['360'], ['Pow', 'x', '-1'], '-1'], 'expression3': ['a(k)'], 'expression4': ['k'], 'expression5': ['<function N at 0x0000027A4DE17880>'], 'expression6': ['Equality', 'N', 'Add', '15', 'a(119)'], 'expression7': ['39'], 'expression8': ['Equality', 'N', 'Add', '15', 'a(119)'], 'expression9': ['8'], 'expression10': ['7'], 'expression11': ['5'], 'expression12': ['4'], 'expression13': ['3'], 'expression14': ['2'], 'expression15': ['1'], 'expression16': ['Equality', 'N', 'Add', '15', 'a(119)'], 'expression17': ['Equality', 'a(p)', '1'], 'expression18': ['p'], 'expression19': ['p'], 'expression20': ['Equality', 'a(1)', '0'], 'expression21': ['Equality', 'N', 'Add', '15', 'a(119)'], 'expression22': ['k'], 'expression23': ['a(k)'], 'expression24': ['Equality', 'a(4)', '1'], 'expression25': ['Equality', 'a(8)', '2'], 'expression26': ['Equality', 'a(9)', '2'], 'expression27': ['k'], 'expression28': ['0'], 'expression29': ['a(k)'], 'expression30': ['I expected something else here\na(*)\n~~^'], 'expression31': ['14'], 'expression32': ['6'], 'expression33': ['35'], 'expression34': ['6'], 'expression35': ['4'], 'expression36': ['39'], 'expression37': ['12'], 'expression38': ['44'], 'expression39': ['21'], 'expression40': ['10'], 'expression41': ['119'], 'expression42': ['16'], 'expression43': ['6'], 'expression44': ['Equality', 'Equality', 'N', 'Add', '15', '6', '47']}",{},{},{},{}
"{'expression0': ['A_1A_2A_3A_4A_5A_6A_7A_8'], 'expression1': ['1'], 'expression2': ['P'], 'expression3': ['[\\overline{PA_1}, \\overline{PA_2}]'], 'expression4': ['A_1A_2'], 'expression5': ['Mul', ['1'], ['Pow', '7', '-1']], 'expression6': ['[\\overline{PA_3}, \\overline{PA_4}]'], 'expression7': ['A_3A_4'], 'expression8': ['Mul', ['1'], ['Pow', '9', '-1']], 'expression9': ['n'], 'expression10': ['[\\overline{PA_6}, \\overline{PA_7}]'], 'expression11': ['A_6A_7'], 'expression12': ['Add', 'Mul', ['1'], ['Pow', '8', '-1'], 'Mul', ['-1'], ['Pow', '2', '1/2'], ['Pow', 'n', '-1']], 'expression13': ['n']}","{'expression0': ['P'], 'expression1': ['A_1A_2'], 'expression2': ['0'], 'expression3': ['\\overline{A_iA_j}'], 'expression4': ['A_iA_j'], 'expression5': ['Mul', ['7'], ['c'], ['m']], 'expression6': ['Circle(Point2D(0, 0), 1)'], 'expression7': ['(0.100000000000000, -0.150000000000000)'], 'expression8': [""I don't understand this\n(P–dir(112.5)–dir(112.5-45)–cycle,yellow,red)\n~~^""], 'expression9': [""I don't understand this\n(P–dir(112.5-90)–dir(112.5-135)–cycle,yellow,red)\n~~^""], 'expression10': [""I don't understand this\n(P–dir(112.5-225)–dir(112.5-270)–cycle,green,red)\n~~^""], 'expression11': ['I expected something else here\n(int i==0; i<8; ++i)\n~~~~~~^'], 'expression12': [""I don't understand this\n   draw(dir(22.5+45i)–dir(67.5+45i));   draw((0,0)–dir(22.5+45i),gray+dashed); \n~~~~~~~~~~~~~~~~~~~~~^""], 'expression13': [""I don't understand this\n(dir(135)–dir(-45),blue+linewidth(1))\n~~~~~~~~~^""], 'expression14': [""('$P$', P, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression15': [""('$A_1$', ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'], ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression16': [""('$A_2$', ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'], ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression17': [""('$A_3$', ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'], ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression18': [""('$A_4$', ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'], ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression19': [""('$A_5$', ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'], ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression20': [""('$A_6$', ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'], ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression21': [""('$A_7$', ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'], ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression22': [""('$A_8$', ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'], ['_Frel', '__abs__', '__add__', '__annotations__', '__bool__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getnewargs_ex__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__int__', '__le__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__pos__', '__pow__', '__radd__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rmod__', '__rmul__', '__round__', '__rpow__', '__rsub__', '__rtruediv__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_finite', '_eval_is_infinite', '_eval_is_integer', '_eval_is_meromorphic', '_eval_is_negative', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpf_', '_mul_handler', '_new', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'diff', 'dir', 'doit', 'dummy_eq', 'epsilon_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'num', 'powsimp', 'primitive', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression23': ['I expected something else here\n(dir(112.5)^^dir(112.5-45)^^dir(112.5-90)^^dir(112.5-135)^^dir(112.5-180)^^dir(112.5-225)^^dir(112.5-270)^^dir(112.5-315))\n~~~~~~~~~~~~^'], 'expression24': ['P'], 'expression25': ['A_1A_2'], 'expression26': ['Mul', ['\\triangle'], ['P'], ['A_1'], ['A_2']], 'expression27': ['1'], 'expression28': ['P'], 'expression29': ['Equality', 'Add', 'Mul', ['1'], ['Pow', '7', '-1'], 'Mul', ['-1'], ['1'], ['Pow', '8', '-1'], 'Mul', ['1'], ['Pow', '56', '-1']], 'expression30': ['P'], 'expression31': ['A_1'], 'expression32': ['A_2'], 'expression33': ['Mul', ['1'], ['Pow', '7', '-1']], 'expression34': ['P'], 'expression35': ['Equality', 'Add', 'Mul', ['1'], ['Pow', '8', '-1'], 'Mul', ['-1'], ['1'], ['Pow', '9', '-1'], 'Mul', ['1'], ['Pow', '72', '-1']], 'expression36': ['P'], 'expression37': ['A_3'], 'expression38': ['A_4'], 'expression39': ['Mul', ['1'], ['Pow', '9', '-1']], 'expression40': ['P'], 'expression41': ['(1/72, -1/56)'], 'expression42': ['P'], 'expression43': ['P'], 'expression44': ['A_6'], 'expression45': ['A_7'], 'expression46': ['P'], 'expression47': ['0'], 'expression48': ['P'], 'expression49': ['Equality', 'Mul', ['Pow', '2', '1/2'], ['Pow', '2', '-1'], ['Add', 'Mul', ['1'], ['Pow', '56', '-1'], 'Mul', ['-1'], ['1'], ['Pow', '72', '-1']], 'Mul', ['Pow', '2', '1/2'], ['Pow', '504', '-1']], 'expression50': ['Add', 'Mul', ['1'], ['Pow', '8', '-1'], 'Mul', ['-1'], ['Pow', '2', '1/2'], ['Pow', '504', '-1']]}",{},{},{},{}
"{'expression0': ['n'], 'expression1': ['(5, n)'], 'expression2': ['Add', '1', 'n'], 'expression3': ['91']}","{'expression0': ['n'], 'expression1': ['91'], 'expression2': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['5'], ['n'], 'Mul', ['-1'], ['Add', '5', 'n'], '91', 'n', '24'], 'expression3': ['n'], 'expression4': ['24'], 'expression5': ['n'], 'expression6': ['91'], 'expression7': ['92'], 'expression8': ['96'], 'expression9': ['96'], 'expression10': ['5'], 'expression11': ['96'], 'expression12': ['91'], 'expression13': ['5'], 'expression14': ['96'], 'expression15': ['91'], 'expression16': ['96'], 'expression17': ['n'], 'expression18': ['Add', '1', 'n'], 'expression19': ['n >= 24'], 'expression20': ['(n, n + 1)'], 'expression21': ['96'], 'expression22': ['Equality', 'Mul', ['96'], ['Pow', '24', '-1'], '4'], 'expression23': ['((24, 25), (31, 32), (32, 33), (47, 48), (48, 49), (95, 96))'], 'expression24': ['(96, 97)'], 'expression25': ['92'], 'expression26': ['95'], 'expression27': ['(24, 25)'], 'expression28': ['(47, 48)'], 'expression29': [""I don't understand this\nn ∈{24, 47}\n~~^""], 'expression30': ['Equality', 'Add', '24', '47', '71']}","{'expression0': ['5'], 'expression1': ['0'], 'expression2': ['[Ne(n, 0), Mod(1, 5)]'], 'expression3': ['91'], 'expression4': ['0'], 'expression5': ['5'], 'expression6': ['n'], 'expression7': ['Add', '1', 'n'], 'expression8': ['Equality', 'n', 'Mod(4, 5)'], 'expression9': ['n'], 'expression10': ['Equality', 'n', 'Mod(4, 5)'], 'expression11': ['5'], 'expression12': ['Mul', ['4'], ['n']], 'expression13': ['0'], 'expression14': ['4'], 'expression15': ['91'], 'expression16': ['Equality', 'n', 'Mod(4, 5)'], 'expression17': ['Equality', 'n', '24'], 'expression18': ['n'], 'expression19': ['91'], 'expression20': ['[Eq(n, 2), Mod(3, 5)]'], 'expression21': ['Equality', 'Mul', ['2'], ['Add', 'n', '1'], 'Add', 'Mul', ['2'], ['n'], '2'], 'expression22': ['5'], 'expression23': ['n'], 'expression24': ['Add', '1', 'n'], 'expression25': ['2'], 'expression26': ['5'], 'expression27': ['n'], 'expression28': ['Equality', 'n', '47'], 'expression29': ['Equality', 'n', '48'], 'expression30': ['Equality', 'n', '47'], 'expression31': ['Equality', 'n', '48'], 'expression32': ['0'], 'expression33': ['n'], 'expression34': ['91'], 'expression35': ['I expected something else here\n(Also note that in the 3 5 case, the residue 2 5 has will not be produced until 3(n+1) while the 15 case has already been produced, so the highest possible value that cannot be produced would not be a number equivalent to 1 5)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^'], 'expression36': ['5'], 'expression37': ['n'], 'expression38': ['Equality', 'Add', '24', '47', '71']}","{'expression0': ['n <= 90'], 'expression1': ['Mul', ['95'], ['c'], ['a'], ['n'], ['a'], ['l'], ['w'], ['a'], ['y'], ['s'], ['b'], ['E'], ['f'], ['o'], ['r'], ['m'], ['E'], ['d']], 'expression2': ['Equality', 'n', 'Mod(0, 5)'], 'expression3': ['Add', '1', 'n'], 'expression4': ['Equality', 'n', 'Mod(1, 5)'], 'expression5': ['n'], 'expression6': ['Equality', 'n', 'Mod(2, 5)'], 'expression7': ['Add', 'Mul', ['2'], ['n'], '2'], 'expression8': ['Equality', 'Add', 'Mul', ['2'], ['n'], '2', '96'], 'expression9': ['Equality', 'n', '47'], 'expression10': ['Equality', '92', 'Add', '45', '47'], 'expression11': ['Equality', '93', 'Add', '48', '45'], 'expression12': ['Equality', '94', 'Add', '47', '47'], 'expression13': ['Equality', 'n', '47'], 'expression14': ['Equality', 'n', 'Mod(3, 5)'], 'expression15': ['Mul', ['2'], ['n']], 'expression16': ['Equality', 'Mul', ['2'], ['n'], '96'], 'expression17': ['Equality', 'n', '48'], 'expression18': ['Equality', '94', 'Add', '49', '45'], 'expression19': ['Equality', '93', 'Add', '48', '45'], 'expression20': ['Equality', 'n', 'Mod(4, 5)'], 'expression21': ['Add', '1', 'n'], 'expression22': ['Equality', 'Add', 'Mul', ['5'], ['n'], 'Mul', ['-1'], ['n'], '91'], 'expression23': ['Equality', 'Mul', ['4'], ['n'], '96'], 'expression24': ['Equality', 'n', '24'], 'expression25': ['n'], 'expression26': ['Equality', 'n', '24'], 'expression27': ['Equality', 'n', '47'], 'expression28': ['Equality', 'Add', '24', '47', '71']}",{},{}
"{'expression0': ['ABC'], 'expression1': ['P'], 'expression2': ['<sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>'], 'expression3': ['C'], 'expression4': ['\\overline{AB}'], 'expression5': ['B'], 'expression6': ['\\overline{AC}'], 'expression7': ['PQ'], 'expression8': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression9': ['X'], 'expression10': ['Y'], 'expression11': ['Equality', 'Mul', ['X'], ['P'], '10'], 'expression12': ['Equality', 'Mul', ['P'], ['Q'], '25'], 'expression13': ['Equality', 'Mul', ['Q'], ['Y'], '15'], 'expression14': ['Mul', ['A'], ['B'], ['A'], ['C']], 'expression15': [""I don't understand this\nm√(n)\n~^""], 'expression16': ['m'], 'expression17': ['n'], 'expression18': ['n'], 'expression19': ['Add', 'm', 'n']}","{'expression0': ['Equality', 'Equality', 'Mul', ['a'], ['cos(A)'], 'Mul', ['P'], ['Q'], '25'], 'expression1': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['a'], ['cos(A)'], ['c'], ['cos(C)'], 'Mul', ['a'], ['cos(C)'], ['c'], ['cos(A)'], 'Mul', ['A'], ['P'], ['P'], ['B'], 'Mul', ['10'], ['Add', '25', '15'], '400'], 'expression2': ['Equality', 'Equality', 'Mul', ['a'], ['cos(A)'], ['b'], ['cos(B)'], 'Mul', ['15'], ['Add', '10', '25'], '525'], 'expression3': ['Mul', ['a'], ['cos(A)']], 'expression4': ['[Eq(b*cos(B), 21), Eq(c*cos(C), 16)]'], 'expression5': ['[a*cos(A), b*cos(B), c*cos(C)]'], 'expression6': ['Add', 'pi', 'Mul', ['-1'], ['2'], ['A']], 'expression7': ['Add', 'pi', 'Mul', ['-1'], ['2'], ['B']], 'expression8': ['Add', 'pi', 'Mul', ['-1'], ['2'], ['C']], 'expression9': ['D'], 'expression10': ['A'], 'expression11': ['Mul', ['\\triangle'], ['D'], ['P'], ['Q']], 'expression12': ['[cos(P), Eq(cos(Q), (-1*16**2 + 21**2 + 25**2)/((2*21*25))), Eq((-1*21**2 + 16**2 + 25**2)/((2*16*25)), 27/35), 11/20]'], 'expression13': [""I don't understand this\n⇒cosB==cos(1/2 (π-P))==sin1/2 P ==√(4/35)\n^""], 'expression14': ['Equality', 'Equality', 'Equality', 'cos(C)', 'cos(1*(pi - Q)/2)', 'sin(1*Q/2)', 'Pow', 'Mul', ['9'], ['Pow', '40', '-1'], '1/2'], 'expression15': ['Equality', 'Equality', 'Equality', 'Mul', ['b'], ['c'], 'Mul', ['Mul', ['b'], ['cos(B)'], ['c'], ['cos(C)']], ['Pow', 'Mul', ['cos(B)'], ['cos(C)'], '-1'], 'Mul', ['Mul', ['16'], ['21']], ['Pow', 'Mul', ['2'], ['Pow', 'Pow', '35', '1/2', '-1'], ['3'], ['Pow', 'Pow', '40', '1/2', '-1'], '-1'], 'Mul', ['560'], ['Pow', '14', '1/2']], 'expression16': ['{574}']}","{'expression0': ['Equality', 'Mul', ['B'], ['C'], 'a'], 'expression1': ['Equality', 'Mul', ['A'], ['C'], 'b'], 'expression2': ['Equality', 'Mul', ['A'], ['B'], 'c'], 'expression3': ['Equality', 'cos(A*\\angle)', 'k'], 'expression4': ['Equality', 'Mul', ['A'], ['P'], 'Mul', ['b'], ['k']], 'expression5': ['Equality', 'Mul', ['A'], ['Q'], 'Mul', ['c'], ['k']], 'expression6': ['Equality', 'k', 'Pow', 'Mul', ['Mul', ['Add', 'u', '-400'], ['Add', 'u', '-525']], ['Pow', 'Pow', 'u', '2', '-1'], '1/2'], 'expression7': ['Equality', 'k', 'Pow', 'Mul', ['Mul', ['Add', 'u', '-400'], ['Add', 'u', '-525']], ['Pow', 'Pow', 'u', '2', '-1'], '1/2'], 'expression8': ['Equality', 'k', 'Pow', 'Mul', ['Mul', ['Add', 'u', '-400'], ['Add', 'u', '-525']], ['Pow', 'Pow', 'u', '2', '-1'], '1/2'], 'expression9': ['Equality', 'k', 'Pow', 'Mul', ['Mul', ['Add', 'u', '-400'], ['Add', 'u', '-525']], ['Pow', 'Pow', 'u', '2', '-1'], '1/2'], 'expression10': ['Equality', 'Equality', 'Equality', 'Mul', ['b'], ['c'], ['k'], 'Add', 'Pow', 'Mul', ['b'], ['k'], '2', '400', 'Add', 'Pow', 'Mul', ['c'], ['k'], '2', '525', 'u'], 'expression11': ['Equality', 'Mul', ['b'], ['k'], 'Pow', 'Add', 'u', '-400', '1/2'], 'expression12': ['Equality', 'Mul', ['c'], ['k'], 'Pow', 'Add', 'u', '-525', '1/2'], 'expression13': ['Equality', 'k', 'Pow', 'Mul', ['Mul', ['Add', 'u', '-400'], ['Add', 'u', '-525']], ['Pow', 'Pow', 'u', '2', '-1'], '1/2'], 'expression14': ['Mul', ['\\triangle'], ['A'], ['P'], ['Q']], 'expression15': ['Equality', 'Equality', 'Pow', '25', '2', 'Add', 'Mul', ['Pow', 'b', '2'], ['Pow', 'k', '2'], 'Mul', ['Pow', 'c', '2'], ['Pow', 'k', '2'], 'Add', 'Mul', ['2'], ['b'], ['c'], ['k'], '-925'], 'expression16': ['Equality', 'Equality', '775', 'Add', 'Mul', ['b'], ['c'], ['k'], 'Mul', ['-1'], ['Pow', 'k', '2'], ['b'], ['c'], ['k'], 'Add', 'u', 'Mul', ['-1'], ['Mul', ['Add', 'u', '-400'], ['Add', 'u', '-525']], ['Pow', 'u', '-1']], 'expression17': ['u'], 'expression18': ['Equality', 'u', '1400'], 'expression19': [""I don't understand this\nAB*AC == bc == 1/k*bck == u^2/√((u-400)(u-525))==560 √(14)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression20': ['Equality', 'Add', '560', '14', '574']}","{'expression0': ['Equality', 'Mul', ['A'], ['P'], 'p'], 'expression1': ['Equality', 'Mul', ['P'], ['B'], 'q'], 'expression2': ['Equality', 'Mul', ['A'], ['Q'], 'r'], 'expression3': ['Equality', 'Mul', ['Q'], ['C'], 's'], 'expression4': ['Equality', 'Mul', ['p'], ['Add', 'p', 'q'], 'Mul', ['r'], ['Add', 'r', 's']], 'expression5': ['Equality', 'Mul', ['p'], ['Add', 'p', 'q'], 'Mul', ['r'], ['Add', 'r', 's']], 'expression6': ['Equality', 'Mul', ['p'], ['Add', 'p', 'q'], 'Mul', ['r'], ['Add', 'r', 's']], 'expression7': ['omega'], 'expression8': ['BC'], 'expression9': ['False'], 'expression10': ['Equality', 'Mul', ['p'], ['Add', 'p', 'q'], 'Mul', ['r'], ['Add', 'r', 's']], 'expression11': ['Mul', ['\\triangle'], ['A'], ['P'], ['Q']], 'expression12': ['Equality', 'Pow', '25', '2', 'Add', 'Pow', 'p', '2', 'Pow', 'r', '2'], 'expression13': ['False'], 'expression14': ['Equality', 'Equality', 'Equality', '500', 'Add', 'Mul', ['2'], ['Pow', 'r', '2'], 'Mul', ['-1'], ['Mul', ['2'], ['p'], ['Pow', 'r', '2']], ['Pow', 'p', '-1'], 'Add', 'Mul', ['2'], ['Pow', 'r', '2'], 'Mul', ['-1'], ['Mul', ['2'], ['Pow', 'p', '2'], ['Pow', 'r', '2']], ['Pow', 'Pow', 'p', '2', '-1'], 'Add', 'Mul', ['Mul', ['800'], ['Pow', 'r', '2']], ['Pow', 'Pow', 'r', '2', '-1'], '525'], 'expression15': ['Equality', 'r', 'Mul', ['5'], ['Pow', '35', '1/2']], 'expression16': ['[Eq(r, 5*sqrt(35)), Eq(Eq(p, sqrt(r**2 + 125)), 10*sqrt(10)), Eq(Eq(q, 400/p), 4*sqrt(10)), Eq(Eq(s, 525/r), 3*sqrt(35))]'], 'expression17': ['Equality', 'Equality', 'Mul', ['A'], ['B'], ['A'], ['C'], 'Mul', ['Add', 'p', 'q'], ['Add', 'r', 's'], 'Mul', ['560'], ['Pow', '14', '1/2']], 'expression18': ['Equality', 'Add', '560', '14', '574']}","{'expression0': ['[B*X, \\text{parallel}, A*C]'], 'expression1': ['[C*Y, \\text{parallel}, A*B]'], 'expression2': ['e'], 'expression3': ['F'], 'expression4': ['P'], 'expression5': ['<sympy.assumptions.ask.AssumptionKeys object at 0x0000027A4E01CE50>'], 'expression6': ['[E*F, \\text{parallel}, X*Y]'], 'expression7': ['Equality', 'Equality', 'Equality', 'Mul', ['E'], ['F'], 'Mul', ['2'], ['P'], ['Q'], 'Add', 'Mul', ['X'], ['P'], 'Mul', ['P'], ['Q'], 'Mul', ['X'], ['Y']], 'expression8': ['Mul', ['E'], ['X'], ['Y'], ['F']], 'expression9': ['Equality', 'Mul', ['\\angle'], ['X'], ['Y'], ['F'], 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression10': ['Equality', 'Mul', ['\\angle'], ['X'], ['B'], ['F'], 'Mul', ['90'], ['pi'], ['Pow', '180', '-1']], 'expression11': ['Equality', 'Mul', ['\\angle'], ['X'], ['B'], ['Q'], 'Mul', ['\\angle'], ['A'], ['Q'], ['B']], 'expression12': ['[B*X, \\text{parallel}, A*Q]'], 'expression13': ['[C*Y, \\text{parallel}, A*B]'], 'expression14': [""I don't understand this\n ▪\n~^""], 'expression15': ['Mul', ['\\triangle'], ['B'], ['P'], ['X'], ['\\text{sim}'], ['\\triangle'], ['A'], ['P'], ['Q'], ['\\text{sim}'], ['\\triangle'], ['C'], ['Y'], ['Q']], 'expression16': ['Equality', 'Mul', ['A'], ['P'], 'Mul', ['5'], ['k']], 'expression17': ['Equality', 'Mul', ['B'], ['P'], 'Mul', ['2'], ['k']], 'expression18': ['P'], 'expression19': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['10'], ['40'], 'Mul', ['10'], ['Pow', 'k', '2'], 'k', 'Mul', ['2'], ['Pow', '10', '1/2'], 'Mul', ['A'], ['B'], 'Mul', ['14'], ['Pow', '10', '1/2']], 'expression20': ['Equality', 'Mul', ['A'], ['Q'], 'Mul', ['5'], ['l']], 'expression21': ['Equality', 'Mul', ['C'], ['Q'], 'Mul', ['3'], ['l']], 'expression22': [""I don't understand this\n⋯⋯⋯⋯⋯⋯.15 ·35 == 15l^2 == l == √(35) == AC == 8 √(35)\n^""], 'expression23': ['Equality', 'Equality', 'Equality', 'Mul', ['A'], ['B'], ['A'], ['C'], 'Mul', ['112'], ['Pow', '350', '1/2'], 'Mul', ['112'], ['5'], ['Pow', '14', '1/2'], 'Mul', ['560'], ['Pow', '14', '1/2']], 'expression24': ['Equality', 'Add', '560', '14', '574']}",{}
"{'expression0': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression1': ['Equality', 'Mul', ['A'], ['B'], 'Mul', ['A'], ['C']], 'expression2': ['D'], 'expression3': ['A'], 'expression4': ['C'], 'expression5': ['\\overline{AC}'], 'expression6': ['e'], 'expression7': ['A'], 'expression8': ['B'], 'expression9': ['\\overline{AB}'], 'expression10': ['Equality', 'Equality', 'Equality', 'Mul', ['A'], ['E'], 'Mul', ['E'], ['D'], 'Mul', ['D'], ['B'], 'Mul', ['B'], ['C']], 'expression11': ['Mul', ['\\angle'], ['A'], ['B'], ['C']], 'expression12': ['Mul', ['m'], ['Pow', 'n', '-1']], 'expression13': ['m'], 'expression14': ['n'], 'expression15': ['Add', 'm', 'n']}","{'expression0': ['Mul', ['\\angle'], ['B'], ['A'], ['C']], 'expression1': ['x'], 'expression2': ['Mul', ['180'], ['pi'], ['Pow', '180', '-1']], 'expression3': ['Equality', 'Equality', 'Mul', ['\\angle'], ['A'], ['D'], ['E'], 'Mul', ['\\angle'], ['E'], ['A'], ['D'], 'x'], 'expression4': ['Equality', 'Mul', ['\\angle'], ['A'], ['E'], ['D'], 'Add', '180', 'Mul', ['-1'], ['2'], ['x']], 'expression5': ['Equality', 'Equality', 'Mul', ['\\angle'], ['B'], ['E'], ['D'], 'Mul', ['\\angle'], ['E'], ['B'], ['D'], 'Mul', ['2'], ['x']], 'expression6': ['Equality', 'Mul', ['\\angle'], ['E'], ['D'], ['B'], 'Add', '180', 'Mul', ['-1'], ['4'], ['x']], 'expression7': ['Equality', 'Equality', 'Mul', ['\\angle'], ['B'], ['D'], ['C'], 'Mul', ['\\angle'], ['B'], ['C'], ['D'], 'Mul', ['3'], ['x']], 'expression8': ['Equality', 'Mul', ['\\angle'], ['C'], ['B'], ['D'], 'Add', '180', 'Mul', ['-1'], ['6'], ['x']], 'expression9': ['Equality', 'Mul', ['A'], ['B'], 'Mul', ['A'], ['C']], 'expression10': ['Equality', 'Mul', ['\\angle'], ['A'], ['B'], ['C'], 'Mul', ['\\angle'], ['A'], ['C'], ['B']], 'expression11': ['Equality', 'Add', '180', 'Mul', ['-1'], ['4'], ['x'], 'Mul', ['3'], ['x']], 'expression12': ['Equality', 'x', 'Mul', ['180'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression13': ['Equality', 'Add', '180', 'Mul', ['-1'], ['4'], ['180'], ['Pow', '7', '-1'], 'Mul', ['540'], ['Pow', '7', '-1']], 'expression14': ['{547}']}","{'expression0': ['Mul', ['\\angle'], ['B'], ['A'], ['C']], 'expression1': ['x'], 'expression2': ['Equality', 'Mul', ['\\angle'], ['A'], ['D'], ['E'], 'x'], 'expression3': ['AeD'], 'expression4': ['Equality', 'Mul', ['\\angle'], ['B'], ['E'], ['D'], 'Mul', ['2'], ['x']], 'expression5': ['ADB'], 'expression6': ['Equality', 'Mul', ['\\angle'], ['B'], ['D'], ['C'], 'Mul', ['3'], ['x']], 'expression7': ['Equality', 'Equality', 'Mul', ['\\angle'], ['B'], ['C'], ['A'], 'Mul', ['\\angle'], ['A'], ['B'], ['C'], 'Mul', ['3'], ['x']], 'expression8': ['Equality', 'Add', 'Mul', ['3'], ['x'], 'Mul', ['3'], ['x'], '180'], 'expression9': ['Equality', 'x', 'Mul', ['180'], ['Pow', '7', '-1']], 'expression10': ['Equality', 'Equality', 'Mul', ['\\angle'], ['A'], ['B'], ['C'], 'Mul', ['3'], ['x'], 'Mul', ['540'], ['Pow', '7', '-1']], 'expression11': ['{547}'], 'expression12': ['Equality', 'Equality', 'x', 'Mul', ['\\angle'], ['A'], ['B'], ['C'], 'Mul', ['\\angle'], ['A'], ['C'], ['B']], 'expression13': ['Mul', ['\\triangle'], ['B'], ['C'], ['D']], 'expression14': ['Equality', 'Mul', ['\\angle'], ['C'], ['B'], ['D'], 'Add', 'Mul', ['180'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['2'], ['x']], 'expression15': [""I don't understand this\n\\angleDBe == x - \\angleCBD == x - (180*π/180 - 2x) ==  3x - 180*π/180\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression16': ['Mul', ['\\triangle'], ['E'], ['D'], ['A']], 'expression17': ['Mul', ['\\triangle'], ['D'], ['B'], ['E']], 'expression18': ['Equality', 'Equality', 'Equality', 'Mul', ['\\angle'], ['B'], ['A'], ['C'], 'Mul', ['1'], ['Pow', '2', '-1'], ['Add', 'Mul', ['\\angle'], ['E'], ['A'], ['D'], 'Mul', ['\\angle'], ['A'], ['D'], ['E']], 'Mul', ['1'], ['Pow', '2', '-1'], ['\\angle'], ['B'], ['E'], ['D'], 'Mul', ['1'], ['Pow', '2', '-1'], ['\\angle'], ['D'], ['B'], ['E']], 'expression19': [""I don't understand this\n== 1/2 (3x - 180*π/180) == 3/2x-90*π/180\n^""], 'expression20': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression21': ['Mul', ['\\angle'], ['B'], ['A'], ['C']], 'expression22': ['Add', 'Mul', ['180'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['2'], ['x']], 'expression23': ['Equality', 'Add', 'Mul', ['3'], ['Pow', '2', '-1'], ['x'], 'Mul', ['-1'], ['90'], ['pi'], ['Pow', '180', '-1'], 'Add', 'Mul', ['180'], ['pi'], ['Pow', '180', '-1'], 'Mul', ['-1'], ['2'], ['x']], 'expression24': ['Equality', 'Equality', 'Mul', ['\\angle'], ['A'], ['B'], ['C'], 'x', 'Mul', ['540'], ['Pow', '7', '-1'], ['pi'], ['Pow', '180', '-1']], 'expression25': ['Equality', 'Add', '540', '7', '547']}","{'expression0': ['{180 - x}'], 'expression1': ['{2}'], 'expression2': ['{180 - x}'], 'expression3': ['{2}'], 'expression4': ['Add', '180', 'Mul', ['-1'], ['2'], ['y']], 'expression5': ['{180 - x}'], 'expression6': ['{2}'], 'expression7': ['Add', '180', 'Mul', ['-1'], ['2'], ['y']], 'expression8': ['Add', '180', 'Mul', ['-1'], ['2'], ['z']], 'expression9': ['{180 - x}'], 'expression10': ['{2}'], 'expression11': ['{180 - x}'], 'expression12': ['{2}'], 'expression13': ['Add', '180', 'Mul', ['-1'], ['2'], ['y']], 'expression14': ['Add', '180', 'Mul', ['-1'], ['2'], ['z']], 'expression15': ['{180 - x}'], 'expression16': ['{2}'], 'expression17': ['Add', '180', 'Mul', ['-1'], ['2'], ['y']], 'expression18': ['Add', '180', 'Mul', ['-1'], ['Add', 'Mul', ['6'], ['y'], '-6']], 'expression19': ['{2}'], 'expression20': ['{180 - x}'], 'expression21': ['{2}'], 'expression22': ['z'], 'expression23': ['Mul', ['2'], ['y']], 'expression24': ['{180 - x}'], 'expression25': ['{2}'], 'expression26': ['Add', 'Mul', ['6'], ['y'], 'Mul', ['-1'], ['6'], ['z']], 'expression27': ['Add', 'Mul', ['6'], ['y'], 'Mul', ['-1'], ['6'], ['z']], 'expression28': ['{180}'], 'expression29': ['{7}'], 'expression30': ['{180}'], 'expression31': ['{7}'], 'expression32': ['{360}'], 'expression33': ['{7}'], 'expression34': ['Equality', 'Equality', 'Add', 'Mul', ['180'], ['Pow', '7', '-1'], 'Mul', ['360'], ['Pow', '7', '-1'], 'Mul', ['540'], ['Pow', '7', '-1'], '547']}",{},{}
"{'expression0': ['x'], 'expression1': ['log(2*x, 8)'], 'expression2': ['log(x, 4)'], 'expression3': ['log(x, 2)'], 'expression4': ['x'], 'expression5': ['Mul', ['m'], ['Pow', 'n', '-1']], 'expression6': ['m'], 'expression7': ['n'], 'expression8': ['Add', 'm', 'n']}","{'expression0': ['Mul', ['log(x, 2)'], ['Pow', 'log(x, 4)', '-1']], 'expression1': ['Equality', 'Equality', 'Mul', ['log(4, x)'], ['Pow', 'log(2, x)', '-1'], 'log(4, 2)', '2'], 'expression2': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['log(x, 4)'], ['Pow', 'log(2*x, 8)', '-1'], '2', 'log(x, 4)', 'Add', 'Mul', ['2'], ['log(2, 8)'], 'Mul', ['2'], ['log(x, 8)'], 'Mul', ['1'], ['Pow', '2', '-1'], ['log(x, 2)'], 'Add', 'Mul', ['2'], ['Pow', '3', '-1'], 'Mul', ['2'], ['Pow', '3', '-1'], ['log(x, 2)']], 'expression3': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['-1'], ['1'], ['Pow', '6', '-1'], ['log(x, 2)'], 'Mul', ['2'], ['Pow', '3', '-1'], 'log(x, 2)', '-4', 'x', 'Mul', ['1'], ['Pow', '16', '-1']], 'expression4': ['Equality', 'Add', '1', '16', '17']}","{'expression0': ['Equality', 'x', 'Pow', '2', 'y'], 'expression1': ['[(y + 1)/3, y/2, y]'], 'expression2': ['Equality', 'Mul', ['Add', 'Pow', 'y', '2', 'y'], ['Pow', '3', '-1'], 'Mul', ['Pow', 'y', '2'], ['Pow', '4', '-1']], 'expression3': ['Equality', 'y', '-4'], 'expression4': ['Equality', 'Equality', 'x', 'Pow', '2', '-4', 'Mul', ['1'], ['Pow', '16', '-1']], 'expression5': ['17']}","{'expression0': ['r'], 'expression1': ['Equality', 'Equality', 'r', 'Mul', ['log(x, 4)'], ['Pow', 'log(2*x, 8)', '-1'], 'Mul', ['log(x, 2)'], ['Pow', 'log(x, 4)', '-1']], 'expression2': ['Equality', 'Mul', ['log(x, 4)'], ['log(x, 4)'], 'Mul', ['log(2*x, 8)'], ['log(x, 2)']], 'expression3': ['64'], 'expression4': ['Equality', 'Mul', ['log(x**3, 64)'], ['log(x**3, 64)'], 'Mul', ['log(x**6, 64)'], ['log(4*x**2, 64)']], 'expression5': ['Equality', 'Mul', ['log(x**3, 64)'], ['Pow', 'log(4*x**2, 64)', '-1'], 'Mul', ['log(x**6, 64)'], ['Pow', 'log(x**3, 64)', '-1']], 'expression6': ['Equality', 'Equality', 'log(x**3, 4*x**2)', 'log(x**6, x**3)', '2'], 'expression7': ['Equality', 'Pow', 'Mul', ['4'], ['Pow', 'x', '2'], '2', 'Pow', 'x', '3'], 'expression8': ['Equality', 'Add', '1', '16', '17']}","{'expression0': ['r'], 'expression1': ['a'], 'expression2': ['I expected something else here\n(a==log_8(2x))\n~~^'], 'expression3': ['[Eq(log(2*x, 8), a), Eq(log(x, 4), a*r), Eq(log(x, 2), a*r**2)]'], 'expression4': ['[Eq(8**a, 2*x), Eq(4**(a*r), x), Eq(2**(a*r**2), x)]'], 'expression5': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Pow', '4', 'Mul', ['a'], ['r'], 'Pow', '2', 'Mul', ['a'], ['Pow', 'r', '2'], 'Pow', '2', 'Mul', ['2'], ['a'], ['r'], 'Pow', '2', 'Mul', ['a'], ['Pow', 'r', '2'], 'Mul', ['2'], ['a'], ['r'], 'Mul', ['a'], ['Pow', 'r', '2'], 'r', '2'], 'expression6': ['r'], 'expression7': ['[Eq(8**a, 2*x), Eq(4**(2*a), x)]'], 'expression8': ['[Eq(2**(3*a), 2*x), Eq(2**(4*a), x)]'], 'expression9': ['Equality', 'Pow', '2', 'Add', 'Mul', ['3'], ['a'], '-1', 'x'], 'expression10': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['3'], ['a'], '-1', 'Mul', ['4'], ['a'], 'a', '-1'], 'expression11': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Pow', '8', '-1', 'Mul', ['2'], ['x'], 'Mul', ['2'], ['x'], 'Mul', ['1'], ['Pow', '8', '-1'], 'x', 'Mul', ['1'], ['Pow', '16', '-1']], 'expression12': ['Equality', 'Equality', 'Add', 'm', 'n', 'Add', '1', '16', '17']}","{'expression0': ['Equality', 'Mul', ['log(x, 4)'], ['Pow', 'log(2*x, 8)', '-1'], 'Mul', ['log(x, 2)'], ['Pow', 'log(x, 4)', '-1']], 'expression1': ['Equality', 'Mul', ['log(2*x, 8)'], ['log(x, 2)'], 'Mul', ['log(x, 4)'], ['log(x, 4)']], 'expression2': ['2'], 'expression3': ['Equality', 'log(b, a)', 'log(b**c, a**c)'], 'expression4': ['Equality', 'Mul', ['log((2*x)**(1/3), 2)'], ['log(x, 2)'], 'Mul', ['log(sqrt(x), 2)'], ['log(sqrt(x), 2)']], 'expression5': ['x'], 'expression6': ['Equality', 'Mul', ['1'], ['Pow', '3', '-1'], ['log(2*x, 2)'], ['log(x, 2)'], 'Mul', ['1'], ['Pow', '4', '-1'], ['log(x, 2)'], ['log(x, 2)']], 'expression7': ['Equality', 'Mul', ['1'], ['Pow', '3', '-1'], ['log(2*x, 2)'], 'Mul', ['1'], ['Pow', '4', '-1'], ['log(x, 2)']], 'expression8': ['Equality', 'Add', 'Mul', ['1'], ['Pow', '3', '-1'], ['log(2, 2)'], 'Mul', ['1'], ['Pow', '3', '-1'], ['log(x, 2)'], 'Mul', ['1'], ['Pow', '4', '-1'], ['log(x, 2)']], 'expression9': ['Equality', 'x', 'Mul', ['1'], ['Pow', '16', '-1']], 'expression10': ['17']}"
"{'expression0': ['<function N at 0x0000027A4DE17880>'], 'expression1': ['Mul', ['a'], ['1/10'], ['E'], ['m'], ['b'], ['1/10'], ['E'], ['m'], ['c']], 'expression2': ['Mul', ['101/10'], ['E'], ['m'], ['b'], ['1/10'], ['E'], ['m'], ['c'], ['1/10'], ['E'], ['m'], ['a']], 'expression3': ['(a, b)'], 'expression4': ['c'], 'expression5': ['<function N at 0x0000027A4DE17880>']}","{'expression0': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['121'], ['a'], 'Mul', ['11'], ['b'], 'Add', '512', 'Mul', ['64'], ['b'], 'Mul', ['120'], ['a'], 'Add', '512', 'Mul', ['53'], ['b']], 'expression1': ['a'], 'expression2': ['b'], 'expression3': ['c'], 'expression4': ['a >= 5'], 'expression5': ['n'], 'expression6': ['a'], 'expression7': ['Equality', 'a', '5'], 'expression8': ['Equality', '88', 'Add', 'Mul', ['53'], ['b'], 'Mul', ['7'], ['c']], 'expression9': ['Equality', 'b', '1'], 'expression10': ['Equality', 'c', '5'], 'expression11': ['515'], 'expression12': ['{621}']}","{'expression0': ['Equality', 'Add', 'Mul', ['121'], ['a'], 'Mul', ['11'], ['b'], 'Add', '512', 'Mul', ['64'], ['b']], 'expression1': ['Equality', 'Mul', ['120'], ['a'], 'Add', '512', 'Mul', ['53'], ['b']], 'expression2': ['7'], 'expression3': ['120*a >= 512'], 'expression4': ['a'], 'expression5': ['(5, 6)'], 'expression6': ['7'], 'expression7': ['Equality', 'a', '5'], 'expression8': ['Equality', '600', 'Add', '512', 'Mul', ['53'], ['b']], 'expression9': ['Equality', '88', 'Add', 'Mul', ['53'], ['b'], 'Mul', ['7'], ['c']], 'expression10': ['b'], 'expression11': ['0'], 'expression12': ['1'], 'expression13': ['Equality', 'b', '0'], 'expression14': ['c'], 'expression15': ['Equality', 'b', '1'], 'expression16': ['Equality', 'Mul', ['7'], ['c'], '35'], 'expression17': ['Equality', 'c', '5'], 'expression18': ['Equality', 'N', '515'], 'expression19': ['Equality', 'Equality', 'N', 'Add', 'Mul', ['5'], ['121'], 'Mul', ['1'], ['11'], '621'], 'expression20': ['637'], 'expression21': ['621']}",{},{},{}
"{'expression0': ['S'], 'expression1': ['<function N at 0x0000027A4DE17880>'], 'expression2': ['<function N at 0x0000027A4DE17880>'], 'expression3': ['2020'], 'expression4': ['<function N at 0x0000027A4DE17880>'], 'expression5': ['42020'], 'expression6': ['S'], 'expression7': ['4'], 'expression8': ['42020'], 'expression9': ['S'], 'expression10': ['42020'], 'expression11': ['Equality', 'Add', '4', '2', '8']}","{'expression0': ['S'], 'expression1': ['Add', 'a(10, 0)', '2020'], 'expression2': ['a'], 'expression3': ['a'], 'expression4': ['a'], 'expression5': ['a(10, 0)'], 'expression6': ['a'], 'expression7': ['a'], 'expression8': ['Equality', 'Add', '2', '0', '4'], 'expression9': ['2020'], 'expression10': ['Mul', ['Pow', '2', '2'], ['5'], ['101']], 'expression11': ['Equality', 'Mul', ['Add', '2', '1'], ['Add', '1', '1'], ['Add', '1', '1'], '12'], 'expression12': ['a'], 'expression13': ['Equality', 'Mul', ['4'], ['12'], '48'], 'expression14': ['2020'], 'expression15': ['a'], 'expression16': ['(1, 2, 4, 5, 10, 20, 101, 202, 404, 505, 1010, 2020)'], 'expression17': ['45'], 'expression18': ['Equality', 'Add', '45', '48', '93']}","{'expression0': ['<function N at 0x0000027A4DE17880>'], 'expression1': ['k'], 'expression2': ['m'], 'expression3': ['Equality', 'Equality', 'N', 'Add', 'Mul', ['Pow', '10', '4'], ['m'], '2020', 'Mul', ['k'], ['m']], 'expression4': ['Equality', 'Mul', ['Add', 'k', 'Mul', ['-1'], ['Pow', '10', '4']], ['m'], '2020'], 'expression5': ['m'], 'expression6': ['2020'], 'expression7': ['Equality', '2020', 'Mul', ['Pow', '2', '2'], ['5'], ['101']], 'expression8': ['12'], 'expression9': ['(1, 2, 4, 5, 10, 20, 101, 202, 404, 505, 1010)'], 'expression10': ['2020'], 'expression11': ['12'], 'expression12': ['2020'], 'expression13': ['Equality', 'Add', '1', '2', '93']}","{'expression0': [""I don't understand this\nN ∈S\n~~^""], 'expression1': ['<function N at 0x0000027A4DE17880>'], 'expression2': ['Equality', 'Equality', 'N', 'Add', 'Mul', ['10000'], ['x'], '2020', 'Mul', ['20'], ['Add', 'Mul', ['500'], ['x'], '101']], 'expression3': ['x'], 'expression4': ['<function N at 0x0000027A4DE17880>'], 'expression5': ['x'], 'expression6': ['Mul', ['Mul', ['20'], ['Add', 'Mul', ['500'], ['x'], '101']], ['Pow', 'x', '-1']], 'expression7': ['Equality', 'x', 'Mul', ['a'], ['b']], 'expression8': ['a'], 'expression9': ['20'], 'expression10': ['Equality', 'Mul', ['Mul', ['20'], ['Add', 'Mul', ['500'], ['x'], '101']], ['Pow', 'x', '-1'], 'Mul', ['20'], ['Pow', 'a', '-1'], ['Add', 'Mul', ['Mul', ['500'], ['x']], ['Pow', 'b', '-1'], 'Mul', ['101'], ['Pow', 'b', '-1']]], 'expression11': ['Mul', ['20'], ['Pow', 'a', '-1']], 'expression12': ['Mul', ['Mul', ['500'], ['x']], ['Pow', 'b', '-1']], 'expression13': ['<function N at 0x0000027A4DE17880>'], 'expression14': ['Mul', ['101'], ['Pow', 'b', '-1']], 'expression15': ['b'], 'expression16': ['101'], 'expression17': ['101'], 'expression18': [""I don't understand this\nb∈{ 1, 101 }\n~^""], 'expression19': ['a'], 'expression20': ['20'], 'expression21': [""I don't understand this\na ∈{ 1,2,4,5,10,20}\n~~^""], 'expression22': [""I don't understand this\nx ∈{1,2,4,5,10,20,101,202,404,505,1010,2020}\n~~^""], 'expression23': ['<function N at 0x0000027A4DE17880>'], 'expression24': ['2020'], 'expression25': ['<function N at 0x0000027A4DE17880>'], 'expression26': ['x'], 'expression27': ['Equality', 'Add', '2', '0', '4'], 'expression28': ['S'], 'expression29': ['Equality', 'Add', 'Mul', ['12'], ['4'], '45', '93']}",{},{}
"{'expression0': ['1'], 'expression1': ['6']}","{'expression0': ['1'], 'expression1': ['6'], 'expression2': ['Equality', 'Mul', ['6'], ['5'], '30'], 'expression3': ['132456'], 'expression4': ['3'], 'expression5': ['2'], 'expression6': ['5'], 'expression7': ['(namely, 213456, 132456, 124356, 123546, 123465)'], 'expression8': ['Equality', 'Add', '30', '-5', '25'], 'expression9': ['123456'], 'expression10': ['26'], 'expression11': ['2'], 'expression12': ['52']}","{'expression0': ['0'], 'expression1': ['7'], 'expression2': ['123456'], 'expression3': ['Mul', ['12'], ['345'], ['6']], 'expression4': ['1'], 'expression5': ['1'], 'expression6': ['1'], 'expression7': ['2'], 'expression8': ['2'], 'expression9': ['Equality', 'Add', '1', '5', '26'], 'expression10': ['52']}","{'expression0': ['5'], 'expression1': ['6'], 'expression2': ['Equality', 'Mul', ['6'], ['6'], '36'], 'expression3': ['123456'], 'expression4': ['123456'], 'expression5': ['0'], 'expression6': ['123456'], 'expression7': ['0'], 'expression8': ['I expected something else here\nCase 1: \n~~~~~~~~^'], 'expression9': ['6'], 'expression10': ['5'], 'expression11': ['5'], 'expression12': ['I expected something else here\nCase 2: \n~~~~~~~~^'], 'expression13': ['2'], 'expression14': ['213456'], 'expression15': ['1'], 'expression16': ['2'], 'expression17': ['5'], 'expression18': ['5'], 'expression19': ['Equality', 'Add', '36', '-5', '26'], 'expression20': ['52']}",{'expression0': ['52']},"{'expression0': ['1'], 'expression1': ['123456'], 'expression2': ['5'], 'expression3': ['124356'], 'expression4': ['123456'], 'expression5': ['4'], 'expression6': ['1'], 'expression7': ['6'], 'expression8': ['3'], 'expression9': ['(2, 3, 4)'], 'expression10': ['5'], 'expression11': ['Equality', 'Add', 'Mul', ['2'], ['4'], 'Mul', ['4'], ['3'], '20'], 'expression12': ['Equality', 'Add', '1', '5', '26'], 'expression13': ['Equality', 'Add', '26', '26', '52']}"
"{'expression0': ['1'], 'expression1': ['2'], 'expression2': ['7'], 'expression3': ['Mul', ['m'], ['Pow', 'n', '-1']], 'expression4': ['m'], 'expression5': ['n'], 'expression6': ['Add', 'm', 'n']}","{'expression0': ['r'], 'expression1': ['1'], 'expression2': ['r'], 'expression3': ['1'], 'expression4': ['Pow', 'Add', 'Pow', 'r', '2', '-1', '1/2'], 'expression5': ['Pow', 'Add', 'Pow', 'r', '2', '-4', '1/2'], 'expression6': ['7'], 'expression7': ['Add', 'Pow', 'Add', 'Pow', 'r', '2', '-1', '1/2', 'Mul', ['-1'], ['Pow', 'Add', 'Pow', 'r', '2', '-4', '1/2']], 'expression8': ['r'], 'expression9': ['Equality', 'Add', 'Pow', 'Add', 'Pow', 'Add', 'Pow', 'r', '2', '-1', '1/2', 'Mul', ['-1'], ['Pow', 'Add', 'Pow', 'r', '2', '-4', '1/2'], '2', 'Pow', '7', '2', 'Pow', 'Mul', ['2'], ['r'], '2'], 'expression10': [""I don't understand this\n(√((r^2-1)(r^2-4)))\n~^""], 'expression11': [""I don't understand this\n(√((r^2-1)(r^2-4)))\n~^""], 'expression12': [""I don't understand this\n(√(r^4 - 5r^2 + 4))\n~^""], 'expression13': ['{480}'], 'expression14': ['{39}'], 'expression15': ['{160}'], 'expression16': ['{13}'], 'expression17': ['{173}']}","{'expression0': ['A'], 'expression1': ['B'], 'expression2': ['C'], 'expression3': ['AB'], 'expression4': ['C'], 'expression5': ['[Eq(Eq(A*C, (A*B)/2 - (r_A**2 - r_B**2)/(2*A*B)), 23/7), Eq(Eq(B*C, A*B - A*C), 26/7)]'], 'expression6': ['Equality', 'Equality', 'Equality', 'Mul', ['C'], ['transpose(A)'], 'Mul', ['C'], ['transpose(B)'], 'Pow', 'Add', 'Mul', ['B'], ['Pow', 'C', '2'], 'Mul', ['-1'], ['Pow', 'r_B', '2'], '1/2', 'Mul', ['4'], ['Pow', '7', '-1'], ['Pow', '30', '1/2']], 'expression7': ['D'], 'expression8': ['R'], 'expression9': [""<class 'sympy.series.order.Order'>""], 'expression10': ['transpose(O)'], 'expression11': ['alpha'], 'expression12': ['Mul', ['O'], ['transpose(O)']], 'expression13': ['[C*D*O*transpose(O), Eq(C*D, 4*sqrt(30)/7)]'], 'expression14': ['C'], 'expression15': ['M'], 'expression16': ['AB'], 'expression17': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'd', 'Add', 'Mul', ['26'], ['Pow', '7', '-1'], 'Mul', ['-1'], ['7'], ['Pow', '2', '-1'], 'Mul', ['3'], ['Pow', '14', '-1'], 'sin(alpha)', 'Mul', ['d'], ['Pow', 'Mul', ['D'], ['C'], '-1'], 'Mul', ['3'], ['Pow', 'Mul', ['8'], ['Pow', '30', '1/2'], '-1']], 'expression18': ['Equality', 'Equality', 'Equality', 'cos(alpha)', 'Pow', 'Add', '1', 'Mul', ['-1'], ['9'], ['Pow', 'Mul', ['64'], ['30'], '-1'], '1/2', 'Pow', 'Mul', ['637'], ['Pow', '640', '-1'], '1/2', 'Mul', ['7'], ['Pow', '2', '-1'], ['Pow', 'Mul', ['13'], ['Pow', '160', '-1'], '1/2']], 'expression19': [""I don't understand this\n2R cosα== AB == 7 == R == 7/2 /7/2√(%s/%s)13160 == √(160/13) \n~~~~~~^""]}",{},{},{}
"{'expression0': ['11'], 'expression1': ['12'], 'expression2': ['1'], 'expression3': ['23'], 'expression4': ['<function N at 0x0000027A4DE17880>'], 'expression5': ['<function N at 0x0000027A4DE17880>']}","{'expression0': ['k'], 'expression1': ['Equality', 'Add', '11', 'Mul', ['-1'], ['Add', 'k', '-1'], 'Add', '12', 'Mul', ['-1'], ['k']], 'expression2': ['12'], 'expression3': ['k'], 'expression4': ['Add', '12', 'Mul', ['-1'], ['k']], 'expression5': ['1352078'], 'expression6': ['81']}","{'expression0': ['12'], 'expression1': ['Mul', ['1'], ['12']], 'expression2': ['1'], 'expression3': ['1'], 'expression4': ['1'], 'expression5': ['Mul', ['1'], ['Add', '12', '1']], 'expression6': ['Equality', '1', '1'], 'expression7': ['Equality', 'Add', '1', '12', '13'], 'expression8': ['Mul', ['1'], ['13']], 'expression9': ['Mul', ['11'], ['78']], 'expression10': ['13'], 'expression11': ['121'], 'expression12': ['0'], 'expression13': ['Equality', 'Add', '1', '66', '67'], 'expression14': ['Equality', 'Mul', ['121'], ['Add', '10', '75'], '103939'], 'expression15': ['67'], 'expression16': ['104006'], 'expression17': ['2'], 'expression18': ['52003'], 'expression19': ['7'], 'expression20': ['(7, 429)'], 'expression21': ['Mul', ['17'], ['19'], ['23']], 'expression22': ['Equality', 'Add', '2', '7', '81']}","{'expression0': ['k'], 'expression1': ['Add', '1', 'k'], 'expression2': ['k'], 'expression3': ['Sum', 'Mul', ['binomial(11, k)'], ['binomial(12, k + 1)'], 'over', '(k, 0, 11)'], 'expression4': ['Equality', 'binomial(n, k)', 'binomial(n, -k + n)'], 'expression5': ['Equality', 'Add', 'binomial(n, k)', 'binomial(n, k + 1)', 'binomial(n + 1, k + 1)'], 'expression6': ['Sum', 'Mul', ['binomial(11, k)'], ['binomial(12, k + 1)'], 'over', '(k, 0, 11)'], 'expression7': [""I don't understand this\n==120^2+121^2+122^2+123^2+124^2+125^2+126^2/2\n^""], 'expression8': [""I don't understand this\n==1/2∑_k==0^1212k^2\n^""], 'expression9': ['Equality', 'Sum', 'Pow', 'binomial(n, k)', '2', 'over', '(k, 0, n)', 'binomial(2*n, n)'], 'expression10': ['Equality', 'Equality', 'Mul', ['1'], ['Pow', '2', '-1'], ['2704156'], 'Mul', ['Mul', ['24'], ['23'], ['22'], ['21'], ['20'], ['19'], ['18'], ['17'], ['16'], ['15'], ['14'], ['13']], ['Pow', 'Mul', ['2'], ['12'], ['11'], ['10'], ['9'], ['8'], ['7'], ['6'], ['5'], ['4'], ['3'], ['2'], '-1'], 'Mul', ['2'], ['7'], ['13'], ['17'], ['19'], ['23']], 'expression11': ['Equality', 'Add', '2', '7', '81']}","{'expression0': ['11'], 'expression1': ['i'], 'expression2': ['Add', '11', 'Mul', ['-1'], ['i']], 'expression3': ['Equality', 'Add', '12', 'Mul', ['-1'], ['Add', '11', 'Mul', ['-1'], ['i']], 'Add', 'i', '1'], 'expression4': ['i'], 'expression5': ['Add', '1', 'i'], 'expression6': ['Equality', 'Add', 'i', '12', '11'], 'expression7': ['Equality', 'Equality', 'Equality', 'N', '1352078', 'Mul', ['Mul', ['23'], ['22'], ['21'], ['20'], ['19'], ['18'], ['17'], ['16'], ['15'], ['14'], ['13']], ['Pow', 'Mul', ['11'], ['10'], ['9'], ['8'], ['7'], ['6'], ['5'], ['4'], ['3'], ['2'], ['1'], '-1'], 'Mul', ['23'], ['19'], ['17'], ['13'], ['7'], ['2']], 'expression8': ['Equality', 'Add', '23', '19', '81']}",{}
"{'expression0': [""<class 'sympy.series.order.Order'>""], 'expression1': ['5'], 'expression2': ['Mul', ['60'], ['pi'], ['Pow', '180', '-1']], 'expression3': ['P'], 'expression4': ['Equality', 'Mul', ['O'], ['Pow', 'P', '2'], 'Mul', ['m'], ['Pow', 'n', '-1']], 'expression5': ['m'], 'expression6': ['n'], 'expression7': ['Add', 'm', 'n']}","{'expression0': [""<class 'sympy.series.order.Order'>""], 'expression1': ['5'], 'expression2': ['-120'], 'expression3': ['Mul', ['5'], ['Pow', '4', '-1']], 'expression4': ['Mul', ['Mul', ['5'], ['Pow', '3', '1/2']], ['Pow', '4', '-1']], 'expression5': ['Mul', ['5'], ['Pow', '8', '-1']], 'expression6': ['Mul', ['Mul', ['5'], ['Pow', '3', '1/2']], ['Pow', '8', '-1']], 'expression7': ['Mul', ['5'], ['Pow', '8', '-1']], 'expression8': ['Mul', ['5'], ['Pow', '32', '-1']], 'expression9': ['Mul', ['Mul', ['5'], ['Pow', '3', '1/2']], ['Pow', '32', '-1']], 'expression10': ['Mul', ['5'], ['Pow', '64', '-1']], 'expression11': ['Mul', ['Mul', ['5'], ['Pow', '3', '1/2']], ['Pow', '64', '-1']], 'expression12': ['Equality', 'Add', '5', 'Mul', ['5'], ['Pow', '4', '-1'], 'Mul', ['315'], ['Pow', '64', '-1']], 'expression13': ['Equality', 'Add', '0', 'Mul', ['Mul', ['5'], ['Pow', '3', '1/2']], ['Pow', '4', '-1'], 'Mul', ['Mul', ['105'], ['Pow', '3', '1/2']], ['Pow', '64', '-1']], 'expression14': ['Equality', 'Pow', 'Mul', ['1'], ['Pow', '2', '-1'], '6', 'Mul', ['1'], ['Pow', '64', '-1']], 'expression15': ['Equality', 'Mul', ['1'], ['Pow', 'Add', '1', 'Mul', ['-1'], ['1'], ['Pow', '64', '-1'], '-1'], 'Mul', ['64'], ['Pow', '63', '-1']], 'expression16': ['P'], 'expression17': ['x'], 'expression18': ['y'], 'expression19': ['Mul', ['a'], ['Pow', 'Add', '1', 'Mul', ['-1'], ['r'], '-1']], 'expression20': ['Equality', 'Mul', ['315'], ['Pow', '64', '-1'], ['64'], ['Pow', '63', '-1'], '5'], 'expression21': ['Equality', 'Mul', ['Mul', ['105'], ['Pow', '3', '1/2']], ['Pow', '64', '-1'], ['64'], ['Pow', '63', '-1'], 'Mul', ['Mul', ['5'], ['Pow', '3', '1/2']], ['Pow', '3', '-1']], 'expression22': ['P'], 'expression23': [""I don't understand this\n(5,5√(3)/3)\n~~~~^""], 'expression24': ['Equality', 'Mul', ['O'], ['Pow', 'P', '2'], 'Mul', ['100'], ['Pow', '3', '-1']], 'expression25': ['{103}']}","{'expression0': ['Mul', ['5'], ['1'], ['Pow', 'Add', '1', 'Mul', ['-1'], ['exp((pi*i)/3)'], ['Pow', '2', '-1'], '-1']], 'expression1': ['Equality', 'Equality', 'Equality', 'Mul', ['5'], ['Pow', 'Add', '1', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], ['exp((pi*i)/3)'], '-1'], 'Mul', ['5'], ['Pow', 'Add', '1', 'Mul', ['-1'], ['Add', '1', 'Mul', ['i'], ['Pow', '3', '1/2']], ['Pow', '4', '-1'], '-1'], 'Mul', ['20'], ['Pow', 'Add', '3', 'Mul', ['-1'], ['i'], ['Pow', '3', '1/2'], '-1'], 'Add', '5', 'Mul', ['Mul', ['5'], ['i'], ['Pow', '3', '1/2']], ['Pow', '3', '-1']], 'expression2': ['Equality', 'Equality', 'Pow', 'Abs((5*sqrt(3)*i + 5)/3)', '2', 'Add', '25', 'Mul', ['25'], ['Pow', '3', '-1'], 'Mul', ['100'], ['Pow', '3', '-1']], 'expression3': ['Equality', 'Add', '100', '3', '103']}","{'expression0': ['3'], 'expression1': ['Equality', 'Pow', 'Mul', ['1'], ['Pow', '2', '-1'], '3', 'Mul', ['1'], ['Pow', '8', '-1']], 'expression2': ['Equality', 'Equality', 'Mul', ['8'], ['Pow', '9', '-1'], 'Mul', ['7'], ['Pow', '8', '-1'], ['64'], ['Pow', '63', '-1'], 'Mul', ['8'], ['Pow', '9', '-1']], 'expression3': [""I don't understand this\n(5+5/4-5/8, 0+5√(3)/4+5√(3)/8)\n~~~~~~~~~~~~~~~^""], 'expression4': [""I don't understand this\n(45/8, 15√(3)/8)\n~~~~~~~~~^""], 'expression5': ['8/9'], 'expression6': [""I don't understand this\n(5, 5√(3)/3)\n~~~~~^""], 'expression7': ['I expected something else here\n\n^'], 'expression8': ['{103}']}","{'expression0': ['(0, 0)'], 'expression1': ['a'], 'expression2': ['r'], 'expression3': ['(0 < r) < 1'], 'expression4': ['r'], 'expression5': ['n'], 'expression6': ['v_n'], 'expression7': ['Mul', ['a'], ['Pow', 'r', 'Add', 'n', '-1']], 'expression8': [""I don't understand this\n⟨cos(n*60*π/180),sin(n*60*π/180)⟩\n^""], 'expression9': ['P'], 'expression10': ['Sum', 'v_i', 'over', '(i, 1, oo)'], 'expression11': ['x'], 'expression12': [""I don't understand this\na(cos0*π/180+rcos60*π/180 + r^2cos120*π/180+r^3cos180*π/180+r^4cos240*π/180+r^5cos300*π/180+r^6cos360*π/180+⋯)\n~~~~~~~^""], 'expression13': ['Equality', 'Mul', ['a'], ['S'], ['Sum', 'Pow', 'r', 'Mul', ['6'], ['n'], 'over', '(n, 0, oo)'], 'Mul', ['Mul', ['a'], ['S']], ['Pow', 'Add', '1', 'Mul', ['-1'], ['Pow', 'r', '6'], '-1']], 'expression14': ['Equality', 'S', 'Add', 'cos(0*pi/180)', 'Mul', ['r'], ['cos(60*pi/180)']], 'expression15': ['y'], 'expression16': ['P'], 'expression17': ['Mul', ['Mul', ['a'], ['T']], ['Pow', 'Add', '1', 'Mul', ['-1'], ['Pow', 'r', '6'], '-1']], 'expression18': ['Equality', 'T', 'Add', 'sin(0*pi/180)', 'Mul', ['r'], ['sin(60*pi/180)']], 'expression19': ['Equality', 'r', 'Mul', ['1'], ['Pow', '2', '-1']], 'expression20': ['Equality', 'a', '5'], 'expression21': ['False'], 'expression22': ['Equality', 'Equality', 'T', 'Add', '0', 'Mul', ['Pow', '3', '1/2'], ['Pow', '4', '-1'], 'Mul', ['Mul', ['21'], ['Pow', '3', '1/2']], ['Pow', '64', '-1']], 'expression23': ['P'], 'expression24': [""I don't understand this\n(5S/1-1/64, 5T/1-1/64)==(5,5√(3)/3)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression25': ['P'], 'expression26': ['Equality', 'Add', '25', 'Mul', ['25'], ['Pow', '3', '-1'], 'Mul', ['100'], ['Pow', '3', '-1']], 'expression27': ['Equality', 'Add', '100', '3', '103']}","{'expression0': ['Equality', 'Mul', ['40'], ['Pow', '9', '-1'], 'Mul', ['40'], ['Pow', '9', '-1']], 'expression1': ['Equality', 'Mul', ['Mul', ['40'], ['Pow', '9', '-1']], ['Pow', '2', '-1'], 'Mul', ['20'], ['Pow', '9', '-1']], 'expression2': ['Mul', ['10'], ['Pow', '9', '-1']], 'expression3': ['Equality', 'Equality', 'Add', 'Mul', ['40'], ['Pow', '9', '-1'], 'Mul', ['10'], ['Pow', '9', '-1'], 'Mul', ['45'], ['Pow', '9', '-1'], '5'], 'expression4': ['Equality', 'Equality', 'Add', 'Mul', ['Mul', ['10'], ['Pow', '3', '1/2']], ['Pow', '9', '-1'], 'Mul', ['Mul', ['5'], ['Pow', '3', '1/2']], ['Pow', '9', '-1'], 'Mul', ['Mul', ['15'], ['Pow', '3', '1/2']], ['Pow', '9', '-1'], 'Mul', ['Mul', ['5'], ['Pow', '3', '1/2']], ['Pow', '3', '-1']], 'expression5': ['Equality', 'Equality', 'Mul', ['O'], ['Pow', 'P', '2'], 'Add', 'Pow', '5', '2', 'Mul', ['Pow', '5', '2'], ['Pow', '3', '-1'], 'Mul', ['100'], ['Pow', '3', '-1']], 'expression6': ['{103}']}"
"{'expression0': ['S'], 'expression1': ['512000000000'], 'expression2': ['S'], 'expression3': ['(a_1, a_2)'], 'expression4': ['a_3'], 'expression5': ['a_1'], 'expression6': ['a_2'], 'expression7': ['a_2'], 'expression8': ['a_3'], 'expression9': ['Mul', ['m'], ['Pow', 'n', '-1']], 'expression10': ['m'], 'expression11': ['n'], 'expression12': ['m']}","{'expression0': ['512000000000'], 'expression1': ['Mul', ['Pow', '2', '18'], ['Pow', '5', '9']], 'expression2': ['a_1'], 'expression3': ['Mul', ['Pow', '2', 'b_1'], ['Pow', '5', 'c_1']], 'expression4': ['a_2'], 'expression5': ['Mul', ['Pow', '2', 'b_2'], ['Pow', '5', 'c_2']], 'expression6': ['a_3'], 'expression7': ['Mul', ['Pow', '2', 'b_3'], ['Pow', '5', 'c_3']], 'expression8': ['a_1'], 'expression9': ['a_2'], 'expression10': ['a_2'], 'expression11': ['a_3'], 'expression12': ['(b_1 <= b_2) <= b_3'], 'expression13': ['(c_1 <= c_2) <= c_3'], 'expression14': ['6859000'], 'expression15': ['Equality', 'Mul', ['Add', '18', '1'], ['Add', '9', '1'], '190'], 'expression16': ['1'], 'expression17': ['b_2'], 'expression18': ['2'], 'expression19': ['b_3'], 'expression20': ['(((0 <= b_1) < b_2 + 1) < b_3 + 2) <= 20'], 'expression21': ['3'], 'expression22': ['0'], 'expression23': ['20'], 'expression24': ['b_1'], 'expression25': ['Add', '1', 'b_2'], 'expression26': ['Add', '2', 'b_3'], 'expression27': ['1330'], 'expression28': ['c_1'], 'expression29': ['c_2'], 'expression30': ['c_3'], 'expression31': ['220'], 'expression32': ['Mul', ['Mul', ['1330'], ['220']], ['Pow', 'Pow', '190', '3', '-1']], 'expression33': ['Mul', ['77'], ['Pow', '1805', '-1']], 'expression34': ['77']}","{'expression0': ['b'], 'expression1': ['c'], 'expression2': ['(b_1, b_2, b_3)'], 'expression3': ['(b_1 <= b_2) <= b_3'], 'expression4': ['969'], 'expression5': ['19'], 'expression6': ['Mul', ['2'], ['171']], 'expression7': ['2'], 'expression8': ['b_i < b_j'], 'expression9': ['(b_i, b_i, b_j)'], 'expression10': ['(b_i, b_j, b_j)'], 'expression11': ['Equality', 'Add', '969', 'Mul', ['2'], ['171'], '1330'], 'expression12': ['c'], 'expression13': ['Equality', 'Add', '120', 'Mul', ['2'], ['45'], '220'], 'expression14': ['Mul', ['Mul', ['1330'], ['220']], ['Pow', 'Pow', '190', '3', '-1']], 'expression15': ['Mul', ['77'], ['Pow', '1805', '-1']], 'expression16': ['77']}","{'expression0': ['6859000'], 'expression1': ['3'], 'expression2': ['{b, a, c}'], 'expression3': ['{f, g, d}'], 'expression4': ['a'], 'expression5': ['b'], 'expression6': ['c'], 'expression7': ['2'], 'expression8': ['d'], 'expression9': ['f'], 'expression10': ['g'], 'expression11': ['5'], 'expression12': ['2'], 'expression13': ['18'], 'expression14': ['5'], 'expression15': ['9'], 'expression16': ['220'], 'expression17': ['d'], 'expression18': ['f'], 'expression19': ['g'], 'expression20': ['1330'], 'expression21': ['a'], 'expression22': ['b'], 'expression23': ['c'], 'expression24': ['3'], 'expression25': ['Mul', ['Mul', ['1330'], ['220']], ['Pow', 'Pow', '190', '3', '-1']], 'expression26': ['Mul', ['77'], ['Pow', '1805', '-1']], 'expression27': ['m'], 'expression28': ['77']}","{'expression0': ['512000000000'], 'expression1': ['Mul', ['Pow', '2', '18'], ['Pow', '5', '9']], 'expression2': ['2'], 'expression3': ['5'], 'expression4': ['a_1'], 'expression5': ['a_2'], 'expression6': ['a_3'], 'expression7': ['3'], 'expression8': ['2'], 'expression9': ['3'], 'expression10': ['5'], 'expression11': ['k'], 'expression12': ['a'], 'expression13': ['b'], 'expression14': ['c'], 'expression15': ['(((0 <= a) <= b) <= c) <= k'], 'expression16': ['a'], 'expression17': ['Add', '1', 'b'], 'expression18': ['Add', '2', 'c'], 'expression19': ['(((0 <= a) < b + 1) < c + 2) <= k + 2'], 'expression20': ['Add', '33', 'k'], 'expression21': ['a'], 'expression22': ['Add', '1', 'b'], 'expression23': ['Add', '2', 'c'], 'expression24': ['Add', 'k', 'Mul', ['33'], ['Pow', 'Add', '1', 'k', '-3']], 'expression25': ['512000000000'], 'expression26': ['False'], 'expression27': ['77']}",{}
"{'expression0': ['m'], 'expression1': ['n'], 'expression2': [""I don't understand this\n  ∙ (m+n,210)==1\n~~^""], 'expression3': [""I don't understand this\n  ∙m^m\n~~^""], 'expression4': ['Pow', 'n', 'n'], 'expression5': [""I don't understand this\n  ∙m\n~~^""], 'expression6': ['n'], 'expression7': ['Add', 'm', 'n']}","{'expression0': ['10000000256'], 'expression1': ['n'], 'expression2': ['Pow', 'p', '2'], 'expression3': ['210'], 'expression4': ['Equality', 'Equality', '11', 'n', '121'], 'expression5': ['242'], 'expression6': ['11'], 'expression7': ['I expected something else here\n11^242 |m^m\n~~~~~~~~~~~^'], 'expression8': ['Equality', 'm', 'Mul', ['11'], ['k']], 'expression9': ['k >= 22'], 'expression10': ['Equality', 'Equality', '1', '1', '1'], 'expression11': ['Equality', 'k', '26'], 'expression12': ['None'], 'expression13': ['{407}']}","{'expression0': ['m'], 'expression1': ['n'], 'expression2': ['Pow', 'm', 'm'], 'expression3': ['Pow', 'n', 'n'], 'expression4': ['m'], 'expression5': ['n'], 'expression6': ['p'], 'expression7': ['n'], 'expression8': ['p'], 'expression9': ['Pow', 'n', 'n'], 'expression10': ['Pow', 'm', 'm'], 'expression11': ['p'], 'expression12': ['m'], 'expression13': ['p'], 'expression14': ['n'], 'expression15': ['m'], 'expression16': ['Equality', 'k', 'Add', 'm', 'n'], 'expression17': ['k'], 'expression18': ['Equality', '210', 'Mul', ['2'], ['3'], ['5'], ['7']], 'expression19': ['2'], 'expression20': ['3'], 'expression21': ['5'], 'expression22': ['7'], 'expression23': ['n'], 'expression24': ['m'], 'expression25': ['n'], 'expression26': ['m'], 'expression27': ['n'], 'expression28': ['n'], 'expression29': ['11'], 'expression30': ['n'], 'expression31': ['Equality', 'Pow', '11', '2', '121'], 'expression32': ['Equality', 'n', 'Pow', '11', '2'], 'expression33': ['m'], 'expression34': ['11'], 'expression35': ['121'], 'expression36': ['Pow', 'm', 'm'], 'expression37': ['Equality', 'Equality', 'Pow', 'n', 'n', 'Pow', '121', '121', 'Pow', '11', '242'], 'expression38': ['m'], 'expression39': ['11'], 'expression40': ['242'], 'expression41': ['Equality', 'm', 'Mul', ['11'], ['m_0']], 'expression42': ['m_0 > 22'], 'expression43': ['Equality', 'Equality', 'k', 'Add', 'm', 'n', 'Mul', ['11'], ['Add', 'm_0', '11']], 'expression44': ['m_0 > 22'], 'expression45': ['Add', '11', 'm_0'], 'expression46': ['2'], 'expression47': ['3'], 'expression48': ['5'], 'expression49': ['7'], 'expression50': ['Equality', 'm_0', '26'], 'expression51': ['Equality', 'Add', 'm_0', '11', '37'], 'expression52': ['k'], 'expression53': ['Equality', 'n', '121'], 'expression54': ['Equality', 'Equality', 'k', 'Mul', ['11'], ['37'], '407'], 'expression55': ['n'], 'expression56': ['Equality', 'Equality', 'n', 'Pow', '13', '2', '169'], 'expression57': ['m'], 'expression58': ['13'], 'expression59': ['169'], 'expression60': ['Pow', 'm', 'm'], 'expression61': ['Equality', 'Equality', 'Pow', 'n', 'n', 'Pow', '169', '169', 'Pow', '13', '338'], 'expression62': ['m > 338'], 'expression63': ['Equality', 'Eq(k, m + n) > 169 + 338', '507'], 'expression64': ['n'], 'expression65': ['n >= 242'], 'expression66': ['(m > n) >= 242'], 'expression67': ['Equality', 'k >= 2*242', '484'], 'expression68': ['n'], 'expression69': ['k'], 'expression70': ['k'], 'expression71': ['407']}",{},{},{}
"{'expression0': ['(a, b, c)'], 'expression1': ['d'], 'expression2': ['Equality', 'f(x)', 'Add', 'Pow', 'x', '2', 'Mul', ['a'], ['x']], 'expression3': ['Equality', 'g(x)', 'Add', 'Pow', 'x', '2', 'Mul', ['c'], ['x']], 'expression4': ['(a, b, c)'], 'expression5': ['10'], 'expression6': ['d'], 'expression7': ['Equality', 'Equality', 'Mul', ['g'], ['f(2)'], 'Mul', ['g'], ['f(4)'], '0']}","{'expression0': ['Equality', 'f(2)', 'f(4)'], 'expression1': ['Equality', 'a', '-6'], 'expression2': ['b'], 'expression3': ['c'], 'expression4': ['g'], 'expression5': ['0'], 'expression6': ['d'], 'expression7': ['Equality', 'Pow', '21', '2', '441'], 'expression8': ['(f(2), f(4))'], 'expression9': ['g'], 'expression10': [""I don't understand this\nf(2)+f(4) == -c ∈[-10,10]\n~~~~~~~~~~~~~~~~^""], 'expression11': [""I don't understand this\n20 + 6a + 2b ∈[-10,10]\n~~~~~~~~~~~~~^""], 'expression12': [""I don't understand this\n3a + b ∈[-15,-5]\n~~~~~~~^""], 'expression13': ['Ne(a, -6)'], 'expression14': ['Equality', 'f(2)', 'f(4)'], 'expression15': ['69'], 'expression16': ['Equality', 'Add', '441', '69', '510']}","{'expression0': ['Equality', 'h(x)', 'Add', 'Pow', 'x', '2', 'Mul', ['c'], ['x']], 'expression1': ['Equality', 'Equality', 'Mul', ['g'], ['f(2)'], 'Mul', ['g'], ['f(4)'], '0'], 'expression2': ['Equality', 'Equality', 'Mul', ['h'], ['f(2)'], 'Mul', ['h'], ['f(4)'], 'Mul', ['-1'], ['d']], 'expression3': ['f(x)'], 'expression4': ['h(x)'], 'expression5': ['Equality', 'Mul', ['h'], ['f(x)'], 'Add', 'Pow', 'x', '4', 'Mul', ['2'], ['a'], ['Pow', 'x', '3']], 'expression6': ['Equality', 'Mul', ['h'], ['f(2)'], 'Mul', ['h'], ['f(4)']], 'expression7': ['Equality', 'Add', '16', 'Mul', ['16'], ['a'], 'Add', '256', 'Mul', ['128'], ['a']], 'expression8': ['Equality', 'Add', '240', 'Mul', ['112'], ['a'], '0'], 'expression9': ['Equality', 'Add', '120', 'Mul', ['56'], ['a'], '0'], 'expression10': ['Equality', 'Add', 'Mul', ['6'], ['Pow', 'a', '2'], 'Mul', ['2'], ['a'], ['b'], '0'], 'expression11': ['Equality', 'Add', 'Mul', ['6'], ['Pow', 'a', '2'], 'Mul', ['2'], ['a'], ['b'], '0'], 'expression12': ['Equality', 'Add', 'Mul', ['a'], ['Add', 'Mul', ['6'], ['a'], 'Mul', ['2'], ['b']], 'Mul', ['6'], ['Add', 'Mul', ['6'], ['a'], 'Mul', ['2'], ['b']], '0'], 'expression13': ['Equality', 'Mul', ['Add', 'a', '6'], ['Add', 'Mul', ['6'], ['a'], 'Mul', ['2'], ['b']], '0'], 'expression14': ['Equality', 'Add', 'a', '6', '0'], 'expression15': ['Equality', 'Add', 'Mul', ['6'], ['a'], 'Mul', ['2'], ['b'], '-20'], 'expression16': ['Equality', 'a', '-6'], 'expression17': ['441'], 'expression18': ['c'], 'expression19': ['77'], 'expression20': ['8'], 'expression21': ['Equality', 'Add', '441', '77', '510']}","{'expression0': ['(a, b, c)'], 'expression1': ['Add', 'Mul', ['-1'], ['g(f(2))'], 'g(f(4))'], 'expression2': ['d'], 'expression3': ['g(f(2))'], 'expression4': ['a'], 'expression5': ['b'], 'expression6': ['c'], 'expression7': ['Equality', 'c(a, b)', 'Add', 'Mul', ['-1'], ['6'], ['a'], 'Mul', ['-1'], ['2'], ['b']], 'expression8': ['[9, 10]'], 'expression9': ['[6, 7, 8, 9, 10]'], 'expression10': ['[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]'], 'expression11': ['[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]'], 'expression12': ['[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]'], 'expression13': ['[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]'], 'expression14': ['[-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]'], 'expression15': ['[-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]'], 'expression16': ['[-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4]'], 'expression17': ['[-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4]'], 'expression18': ['[-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1]'], 'expression19': ['[-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1]'], 'expression20': ['[-10, -9, -8, -7, -6, -5, -4, -3, -2]'], 'expression21': ['[-10, -9, -8, -7, -6, -5, -4, -3, -2]'], 'expression22': ['[-10, -9, -8, -7, -6, -5]'], 'expression23': ['[-10, -9, -8, -7, -6, -5]'], 'expression24': ['[-10, -9, -8]'], 'expression25': ['[-10, -9, -8]'], 'expression26': ['0'], 'expression27': ['510']}",{},{}
"{'expression0': ['n'], 'expression1': ['Add', 'Pow', '149', 'n', 'Mul', ['-1'], ['Pow', '2', 'n']], 'expression2': ['Mul', ['Pow', '3', '3'], ['Pow', '5', '5'], ['Pow', '7', '7']], 'expression3': ['n']}","{'expression0': ['v_p(n)'], 'expression1': ['p'], 'expression2': ['n'], 'expression3': ['Equality', 'Equality', 'Equality', '3', 'Mul', ['v_3'], ['Add', 'Pow', '149', 'n', 'Mul', ['-1'], ['Pow', '2', 'n']], 'Add', 'v_3(n)', 'v_3(147)', 'Add', 'v_3(n)', '1'], 'expression4': ['9'], 'expression5': ['n'], 'expression6': ['Equality', 'Equality', 'Equality', '7', 'Mul', ['v_7'], ['Add', 'Pow', '149', 'n', 'Mul', ['-1'], ['Pow', '2', 'n']], 'Add', 'v_7(n)', 'v_7(147)', 'Add', 'v_7(n)', '2'], 'expression7': ['16807'], 'expression8': ['n'], 'expression9': ['Equality', 'n', 'Mul', ['4'], ['c']], 'expression10': [""I don't understand this\n(necessitated by 149^n ≡ 2^n  5 in order to set up LTe)\n~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression11': ['Equality', 'Mul', ['v_5'], ['Add', 'Pow', '149', 'Mul', ['4'], ['c'], 'Mul', ['-1'], ['Pow', '2', 'Mul', ['4'], ['c']]], 'Mul', ['v_5'], ['Add', 'Pow', '149', 'Mul', ['4'], ['c'], 'Mul', ['-1'], ['Pow', '16', 'c']]], 'expression12': ['Equality', 'Pow', '149', '4', 'Mod(1, 25)'], 'expression13': ['Equality', 'Pow', '16', '1', 'Mod(16, 25)'], 'expression14': ['Equality', 'Equality', 'Mul', ['v_5'], ['Add', 'Pow', '149', 'Mul', ['4'], ['c'], 'Mul', ['-1'], ['Pow', '2', 'Mul', ['4'], ['c']]], 'Add', 'Mul', ['v_5'], ['Add', 'Pow', '149', '4', '-16'], 'v_5(c)', 'Add', '1', 'v_5(c)'], 'expression15': ['Mul', ['c'], ['Pow', 'Pow', '5', '4', '-1']], 'expression16': ['Mul', ['4'], ['Pow', '5', '4']], 'expression17': ['n'], 'expression18': ['9'], 'expression19': ['16807'], 'expression20': ['Mul', ['4'], ['Pow', '5', '4']], 'expression21': ['n'], 'expression22': ['n'], 'expression23': ['Equality', 'Mul', ['Pow', '3', '2'], ['Pow', '7', '5'], ['4'], ['Pow', '5', '4'], 'Mul', ['Pow', '2', '2'], ['Pow', '3', '2'], ['Pow', '5', '4'], ['Pow', '7', '5']], 'expression24': ['Equality', 'Mul', ['Add', '2', '1'], ['Add', '2', '1'], ['Add', '4', '1'], ['Add', '5', '1'], '270']}","{'expression0': ['n'], 'expression1': ['Add', 'Pow', '149', 'n', 'Mul', ['-1'], ['Pow', '2', 'n']], 'expression2': ['Equality', 'Add', '149', '-2', '147'], 'expression3': ['n'], 'expression4': ['Mul', ['3'], ['Pow', '7', '2']], 'expression5': ['n'], 'expression6': ['27'], 'expression7': ['9'], 'expression8': ['n'], 'expression9': ['823543'], 'expression10': ['16807'], 'expression11': ['3125'], 'expression12': ['5'], 'expression13': ['25'], 'expression14': ['0'], 'expression15': ['n'], 'expression16': ['5'], 'expression17': ['4'], 'expression18': ['4'], 'expression19': ['0'], 'expression20': ['4'], 'expression21': ['5'], 'expression22': ['25'], 'expression23': ['n'], 'expression24': ['3125'], 'expression25': ['Mul', ['Pow', '2', '2'], ['Pow', '5', '4']], 'expression26': ['Mul', ['Pow', '2', '2'], ['Pow', '3', '2'], ['Pow', '5', '4'], ['Pow', '7', '5']], 'expression27': ['Mul', ['3'], ['3'], ['5'], ['6']], 'expression28': ['{270}']}","{'expression0': ['v_p(n)'], 'expression1': ['p'], 'expression2': ['n'], 'expression3': ['27'], 'expression4': ['Equality', 'Mul', ['v_3'], ['Add', 'Pow', '149', '3', 'Mul', ['-1'], ['Pow', '2', '3']], '2'], 'expression5': ['3307941'], 'expression6': ['Mul', ['147'], ['Add', 'Pow', '149', '2', 'Mul', ['2'], ['149']]], 'expression7': ['Add', 'Pow', '149', '2', 'Mul', ['2'], ['149']], 'expression8': ['3'], 'expression9': ['9'], 'expression10': ['36197319879620190837'], 'expression11': ['27'], 'expression12': ['Equality', 'Add', 'Pow', '149', '9', 'Mul', ['-1'], ['Pow', '2', '9'], 'Mul', ['Add', 'Pow', '149', '3', 'Mul', ['-1'], ['Pow', '2', '3']], ['Add', 'Pow', '149', '6', 'Mul', ['Pow', '149', '3'], ['Pow', '2', '3']]], 'expression13': ['Equality', 'Add', '1', '1', 'Mod(0, 3)'], 'expression14': ['Equality', 'Equality', 'n', '9', 'Pow', '3', '2'], 'expression15': ['27'], 'expression16': ['Equality', 'n', 'Mul', ['a'], ['Pow', '3', 'b']], 'expression17': [""I don't understand this\n3 ∤a\n~~^""], 'expression18': ['b < 2'], 'expression19': ['Equality', 'Add', 'Pow', '149', 'Mul', ['a'], ['Pow', '3', 'b'], 'Mul', ['-1'], ['Pow', '2', 'Mul', ['a'], ['Pow', '3', 'b']], 'Mul', ['Add', 'Pow', '149', 'Pow', '3', 'b', 'Mul', ['-1'], ['Pow', '2', 'Pow', '3', 'b']], ['Sum', 'Mul', ['Pow', '149', 'Mul', ['Pow', '3', 'b'], ['Add', 'a', '-1']], ['Pow', '2', 'Mul', ['Pow', '3', 'b'], ['k']], 'over', '(k, 0, a - 1)']], 'expression20': [""I don't understand this\n±a 3 ≢0 3\n^""], 'expression21': ['Eq(v_3*(149**(3**b) - 2**(3**b)), b + 1) < 3'], 'expression22': ['823543'], 'expression23': ['Equality', 'Mul', ['v_7'], ['Add', 'Pow', '149', 'Pow', '7', 'k', 'Mul', ['-1'], ['Pow', '2', 'Pow', '7', 'k']], 'Add', 'k', '2'], 'expression24': ['k'], 'expression25': ['Equality', 'Mul', ['v_7'], ['Add', 'Pow', '149', 'Pow', '7', 'Add', 'k', '1', 'Mul', ['-1'], ['Pow', '2', 'Pow', '7', 'Add', 'k', '1']], 'Add', 'Mul', ['v_7'], ['Add', 'Pow', '149', 'Pow', '7', 'k', 'Mul', ['-1'], ['Pow', '2', 'Pow', '7', 'k']], 'Mul', ['v_7'], ['Sum', 'Mul', ['Pow', '2', 'Mul', ['i'], ['Pow', '7', 'k']], ['Pow', '149', 'Mul', ['Add', '6', 'Mul', ['-1'], ['i']], ['Pow', '7', 'k']], 'over', '(i, 0, 6)']], 'expression26': ['Equality', 'Mul', ['v_7'], ['Add', 'Pow', '149', 'Pow', '7', 'k', 'Mul', ['-1'], ['Pow', '2', 'Pow', '7', 'k']], 'Add', 'k', '2'], 'expression27': [""I don't understand this\nS(k) = ∑_i=0^6 2^i ·7^k ·149^(6 - i) ·7^k ≡7 ·2^6 ·7^k 7 ≡7 ·2^6 ·7^k 49\n~~~~~~~^""], 'expression28': ['k'], 'expression29': ['7'], 'expression30': ['49'], 'expression31': ['Equality', 'Mul', ['v_7'], ['S(k)'], '1'], 'expression32': ['16807'], 'expression33': ['n'], 'expression34': ['823543'], 'expression35': ['27'], 'expression36': ['3125'], 'expression37': ['149'], 'expression38': ['2'], 'expression39': ['5'], 'expression40': ['25'], 'expression41': ['Equality', 'Pow', '149', 'n', 'Mod(2**n, 5)'], 'expression42': ['Mul', ['n'], ['Pow', '4', '-1']], 'expression43': ['Equality', 'Equality', 'Pow', '149', 'n', 'Pow', '2', 'n', 'Mod(1, 5)'], 'expression44': ['Equality', 'Mul', ['v_5'], ['Add', 'Pow', '149', 'Mul', ['4'], ['Pow', '5', 'k'], 'Mul', ['-1'], ['Pow', '2', 'Mul', ['4'], ['Pow', '5', 'k']]], 'Add', 'k', '1'], 'expression45': ['Mul', ['Add', 'Pow', '149', '4', 'Mul', ['-1'], ['Pow', '2', '4']], ['Pow', '5', '-1']], 'expression46': ['Equality', 'Add', 'Pow', '149', '4', 'Mul', ['-1'], ['Pow', '2', '4'], 'Add', '1', 'Mul', ['-1'], ['Mod(16, 25)']], 'expression47': ['k'], 'expression48': [""I don't understand this\nv_5(149^4 ·5^k+1 - 2^4 ·5^k+1) = (k+1) + v_5 ( ∑_i=0^4 2^i ·4 ·5^k ·149^(4 - i) ·4 ·5^k )\n~~~~~~~~~~^""], 'expression49': ['Equality', 'Mul', ['transpose(S)'], ['k'], 'Sum', 'Mul', ['Pow', '2', 'Mul', ['i'], ['4'], ['Pow', '5', 'k']], ['Pow', '149', 'Mul', ['Add', '4', 'Mul', ['-1'], ['i']], ['4'], ['Pow', '5', 'k']], 'over', '(i, 0, 4)'], 'expression50': ['Equality', 'Mul', ['S'], ['k'], 'Sum', 'Pow', '2', 'Mul', ['4'], ['i'], ['Pow', '5', 'k'], 'over', '(i, 0, 4)'], 'expression51': ['5'], 'expression52': ['25'], 'expression53': ['Equality', 'Mul', ['S'], ['k'], 'Mod(0, 5)'], 'expression54': ['2'], 'expression55': ['25'], 'expression56': ['Equality', 'Mul', ['S'], ['0'], 'Mod(5, 25)'], 'expression57': ['Equality', 'Pow', '2', 'n', 'Mod(1, 25)'], 'expression58': ['n'], 'expression59': ['20'], 'expression60': ['k > 0'], 'expression61': ['Equality', 'Mul', ['S'], ['k'], 'Mod(5, 25)'], 'expression62': ['Equality', 'Mul', ['v_5'], ['transpose(S)'], ['k'], '1'], 'expression63': ['Mul', ['4'], ['Pow', '5', '4']], 'expression64': ['3125'], 'expression65': ['False'], 'expression66': ['Equality', 'Mul', ['Add', '2', '1'], ['Add', '2', '1'], ['Add', '4', '1'], ['Add', '5', '1'], '270']}","{'expression0': ['27'], 'expression1': ['149'], 'expression2': ['{n - 1}'], 'expression3': ['{n - 2}'], 'expression4': ['{n - 3}'], 'expression5': ['147'], 'expression6': ['3'], 'expression7': ['27'], 'expression8': ['3'], 'expression9': ['I expected something else here\n3^3 |147n\n~~~~~~~~~^'], 'expression10': ['I expected something else here\n3^2 |n\n~~~~~~^'], 'expression11': ['823543'], 'expression12': ['147'], 'expression13': ['Equality', '49', 'Pow', '7', '2'], 'expression14': ['823543'], 'expression15': ['7'], 'expression16': ['I expected something else here\n7^7 |147n\n~~~~~~~~~^'], 'expression17': ['I expected something else here\n7^5 |n\n~~~~~~^'], 'expression18': ['3125'], 'expression19': ['5'], 'expression20': ['Equality', 'Equality', 'Add', 'Pow', '149', 'n', 'Mul', ['-1'], ['Pow', '2', 'n'], 'Add', 'Pow', '4', 'n', 'Mul', ['-1'], ['Pow', '2', 'n'], 'Mod(2**n*(2**n - 1), 5)'], 'expression21': ['I expected something else here\n4 |n\n~~~~^'], 'expression22': ['Equality', 'n', 'Mul', ['4'], ['m']], 'expression23': ['Equality', 'Equality', 'Equality', 'c', 'Add', 'Pow', '149', '4', 'Mul', ['-1'], ['Pow', '2', '4'], 'Mul', ['Add', 'Pow', '149', '2', 'Mul', ['-1'], ['Pow', '2', '2']], ['Add', 'Pow', '149', '2', 'Pow', '2', '2'], 'Mul', ['147'], ['151'], ['22205']], 'expression24': ['Mul', ['1/5'], ['c']], 'expression25': ['5'], 'expression26': ['492884401'], 'expression27': ['16'], 'expression28': ['Add', '16', 'c'], 'expression29': ['16'], 'expression30': ['{m - 1}'], 'expression31': ['{m - 2}'], 'expression32': ['{m - 3}'], 'expression33': ['{m - 4}'], 'expression34': ['3125'], 'expression35': ['5'], 'expression36': ['I expected something else here\n5^5 |cm\n~~~~~~~^'], 'expression37': ['I expected something else here\n5^4 |m\n~~~~~~^'], 'expression38': ['I expected something else here\n4 *5^4 |n\n~~~~~~~~~^'], 'expression39': ['n'], 'expression40': ['Mul', ['Pow', '3', '2'], ['Pow', '2', '2'], ['Pow', '5', '4'], ['Pow', '7', '5']], 'expression41': ['Equality', 'Mul', ['Add', '1', '2'], ['Add', '1', '2'], ['Add', '1', '4'], ['Add', '1', '5'], '270']}",{}
"{'expression0': ['D'], 'expression1': ['\\overline{BC}'], 'expression2': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression3': ['\\overline{AD}'], 'expression4': ['Mul', ['\\angle'], ['B'], ['A'], ['C']], 'expression5': ['\\overline{AD}'], 'expression6': ['Mul', ['\\angle'], ['A'], ['B'], ['C']], 'expression7': ['Mul', ['\\angle'], ['A'], ['C'], ['B']], 'expression8': ['e'], 'expression9': ['F'], 'expression10': ['(False, False)'], 'expression11': ['Equality', 'Mul', ['C'], ['A'], '6'], 'expression12': ['Mul', ['\\triangle'], ['A'], ['E'], ['F']], 'expression13': [""I don't understand this\nm√(n)/p\n~^""], 'expression14': ['m'], 'expression15': ['p'], 'expression16': ['n'], 'expression17': ['Add', 'm', 'n']}","{'expression0': ['Mul', ['\\triangle'], ['A'], ['F'], ['E'], ['\\text{sim}'], ['\\triangle'], ['A'], ['G'], ['H']], 'expression1': ['A'], 'expression2': ['AD'], 'expression3': ['Mul', ['\\triangle'], ['A'], ['F'], ['E']], 'expression4': ['AGH'], 'expression5': ['Equality', 'Mul', ['Mul', ['A'], ['D']], ['Pow', '2', '-1'], 'Mul', ['Pow', '18', '1/2'], ['Pow', '2', '-1']], 'expression6': ['Mul', ['\\triangle'], ['A'], ['F'], ['E']], 'expression7': ['Mul', ['\\triangle'], ['A'], ['G'], ['H']], 'expression8': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression9': ['Mul', ['Mul', ['3'], ['Pow', '7', '1/2']], ['Pow', '2', '-1']], 'expression10': ['Equality', 'Equality', 'Mul', ['G'], ['B'], 'Mul', ['H'], ['C'], '1'], 'expression11': ['Equality', 'Mul', ['A'], ['G'], ['H'], 'Mul', ['A'], ['B'], ['C']], 'expression12': ['Mul', ['\\triangle'], ['A'], ['B'], ['C']], 'expression13': ['Equality', 'Mul', ['Mul', ['15'], ['Pow', '7', '1/2']], ['Pow', '14', '-1'], '36']}","{'expression0': ['M_A'], 'expression1': ['M_B'], 'expression2': ['M_C'], 'expression3': ['BC'], 'expression4': ['CA'], 'expression5': ['AB'], 'expression6': ['Equality', 'Equality', 'Mul', ['M_A'], ['B'], 'Mul', ['M_A'], ['C'], 'Mul', ['M_A'], ['I']], 'expression7': ['Equality', 'Equality', 'Equality', 'Add', 'Mul', ['A'], ['B'], ['M_A'], ['C'], 'Mul', ['A'], ['C'], ['M_A'], ['B'], 'Mul', ['B'], ['C'], ['M_A'], ['A'], 'Mul', ['M_A'], ['A'], 'Mul', ['2'], ['M_A'], ['I']], 'expression8': ['Equality', 'Mul', ['A'], ['I'], 'Mul', ['I'], ['M_A']], 'expression9': ['Mul', ['f'], ['o'], ['n'], ['t'], ['s'], ['i'], ['z'], ['E'], ['10'], ['p'], ['t']], 'expression10': ['200'], 'expression11': ['(0, 0)'], 'expression12': ['(5, 0)'], 'expression13': ['I expected something else here\n(Circle(B, 4), Circle(C, 6), 0)\n~~~~~~~~~^'], 'expression14': ['(P, A*rotate(90, P), B, I)'], 'expression15': ['(P, A*rotate(90, P), C, I)'], 'expression16': ['I expected something else here\n(Line(A, I, 20), circumcircle(A, B, C), 1)\n~~~~~~~^'], 'expression17': ['I expected something else here\n(Line(B, I, 20), circumcircle(A, B, C), 1)\n~~~~~~~^'], 'expression18': ['I expected something else here\n(Line(C, I, 20), circumcircle(A, B, C), 1)\n~~~~~~~^'], 'expression19': [""('$A$', A, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression20': [""('$B$', B, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression21': [""('$C$', C, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression22': [""('$D$', D, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression23': [""('$e$', e, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression24': [""('$F$', F, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression25': [""('$I$', I, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression26': [""('$M_A$', MA, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression27': [""('$M_B$', MB, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression28': [""('$M_C$', MC, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression29': ['Mul', ['\\triangle'], ['D'], ['E'], ['F']], 'expression30': ['Mul', ['\\triangle'], ['M_A'], ['M_B'], ['M_C']], 'expression31': ['I'], 'expression32': ['2'], 'expression33': ['D'], 'expression34': ['M_AI'], 'expression35': ['Equality', 'Equality', 'Equality', 'Mul', ['Mul', ['I'], ['D']], ['Pow', 'Mul', ['D'], ['M_A'], '-1'], 'Mul', ['Mul', ['B'], ['I']], ['Pow', 'Mul', ['B'], ['M_A'], '-1'], ['sin(I*B*C*\\angle)'], ['Pow', 'sin(B*C*M_A*\\angle)', '-1'], 'Mul', ['Mul', ['B'], ['I']], ['Pow', 'Mul', ['A'], ['I'], '-1'], ['sin((B*\\angle)/2)'], ['Pow', 'sin((A*\\angle)/2)', '-1'], '1'], 'expression36': ['\\overline{M_BM_C}'], 'expression37': ['\\overline{AI}'], 'expression38': ['\\overline{eF}'], 'expression39': ['\\overline{AD}'], 'expression40': ['Equality', 'Mul', ['I'], ['D'], 'Mul', ['Mul', ['A'], ['I']], ['Pow', '2', '-1']], 'expression41': ['\\overline{eF}'], 'expression42': ['Mul', ['\\triangle'], ['I'], ['M_B'], ['M_C']], 'expression43': ['\\blacksquare'], 'expression44': ['[M_AM_BM_C]'], 'expression45': ['Equality', 'Equality', 'Mul', ['A'], ['E'], ['F'], 'Mul', ['D'], ['E'], ['F'], 'Mul', ['1'], ['Pow', '4', '-1'], ['M_A'], ['M_B'], ['M_C']], 'expression46': ['Equality', 'R', 'Mul', ['8'], ['Pow', 'Pow', '7', '1/2', '-1']], 'expression47': ['Equality', 'Equality', 'Mul', ['M_A'], ['M_B'], ['M_C'], 'Mul', ['2'], ['64'], ['Pow', '7', '-1'], ['5'], ['Pow', 'Pow', '32', '1/2', '-1'], ['3'], ['Pow', '4', '-1'], ['Pow', '7', '1/2'], ['Pow', 'Pow', '8', '1/2', '-1'], 'Mul', ['Mul', ['30'], ['Pow', '7', '1/2']], ['Pow', '7', '-1']], 'expression48': ['Equality', 'Equality', 'Mul', ['M_A'], ['M_B'], ['M_C'], 'Mul', ['2'], ['64'], ['Pow', '7', '-1'], ['5'], ['Pow', 'Pow', '32', '1/2', '-1'], ['3'], ['Pow', '4', '-1'], ['Pow', '7', '1/2'], ['Pow', 'Pow', '8', '1/2', '-1'], 'Mul', ['Mul', ['30'], ['Pow', '7', '1/2']], ['Pow', '7', '-1']], 'expression49': ['Equality', 'Equality', 'Mul', ['M_A'], ['M_B'], ['M_C'], 'Mul', ['2'], ['64'], ['Pow', '7', '-1'], ['5'], ['Pow', 'Pow', '32', '1/2', '-1'], ['3'], ['Pow', '4', '-1'], ['Pow', '7', '1/2'], ['Pow', 'Pow', '8', '1/2', '-1'], 'Mul', ['Mul', ['30'], ['Pow', '7', '1/2']], ['Pow', '7', '-1']], 'expression50': ['Equality', 'Mul', ['A'], ['E'], ['F'], 'Mul', ['Mul', ['15'], ['Pow', '7', '1/2']], ['Pow', '14', '-1']], 'expression51': ['36']}","{'expression0': ['\\overline{BC}'], 'expression1': ['B'], 'expression2': ['C'], 'expression3': ['(5, 0)'], 'expression4': ['ABC'], 'expression5': ['Equality', 's', 'Mul', ['15'], ['Pow', '2', '-1']], 'expression6': ['Equality', 'Equality', 'Mul', ['A'], ['B'], ['C'], 'Pow', 'Mul', ['Mul', ['15'], ['7'], ['5'], ['3']], ['Pow', 'Pow', '2', '4', '-1'], '1/2', 'Mul', ['Mul', ['15'], ['Pow', '7', '1/2']], ['Pow', '4', '-1']], 'expression7': ['Equality', 'Mul', ['Mul', ['Mul', ['15'], ['Pow', '7', '1/2']], ['Pow', '2', '-1']], ['Pow', '5', '-1'], 'Mul', ['Mul', ['3'], ['Pow', '7', '1/2']], ['Pow', '2', '-1']], 'expression8': ['A'], 'expression9': ['A'], 'expression10': ['Equality', 'Add', 'Pow', 'x', '2', 'Pow', 'Mul', ['Mul', ['3'], ['Pow', '7', '1/2']], ['Pow', '2', '-1'], '2', '16'], 'expression11': ['Equality', 'x', 'Mul', ['1'], ['Pow', '2', '-1']], 'expression12': ['Equality', 'Mul', ['4'], ['Pow', '6', '-1'], 'Mul', ['Mul', ['B'], ['D']], ['Pow', 'Mul', ['C'], ['D'], '-1']], 'expression13': ['Equality', 'Add', 'Mul', ['B'], ['D'], 'Mul', ['C'], ['D'], '5'], 'expression14': ['Equality', 'Mul', ['B'], ['D'], '2'], 'expression15': ['(2, 0)'], 'expression16': ['AeF'], 'expression17': [""I don't understand this\n(5/4, 3√(7)/4)\n~~~~~~~^""], 'expression18': ['Mul', ['-1'], ['Pow', '7', '1/2']], 'expression19': ['Mul', ['1'], ['Pow', 'Pow', '7', '1/2', '-1']], 'expression20': ['Equality', 'Add', 'y', 'Mul', ['-1'], ['Mul', ['3'], ['Pow', '7', '1/2']], ['Pow', '4', '-1'], 'Mul', ['1'], ['Pow', 'Pow', '7', '1/2', '-1'], ['Add', 'x', 'Mul', ['-1'], ['5'], ['Pow', '4', '-1']]], 'expression21': ['Mul', ['\\angle'], ['A'], ['B'], ['C']], 'expression22': ['Mul', ['3'], ['Pow', '7', '1/2']], 'expression23': ['Equality', 'Equality', 'sin(A*B*C*\\angle)', 'Mul', ['Mul', ['Mul', ['3'], ['Pow', '7', '1/2']], ['Pow', '2', '-1']], ['Pow', '4', '-1'], 'Mul', ['Mul', ['3'], ['Pow', '7', '1/2']], ['Pow', '8', '-1']], 'expression24': ['Equality', 'Equality', 'cos(A*B*C*\\angle)', 'Mul', ['Mul', ['1'], ['Pow', '2', '-1']], ['Pow', '4', '-1'], 'Mul', ['1'], ['Pow', '8', '-1']], 'expression25': ['Equality', 'Mul', ['Mul', ['Mul', ['3'], ['Pow', '7', '1/2']], ['Pow', '8', '-1']], ['Pow', 'Add', '1', 'Mul', ['1'], ['Pow', '8', '-1'], '-1'], 'Mul', ['Pow', '7', '1/2'], ['Pow', '3', '-1']], 'expression26': ['B'], 'expression27': ['Equality', 'y', 'Mul', ['Pow', '7', '1/2'], ['Pow', '3', '-1'], ['x']], 'expression28': ['C'], 'expression29': ['Equality', 'y', 'Mul', ['-1'], ['1'], ['Pow', 'Pow', '7', '1/2', '-1'], ['Add', 'x', '-5']], 'expression30': ['e'], 'expression31': [""I don't understand this\n(3,√(7))\n~~~^""], 'expression32': ['F'], 'expression33': [""I don't understand this\n(1/2, 9/2√(7))\n~~~~~~~~~^""], 'expression34': ['Mul', ['Mul', ['E'], ['F'], ['Mul', ['A'], ['D']], ['Pow', '2', '-1']], ['Pow', '2', '-1']], 'expression35': ['Mul', ['Mul', ['A'], ['D']], ['Pow', '2', '-1']], 'expression36': ['Equality', 'Mul', ['E'], ['F'], 'Mul', ['Mul', ['5'], ['Pow', '2', '1/2']], ['Pow', 'Pow', '7', '1/2', '-1']], 'expression37': ['Equality', 'Mul', ['A'], ['D'], 'Mul', ['3'], ['Pow', '2', '1/2']], 'expression38': ['Equality', 'Equality', 'Mul', ['A'], ['E'], ['F'], 'Mul', ['15'], ['Pow', 'Mul', ['2'], ['Pow', '7', '1/2'], '-1'], 'Mul', ['Mul', ['15'], ['Pow', '7', '1/2']], ['Pow', '14', '-1']], 'expression39': ['36']}","{'expression0': ['None'], 'expression1': ['BC'], 'expression2': ['Equality', 'y', '0'], 'expression3': ['Equality', 'cos(A*B*C*\\angle)', 'Mul', ['1'], ['Pow', '8', '-1']], 'expression4': ['Equality', 'tan(A*B*C*\\angle)', 'Mul', ['3'], ['Pow', '7', '1/2']], 'expression5': ['A'], 'expression6': ['Equality', 'y', 'Mul', ['3'], ['x'], ['Pow', '7', '1/2']], 'expression7': ['AB'], 'expression8': ['x'], 'expression9': ['Mul', ['8'], ['x']], 'expression10': ['Equality', 'x', 'Mul', ['1'], ['Pow', '2', '-1']], 'expression11': [""I don't understand this\nA==(1/2,3√(7)/2)\n~~~~~~~~~^""], 'expression12': ['None'], 'expression13': ['None'], 'expression14': ['None'], 'expression15': [""I don't understand this\nM==(5/4,3√(7)/4)\n~~~~~~~~~^""], 'expression16': ['Equality', 'cos(A*B*C*\\angle)', 'Mul', ['1'], ['Pow', '8', '-1']], 'expression17': ['Equality', 'cos((A*B*C*\\angle)/2)', 'Mul', ['3'], ['Pow', '4', '-1']], 'expression18': ['Equality', 'cos(A*B*C*\\angle)', 'Mul', ['3'], ['Pow', '4', '-1']], 'expression19': ['Equality', 'cos((A*B*C*\\angle)/2)', 'Mul', ['Pow', '14', '1/2'], ['Pow', '4', '-1']], 'expression20': ['AD'], 'expression21': ['Equality', 'Mul', ['-1'], ['Mul', ['Mul', ['3'], ['Pow', '7', '1/2']], ['Pow', '2', '-1']], ['Pow', 'Add', '2', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1'], '-1'], 'Mul', ['-1'], ['Pow', '7', '1/2']], 'expression22': ['Mul', ['Pow', '7', '1/2'], ['Pow', '7', '-1']], 'expression23': [""I don't understand this\n(5/4,3√(7)/4)\n~~~~~~^""], 'expression24': ['Equality', 'y', 'Add', 'Mul', ['Pow', '7', '1/2'], ['Pow', '7', '-1'], ['x'], 'Mul', ['Mul', ['4'], ['Pow', '7', '1/2']], ['Pow', '7', '-1']], 'expression25': ['Equality', 'cos(I*B*C*\\angle)', 'Mul', ['3'], ['Pow', '4', '-1']], 'expression26': ['BI'], 'expression27': ['Equality', 'y', 'Mul', ['Pow', '7', '1/2'], ['Pow', '3', '-1'], ['x']], 'expression28': ['Equality', 'x', '3'], 'expression29': [""I don't understand this\ne==(3, √(7))\n~~~~~~~^""], 'expression30': ['Equality', 'cos(I*B*C*\\angle)', 'Mul', ['Pow', '14', '1/2'], ['Pow', '4', '-1']], 'expression31': ['CI'], 'expression32': ['Equality', 'y', 'Add', 'Mul', ['-1'], ['Mul', ['x'], ['Pow', '7', '1/2']], ['Pow', '7', '-1'], 'Mul', ['Mul', ['5'], ['Pow', '7', '1/2']], ['Pow', '7', '-1']], 'expression33': ['CI'], 'expression34': ['AD'], 'expression35': ['Equality', 'Add', 'Mul', ['-1'], ['Mul', ['x'], ['Pow', '7', '1/2']], ['Pow', '7', '-1'], 'Mul', ['Mul', ['5'], ['Pow', '7', '1/2']], ['Pow', '7', '-1'], 'Add', 'Mul', ['Mul', ['x'], ['Pow', '7', '1/2']], ['Pow', '7', '-1'], 'Mul', ['Mul', ['4'], ['Pow', '7', '1/2']], ['Pow', '7', '-1']], 'expression36': ['Equality', 'x', 'Mul', ['1'], ['Pow', '2', '-1']], 'expression37': [""I don't understand this\nF==(1/2,9√(7)/14)\n~~~~~~~~~^""], 'expression38': ['Equality', 'Equality', 'Mul', ['E'], ['F'], 'Pow', 'Add', 'Pow', 'Mul', ['5'], ['Pow', '2', '-1'], '2', 'Pow', 'Mul', ['Mul', ['5'], ['Pow', '7', '1/2']], ['Pow', '14', '-1'], '2', '1/2', 'Mul', ['Mul', ['5'], ['Pow', '14', '1/2']], ['Pow', '7', '-1']], 'expression39': ['Equality', 'Equality', 'Mul', ['M'], ['A'], 'Pow', 'Add', 'Pow', 'Mul', ['3'], ['Pow', '4', '-1'], '2', 'Pow', 'Mul', ['Mul', ['3'], ['Pow', '7', '1/2']], ['Pow', '4', '-1'], '2', '1/2', 'Mul', ['Mul', ['3'], ['Pow', '2', '1/2']], ['Pow', '2', '-1']], 'expression40': ['Mul', ['M'], ['A'], ['E'], ['F']], 'expression41': ['Equality', 'Equality', 'Mul', ['\\triangle'], ['A'], ['E'], ['F'], 'Mul', ['1'], ['Pow', '2', '-1'], ['Mul', ['3'], ['Pow', '2', '1/2']], ['Pow', '2', '-1'], ['Mul', ['5'], ['Pow', '14', '1/2']], ['Pow', '7', '-1'], 'Mul', ['Mul', ['15'], ['Pow', '7', '1/2']], ['Pow', '14', '-1']]}","{'expression0': ['AD'], 'expression1': ['Equality', 'Mul', ['3'], ['z'], 'Mul', ['2'], ['y']], 'expression2': ['CF'], 'expression3': ['Equality', 'Mul', ['5'], ['y'], 'Mul', ['6'], ['x']], 'expression4': ['Be'], 'expression5': ['Equality', 'Mul', ['5'], ['z'], 'Mul', ['4'], ['x']], 'expression6': ['None'], 'expression7': ['False'], 'expression8': ['False'], 'expression9': ['AD'], 'expression10': ['T'], 'expression11': ['eF'], 'expression12': ['(x, y, z)'], 'expression13': ['False'], 'expression14': ['\\overrightarrow{TM}'], 'expression15': ['(x - 1/2, y - 3/10, z - 1/5)'], 'expression16': ['Equality', 'Add', 'Mul', ['Pow', '5', '2'], ['Add', 'Mul', ['3'], ['Pow', '5', '-1'], ['Add', 'z', 'Mul', ['-1'], ['1'], ['Pow', '5', '-1']], 'Mul', ['2'], ['Pow', '5', '-1'], ['Add', 'y', 'Mul', ['-1'], ['3'], ['Pow', '10', '-1']]], 'Mul', ['Pow', '6', '2'], ['Add', 'Mul', ['-1'], ['Add', 'z', 'Mul', ['-1'], ['1'], ['Pow', '5', '-1']], 'Mul', ['2'], ['Pow', '5', '-1'], ['Add', 'x', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1']]], '0'], 'expression17': ['Equality', 'Add', 'Mul', ['8'], ['x'], 'Mul', ['-1'], ['2'], ['y'], '2'], 'expression18': ['Be'], 'expression19': ['Equality', 'Mul', ['5'], ['z'], 'Mul', ['4'], ['x']], 'expression20': ['Equality', 'Add', 'Mul', ['8'], ['x'], 'Mul', ['-1'], ['2'], ['y'], '2'], 'expression21': ['Equality', 'Add', 'x', 'y', '1'], 'expression22': ['Equality', 'x', 'Mul', ['2'], ['Pow', '3', '-1']], 'expression23': ['Equality', 'y', 'Mul', ['-1'], ['1'], ['Pow', '5', '-1']], 'expression24': ['Equality', 'z', 'Mul', ['8'], ['Pow', '15', '-1']], 'expression25': ['False'], 'expression26': ['CF'], 'expression27': ['Equality', 'Mul', ['5'], ['y'], 'Mul', ['6'], ['x']], 'expression28': ['Equality', 'Add', 'Mul', ['8'], ['x'], 'Mul', ['-1'], ['2'], ['y'], '2'], 'expression29': ['Equality', 'Add', 'x', 'y', '1'], 'expression30': ['Equality', 'x', 'Mul', ['3'], ['Pow', '7', '-1']], 'expression31': ['Equality', 'y', 'Mul', ['18'], ['Pow', '35', '-1']], 'expression32': ['Equality', 'z', 'Mul', ['2'], ['Pow', '35', '-1']], 'expression33': ['False'], 'expression34': ['False'], 'expression35': ['Equality', 'Equality', 'Mul', ['F'], ['exp(2)'], 'Add', 'Mul', ['-1'], ['25'], ['-1'], ['5'], ['Pow', '7', '-1'], ['10'], ['Pow', '21', '-1'], 'Mul', ['-1'], ['36'], ['5'], ['Pow', '21', '-1'], ['10'], ['Pow', '21', '-1'], 'Mul', ['50'], ['Pow', '7', '-1']], 'expression36': ['Equality', 'Mul', ['F'], ['E'], 'Mul', ['Mul', ['5'], ['Pow', '14', '1/2']], ['Pow', '7', '-1']], 'expression37': ['False'], 'expression38': ['Equality', 'Equality', 'Mul', ['A'], ['Pow', 'M', '2'], 'Add', 'Mul', ['-1'], ['25'], ['3'], ['Pow', '10', '-1'], ['1'], ['Pow', '5', '-1'], 'Mul', ['-1'], ['36'], ['-1'], ['1'], ['Pow', '2', '-1'], ['1'], ['Pow', '5', '-1'], 'Mul', ['9'], ['Pow', '2', '-1']], 'expression39': ['Equality', 'Mul', ['A'], ['M'], 'Mul', ['Mul', ['3'], ['Pow', '2', '1/2']], ['Pow', '2', '-1']], 'expression40': ['Mul', ['A'], ['M'], ['E'], ['F']], 'expression41': [""I don't understand this\n5√(14)/7×3√(2)/2/2==15√(7)/14==m+n+p==036\n~^""]}"
"{'expression0': ['P(x)'], 'expression1': ['Pow', 'x', '2'], 'expression2': ['1'], 'expression3': ['Equality', 'Mul', ['P'], ['P(x)'], '0'], 'expression4': ['(False, 4, a, b)'], 'expression5': ['Pow', 'Add', 'a', 'b', '2']}","{'expression0': ['Equality', 'P(3)', 'P(4)'], 'expression1': ['Equality', 'P(3)', 'P(4)'], 'expression2': ['Equality', 'Pow', 'Add', 'a', 'b', '2', '49'], 'expression3': ['Ne(P(3), P(4))'], 'expression4': ['(False, False)'], 'expression5': ['P'], 'expression6': ['Mul', ['Add', '3', 'a'], ['Pow', '2', '-1']], 'expression7': ['Equality', 'P(x)', 'Add', 'Pow', 'x', '2', 'Mul', ['-1'], ['Add', '3', 'a'], ['x']], 'expression8': ['Equality', 'Equality', 'Equality', 'Equality', 'Mul', ['P(3)'], ['P(4)'], 'c', 'Mul', ['P(3)'], ['Add', '4', 'Mul', ['-1'], ['4'], ['a']], 'a', 'Mul', ['Add', 'Mul', ['7'], ['P(3)'], '1'], ['Pow', '8', '-1']], 'expression9': ['Equality', 'P(4)', 'Mul', ['7'], ['Pow', '2', '-1']], 'expression10': ['(False, False)'], 'expression11': ['36'], 'expression12': ['Equality', 'Add', '49', '36', '85']}","{'expression0': ['P(x)'], 'expression1': ['m'], 'expression2': ['n'], 'expression3': ['Equality', 'P(x)', 'Add', 'Pow', 'x', '2', 'Mul', ['-1'], ['Add', 'm', 'n'], ['x']], 'expression4': ['Equality', 'Mul', ['P'], ['P(x)'], '0'], 'expression5': ['(False, 4, a, b)'], 'expression6': ['2'], 'expression7': ['Equality', 'P(x)', 'm'], 'expression8': ['2'], 'expression9': ['Equality', 'P(x)', 'n'], 'expression10': ['2'], 'expression11': ['Equality', 'Equality', 'P(3)', 'P(4)', 'm'], 'expression12': ['Equality', 'Equality', 'P(a)', 'P(b)', 'n'], 'expression13': ['Equality', 'Equality', 'P(3)', 'P(a)', 'm'], 'expression14': ['Equality', 'Equality', 'P(4)', 'P(b)', 'n'], 'expression15': ['Equality', 'Equality', 'P(3)', 'P(4)', 'm'], 'expression16': ['Equality', 'Equality', 'Equality', 'Equality', 'Add', '9', 'Mul', ['-1'], ['3'], ['Add', 'm', 'n'], 'Add', '16', 'Mul', ['-1'], ['4'], ['Add', 'm', 'n'], 'm', 'Add', 'm', 'n', '7'], 'expression17': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['a'], ['Add', 'm', 'n'], 'Add', 'Pow', 'b', '2', 'Mul', ['-1'], ['b'], ['Add', 'm', 'n'], 'n', 'Add', 'a', 'b', 'Add', 'm', 'n', '7'], 'expression18': ['Equality', 'Equality', 'Pow', 'Add', 'a', 'b', '2', 'Pow', '7', '2', '49'], 'expression19': ['Equality', 'Equality', 'P(3)', 'P(a)', 'm'], 'expression20': ['Equality', 'Equality', 'Equality', 'Equality', 'Add', '9', 'Mul', ['-1'], ['3'], ['Add', 'm', 'n'], 'Add', 'Pow', 'a', '2', 'Mul', ['-1'], ['a'], ['Add', 'm', 'n'], 'm', 'Add', 'a', '3', 'Add', 'm', 'n'], 'expression21': ['Equality', 'Equality', 'Equality', 'Equality', 'Add', '16', 'Mul', ['-1'], ['4'], ['Add', 'm', 'n'], 'Add', 'Pow', 'b', '2', 'Mul', ['-1'], ['b'], ['Add', 'm', 'n'], 'n', 'Add', 'b', '4', 'Add', 'm', 'n'], 'expression22': ['Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Equality', 'Add', '7', 'Mul', ['-1'], ['Add', 'm', 'n'], 'Add', 'n', 'Mul', ['-1'], ['m'], 'Mul', ['2'], ['n'], '7', 'n', 'Mul', ['7'], ['Pow', '2', '-1'], 'm', '-3'], 'expression23': ['Equality', 'Equality', 'Equality', 'Add', 'a', 'b', 'Add', 'Mul', ['2'], ['Add', 'm', 'n'], '-7', 'Add', 'Mul', ['2'], ['1'], ['Pow', '2', '-1'], '-7', '-6'], 'expression24': ['Equality', 'Equality', 'Pow', 'Add', 'a', 'b', '2', 'Pow', '-6', '2', '36'], 'expression25': ['Equality', 'Add', '49', '36', '85']}","{'expression0': ['Equality', 'P(x)', 'Add', 'Pow', 'x', '2', 'Mul', ['w'], ['x']], 'expression1': ['Ne(P(3), P(4))'], 'expression2': ['Equality', 'P(3)', 'P(4)'], 'expression3': ['Ne(P(3), P(4))'], 'expression4': ['Equality', 'Equality', 'Equality', 'w', 'Add', 'Mul', ['-1'], ['P(3)'], 'Mul', ['-1'], ['P(4)'], 'Add', 'Mul', ['-1'], ['Add', '9', 'Mul', ['3'], ['w']], 'Mul', ['-1'], ['Add', '16', 'Mul', ['4'], ['w']], 'Add', '-25', 'Mul', ['-1'], ['7'], ['w']], 'expression5': ['[3, 4]'], 'expression6': ['8'], 'expression7': ['Equality', 'w', 'Mul', ['Add', '-25', 'Mul', ['-1'], ['2'], ['z']], ['Pow', '8', '-1']], 'expression8': ['[3, 4]'], 'expression9': ['Mul', ['z'], ['P(3)'], ['P(4)'], ['Add', '9', 'Mul', ['3'], ['w']], ['Add', '16', 'Mul', ['4'], ['w']], ['Add', '9', 'Mul', ['3'], ['Add', '-25', 'Mul', ['-1'], ['2'], ['z']], ['Pow', '8', '-1']], ['Add', '16', 'Mul', ['4'], ['Add', '-25', 'Mul', ['-1'], ['2'], ['z']], ['Pow', '8', '-1']]], 'expression10': ['[3, 4]'], 'expression11': ['Equality', 'Mul', ['Add', 'Mul', ['-1'], ['3'], ['Pow', '8', '-1'], 'Mul', ['z'], ['Pow', '4', '-1']], ['7'], ['Pow', '2', '-1'], 'Add', 'Mul', ['-1'], ['21'], ['Pow', '16', '-1'], 'Mul', ['Mul', ['7'], ['z']], ['Pow', '8', '-1']], 'expression12': ['[3, 4]'], 'expression13': ['Equality', 'Mul', ['z'], ['Pow', '8', '-1'], 'Mul', ['-1'], ['21'], ['Pow', '16', '-1']], 'expression14': ['[3, 4]'], 'expression15': ['Equality', 'z', 'Mul', ['-1'], ['21'], ['Pow', '2', '-1']], 'expression16': ['[3, 4]'], 'expression17': ['w'], 'expression18': ['Equality', 'w', 'Mul', ['-1'], ['1'], ['Pow', '2', '-1']], 'expression19': ['P'], 'expression20': ['P(3)'], 'expression21': ['Equality', 'P(a)', 'P(3)'], 'expression22': ['Equality', 'P(b)', 'P(4)'], 'expression23': ['Equality', 'Add', '3', 'a', 'Mul', ['1'], ['Pow', '2', '-1']], 'expression24': ['Equality', 'Add', '4', 'b', 'Mul', ['1'], ['Pow', '2', '-1']], 'expression25': ['Equality', 'Equality', 'Add', 'a', 'b', 'Add', '1', '-3', '-6'], 'expression26': ['Equality', 'Pow', 'Add', 'a', 'b', '2', '36'], 'expression27': ['Equality', 'P(3)', 'P(4)'], 'expression28': ['Equality', 'w', '-7'], 'expression29': ['Equality', 'P(a)', 'P(b)'], 'expression30': [""I don't understand this\n(we would otherwise get P(a)==P(3)==P(4) implying a ∈{3,4} or vice versa)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression31': ['Equality', 'Equality', 'Add', 'a', 'b', 'Mul', ['-1'], ['w'], '7'], 'expression32': ['Equality', 'Pow', 'Add', 'a', 'b', '2', '49'], 'expression33': ['Equality', 'Add', '49', '36', '85']}","{'expression0': ['Equality', 'P(x)', 'Add', 'Pow', 'Add', 'x', 'Mul', ['-1'], ['c'], '2', 'Mul', ['-1'], ['d']], 'expression1': ['c'], 'expression2': ['d'], 'expression3': ['Equality', 'Mul', ['P'], ['P(x)'], 'Add', 'Pow', 'Add', 'Pow', 'Add', 'x', 'Mul', ['-1'], ['c'], '2', 'Mul', ['-1'], ['d'], '2', 'Mul', ['-1'], ['d']], 'expression4': ['0'], 'expression5': ['x'], 'expression6': [""I don't understand this\nx == +√( ±√(d), x == -√( ±√(d) + d + c) + c)\n~~~~~~^""], 'expression7': ['x'], 'expression8': ['Add', 'Pow', 'Add', 'Pow', 'd', '1/2', 'd', '1/2', 'c'], 'expression9': ['Add', 'Mul', ['-1'], ['Pow', 'Add', 'Pow', 'd', '1/2', 'd', '1/2'], 'c'], 'expression10': ['Add', 'Pow', 'Add', 'Mul', ['-1'], ['Pow', 'd', '1/2'], 'd', '1/2', 'c'], 'expression11': ['Add', 'Mul', ['-1'], ['Pow', 'Add', 'Mul', ['-1'], ['Pow', 'd', '1/2'], 'd', '1/2'], 'c'], 'expression12': ['3'], 'expression13': ['4'], 'expression14': ['a'], 'expression15': ['b'], 'expression16': ['Mul', ['C'], ['a'], ['s'], ['E'], ['1']], 'expression17': ['a'], 'expression18': ['b'], 'expression19': ['Mul', ['2'], ['c']], 'expression20': ['c'], 'expression21': ['3'], 'expression22': ['4'], 'expression23': ['Equality', 'Equality', 'Mul', ['2'], ['c'], 'Add', '3', '4', '7'], 'expression24': ['Equality', 'Equality', 'Pow', 'Add', 'a', 'b', '2', 'Pow', '7', '2', '49'], 'expression25': ['Mul', ['C'], ['a'], ['s'], ['E'], ['2']], 'expression26': ['Pow', 'Add', 'a', 'b', '2'], 'expression27': ['Equality', 'Add', 'Pow', 'Add', 'Pow', 'd', '1/2', 'd', '1/2', 'c', '4'], 'expression28': ['Equality', 'Add', 'Pow', 'Add', 'Mul', ['-1'], ['Pow', 'd', '1/2'], 'd', '1/2', 'c', '3'], 'expression29': ['Equality', 'Add', 'Pow', 'Add', 'Pow', 'd', '1/2', 'd', '1/2', 'c', 'Add', '1', 'Pow', 'Add', 'Mul', ['-1'], ['Pow', 'd', '1/2'], 'd', '1/2'], 'expression30': ['Equality', 'Add', 'Pow', 'Add', 'Pow', 'd', '1/2', 'd', '1/2', 'Mul', ['-1'], ['Pow', 'Add', 'Mul', ['-1'], ['Pow', 'd', '1/2'], 'd', '1/2'], '1'], 'expression31': ['Equality', 'Add', 'Pow', 'd', '1/2', 'd', '1'], 'expression32': ['Equality', 'Add', 'Mul', ['2'], ['d'], 'Mul', ['2'], ['c'], '1'], 'expression33': ['Equality', 'Pow', 'Mul', ['Add', 'd', 'c'], ['Add', 'd', 'c'], '1/2', 'Add', 'd', 'c'], 'expression34': ['Equality', 'Pow', 'Add', 'Pow', 'Add', 'd', 'c', '2', 'Mul', ['-1'], ['Pow', 'Pow', 'd', '1/2', '2'], '1/2', 'Add', 'd', 'c'], 'expression35': [""I don't understand this\n√(d^2 + 2dc + c^2 - d) == (d+c) - 1/2\n^""], 'expression36': [""argument of type 'Symbol' is not iterable""], 'expression37': ['False'], 'expression38': [""I don't understand this\n√(√(d) + d + c) == 15/4\n^""], 'expression39': [""I don't understand this\n√(-√(d) + d + c) == 11/4\n^""], 'expression40': ['a'], 'expression41': ['b'], 'expression42': [""I don't understand this\n-√(√(d) + d + c) - √(-√(d) + d + c) + 2c == -15/4 - 11/4 + 1/2 == -6\n~^""], 'expression43': ['None'], 'expression44': ['Equality', 'Add', '49', '36', '85']}","{'expression0': ['False'], 'expression1': ['P(3)'], 'expression2': ['P(4)'], 'expression3': ['P(x)'], 'expression4': ['Equality', 'P(3)', 'P(4)'], 'expression5': ['P(x)'], 'expression6': ['False'], 'expression7': ['None'], 'expression8': ['r'], 'expression9': ['7'], 'expression10': [""I don't understand this\nP(x) == (x-7/2)^2 + 11/4 ±i√(3)\n~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression11': ['Ne(P(3), P(4))'], 'expression12': ['P(3)'], 'expression13': ['P(4)'], 'expression14': ['P(x)'], 'expression15': [""argument of type 'Symbol' is not iterable""], 'expression16': ['x'], 'expression17': ['False'], 'expression18': ['None'], 'expression19': ['None'], 'expression20': ['P(x)'], 'expression21': ['Add', 'Mul', ['-1'], ['P(3)'], 'P(x)'], 'expression22': ['Add', 'Mul', ['-1'], ['P(4)'], 'P(x)'], 'expression23': ['P(x)'], 'expression24': ['Add', 'P(3)', 'P(4)'], 'expression25': ['Add', 'Mul', ['2'], ['Add', 'P(3)', 'P(4)'], '-7'], 'expression26': ['Add', 'P(3)', 'P(4)'], 'expression27': ['None'], 'expression28': ['None'], 'expression29': ['None'], 'expression30': ['None'], 'expression31': [""argument of type 'Symbol' is not iterable""], 'expression32': ['Add', '4', 'Mul', ['-1'], ['v']], 'expression33': [""argument of type 'Symbol' is not iterable""], 'expression34': ['None'], 'expression35': ['False'], 'expression36': [""argument of type 'Symbol' is not iterable""], 'expression37': ['None'], 'expression38': ['Equality', 'Add', 'Mul', ['2'], ['Add', 'Mul', ['7'], ['Pow', '2', '-1'], '-3'], '-7', '-6'], 'expression39': [""argument of type 'Symbol' is not iterable""], 'expression40': ['Equality', 'Add', 'Pow', '7', '2', 'Pow', '-6', '2', '85']}"
"{'expression0': ['ABC'], 'expression1': ['ω'], 'expression2': ['H'], 'expression3': ['ABC'], 'expression4': ['HBC'], 'expression5': ['H'], 'expression6': ['ω'], 'expression7': ['X'], 'expression8': ['Y'], 'expression9': ['(False, False)'], 'expression10': ['None'], 'expression11': ['ABC'], 'expression12': [""I don't understand this\nm√(n)\n~^""], 'expression13': ['m'], 'expression14': ['n'], 'expression15': ['n'], 'expression16': ['Add', 'm', 'n']}","{'expression0': ['Add', '0.600000000000000', 'fontsize(12)'], 'expression1': ['250'], 'expression2': ['10'], 'expression3': ['Add', '213', 'Mul', ['-1'], ['phi']], 'expression4': ['Add', '213', 'phi'], 'expression5': ['Add', '-57', 'theta'], 'expression6': ['(omega, L(H, Z, 0, 50))'], 'expression7': ['(omega, L(H, Z, 50, 0))'], 'expression8': [""I don't understand this\n(K–C^^omega^^c^^L(A,D,0,1))\n~~^""], 'expression9': [""I don't understand this\n(Y–K^^L(A,origin,0,1.5)^^L(X,D,0.7,3.5),fuchsia+0.4)\n~~^""], 'expression10': [""('$A$', A, ['_Rrel', '__abs__', '__add__', '__and__', '__annotations__', '__ceil__', '__class__', '__complex__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setstate__', '__sizeof__', '__slots__', '__str__', '__sub__', '__subclasshook__', '__sympy__', '__truediv__', '__trunc__', '__xor__', '_add_handler', '_args', '_as_mpf_op', '_as_mpf_val', '_assumptions', '_compare_pretty', '_constructor_postprocessor_mapping', '_diff_wrt', '_do_eq_sympify', '_eval_adjoint', '_eval_as_leading_term', '_eval_conjugate', '_eval_derivative', '_eval_derivative_matrix_lines', '_eval_derivative_n_times', '_eval_evalf', '_eval_expand_complex', '_eval_interval', '_eval_is_algebraic_expr', '_eval_is_composite', '_eval_is_extended_negative', '_eval_is_extended_positive', '_eval_is_extended_positive_negative', '_eval_is_meromorphic', '_eval_is_odd', '_eval_is_polynomial', '_eval_is_positive', '_eval_is_prime', '_eval_is_rational_function', '_eval_is_zero', '_eval_lseries', '_eval_nseries', '_eval_order', '_eval_power', '_eval_rewrite', '_eval_simplify', '_eval_subs', '_eval_transpose', '_evalf', '_exec_constructor_postprocessors', '_expand_hint', '_explicit_class_assumptions', '_from_mpmath', '_has', '_hashable_content', '_mhash', '_mpmath_', '_mul_handler', '_op_priority', '_parse_order', '_pow', '_prec', '_prop_handler', '_random', '_recursive_call', '_repr_disabled', '_repr_latex_', '_repr_png_', '_repr_svg_', '_rewrite', '_sage_', '_sorted_args', '_subs', '_to_mpmath', '_xreplace', 'adjoint', 'apart', 'args', 'args_cnc', 'as_base_exp', 'as_coeff_Add', 'as_coeff_Mul', 'as_coeff_add', 'as_coeff_exponent', 'as_coeff_mul', 'as_coefficient', 'as_coefficients_dict', 'as_content_primitive', 'as_dummy', 'as_expr', 'as_independent', 'as_leading_term', 'as_numer_denom', 'as_ordered_factors', 'as_ordered_terms', 'as_poly', 'as_powers_dict', 'as_real_imag', 'as_terms', 'aseries', 'assumptions0', 'atoms', 'cancel', 'canonical_variables', 'ceiling', 'class_key', 'coeff', 'cofactors', 'collect', 'combsimp', 'compare', 'compute_leading_term', 'conjugate', 'copy', 'could_extract_minus_sign', 'count', 'count_ops', 'default_assumptions', 'denominator', 'diff', 'dir', 'doit', 'dummy_eq', 'equals', 'evalf', 'expand', 'expr_free_symbols', 'extract_additively', 'extract_branch_factor', 'extract_multiplicatively', 'factor', 'factors', 'find', 'floor', 'fourier_series', 'fps', 'free_symbols', 'fromiter', 'func', 'gammasimp', 'gcd', 'getO', 'getn', 'has', 'has_free', 'has_xfree', 'integrate', 'invert', 'is_Add', 'is_AlgebraicNumber', 'is_Atom', 'is_Boolean', 'is_Derivative', 'is_Dummy', 'is_Equality', 'is_Float', 'is_Function', 'is_Indexed', 'is_Integer', 'is_MatAdd', 'is_MatMul', 'is_Matrix', 'is_Mul', 'is_Not', 'is_Number', 'is_NumberSymbol', 'is_Order', 'is_Piecewise', 'is_Point', 'is_Poly', 'is_Pow', 'is_Rational', 'is_Relational', 'is_Symbol', 'is_Vector', 'is_Wild', 'is_algebraic', 'is_algebraic_expr', 'is_antihermitian', 'is_commutative', 'is_comparable', 'is_complex', 'is_composite', 'is_constant', 'is_even', 'is_extended_negative', 'is_extended_nonnegative', 'is_extended_nonpositive', 'is_extended_nonzero', 'is_extended_positive', 'is_extended_real', 'is_finite', 'is_hermitian', 'is_hypergeometric', 'is_imaginary', 'is_infinite', 'is_integer', 'is_irrational', 'is_meromorphic', 'is_negative', 'is_noninteger', 'is_nonnegative', 'is_nonpositive', 'is_nonzero', 'is_number', 'is_odd', 'is_polar', 'is_polynomial', 'is_positive', 'is_prime', 'is_rational', 'is_rational_function', 'is_real', 'is_scalar', 'is_symbol', 'is_transcendental', 'is_zero', 'kind', 'lcm', 'leadterm', 'limit', 'limit_denominator', 'lseries', 'match', 'matches', 'n', 'normal', 'nseries', 'nsimplify', 'numerator', 'p', 'powsimp', 'primitive', 'q', 'radsimp', 'ratsimp', 'rcall', 'refine', 'removeO', 'replace', 'rewrite', 'round', 'separate', 'series', 'simplify', 'sort_key', 'subs', 'taylor_term', 'together', 'transpose', 'trigsimp', 'xreplace'])""], 'expression11': [""I don't understand this\n(origin–4*dir(57),fuchsia)\n~~~~~~~^""], 'expression12': ['(Arc(H, 3, 160, 200), royalblue)'], 'expression13': ['(Arc(H, 2, 30, 70), heavygreen)'], 'expression14': ['(Arc(H, 6, 220, 240), fuchsia)'], 'expression15': [""argument of type 'Symbol' is not iterable""], 'expression16': [""argument of type 'Symbol' is not iterable""], 'expression17': ['D'], 'expression18': ['A'], 'expression19': ['H'], 'expression20': [""argument of type 'Symbol' is not iterable""], 'expression21': [""I don't understand this\nAe == XD == √(5)\n~~~~~~~~~~~~^""], 'expression22': ['None'], 'expression23': ['False'], 'expression24': ['BHC'], 'expression25': ['(False, False)'], 'expression26': ['None'], 'expression27': ['ABC'], 'expression28': [""I don't understand this\nKH^2 == 9 == (KL - x)(KL + y) == (√(5) - x)(√(5) + y)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression29': [""I don't understand this\n4 == √(5)(y - x) - xy\n~~~~~^""], 'expression30': ['None'], 'expression31': [""I don't understand this\n14/√(5) == y - x\n~~~^""], 'expression32': ['None'], 'expression33': ['False'], 'expression34': ['None'], 'expression35': ['Equality', 'Mul', ['3'], ['Pow', '55', '1/2'], '58']}","{'expression0': [""argument of type 'Symbol' is not iterable""], 'expression1': ['H'], 'expression2': ['BC'], 'expression3': [""<class 'sympy.series.order.Order'>""], 'expression4': [""argument of type 'Symbol' is not iterable""], 'expression5': [""argument of type 'Symbol' is not iterable""], 'expression6': ['BHC'], 'expression7': [""<class 'sympy.series.order.Order'>""], 'expression8': ['BC'], 'expression9': [""argument of type 'Symbol' is not iterable""], 'expression10': [""argument of type 'Symbol' is not iterable""], 'expression11': [""argument of type 'Symbol' is not iterable""], 'expression12': ['AO'], 'expression13': ['XY'], 'expression14': ['XY'], 'expression15': ['XD'], 'expression16': ['DY'], 'expression17': ['4'], 'expression18': [""I don't understand this\nAH *HH' == XH *HY ⟹3 *HH' == 2 *6 ⟹HH' == 4\n~~~~~~~~~~~~~~~~~~^""], 'expression19': ['False'], 'expression20': ['False'], 'expression21': ['L'], 'expression22': ['A'], 'expression23': ['BC'], 'expression24': ['BC'], 'expression25': ['AHD'], 'expression26': [""I don't understand this\nAD == √(AH^2 - HD^2) == √(3^2 - 2^2) == √(5)\n~~~~~~^""], 'expression27': ['ODY'], 'expression28': ['False'], 'expression29': ['R'], 'expression30': [""I don't understand this\nR^2 - 16 == (R - √(5))^2 == R^2 - 2√(5) R + 5 ⟹R == 21√(5)/10\n~~~~~~~~~~~~~~~~~^""], 'expression31': [""argument of type 'Symbol' is not iterable""], 'expression32': [""argument of type 'Symbol' is not iterable""], 'expression33': ['False'], 'expression34': ['M'], 'expression35': ['BC'], 'expression36': [""I don't understand this\nBC == 2BM == 2√(R^2 - (3/2)^2) == 2√(441/20 - 9/4) == 6√(55)/5\n~~~~~~~~~~~~~~^""], 'expression37': ['ABC'], 'expression38': [""I don't understand this\nAL *BC/2 == 5 *6√(55)/5/2 == 3√(55)\n~~~~~~~~~~~~~~~~^""], 'expression39': ['Equality', 'Add', '3', '55', '58']}","{'expression0': ['AH'], 'expression1': ['ω'], 'expression2': ['P'], 'expression3': ['False'], 'expression4': [""argument of type 'Symbol' is not iterable""], 'expression5': [""argument of type 'Symbol' is not iterable""], 'expression6': [""argument of type 'Symbol' is not iterable""], 'expression7': [""argument of type 'Symbol' is not iterable""], 'expression8': [""argument of type 'Symbol' is not iterable""], 'expression9': ['BC'], 'expression10': ['HP'], 'expression11': ['A'], 'expression12': ['BC'], 'expression13': [""argument of type 'Symbol' is not iterable""], 'expression14': ['BCH'], 'expression15': [""I don't understand this\nω'\n^""], 'expression16': ['False'], 'expression17': ['BCP'], 'expression18': ['ω'], 'expression19': ['ω'], 'expression20': [""I don't understand this\nω'\n^""], 'expression21': ['R'], 'expression22': ['ω'], 'expression23': [""I don't understand this\nω'\n^""], 'expression24': [""<class 'sympy.series.order.Order'>""], 'expression25': [""argument of type 'Symbol' is not iterable""], 'expression26': ['M'], 'expression27': ['XY'], 'expression28': [""argument of type 'Symbol' is not iterable""], 'expression29': [""I don't understand this\n\\angleH == \\angleM == 90*π/180\n~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression30': ['False'], 'expression31': [""argument of type 'Symbol' is not iterable""], 'expression32': ['ω'], 'expression33': [""I don't understand this\nω'\n^""], 'expression34': ['AH'], 'expression35': [""argument of type 'Symbol' is not iterable""], 'expression36': ['XMO'], 'expression37': [""I don't understand this\nMO == √(R^2-16)\n~~~~~~^""], 'expression38': ['T'], 'expression39': [""<class 'sympy.series.order.Order'>""], 'expression40': [""argument of type 'Symbol' is not iterable""], 'expression41': [""argument of type 'Symbol' is not iterable""], 'expression42': [""argument of type 'Symbol' is not iterable""], 'expression43': [""I don't understand this\nR - √(R^2-16) == √(3^2 - 2^2) == √(5)\n~~~~^""], 'expression44': ['R'], 'expression45': [""I don't understand this\nR == 21/2√(5)\n~~~~~~~~~^""], 'expression46': ['H'], 'expression47': [""I don't understand this\ncos\\angleA == AH2R == √(5)7\n~~~~~~~~~~~~~~~~~~~~~~^""], 'expression48': [""I don't understand this\nsin\\angleA == √(1 - cos^2\\angleA) == 2√(11)7\n~~~~~~~~~~~~~~^""], 'expression49': [""I don't understand this\na == BC == 2R sin\\angleA == 6√(11)√(5)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression50': [""I don't understand this\n[ABC] == 1/2 a h_a == 1/2 *6√(11)/√(5) *5 == 3√(55)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression51': ['Equality', 'Add', '3', '55', '58']}","{'expression0': [""<class 'sympy.series.order.Order'>""], 'expression1': ['ABC'], 'expression2': ['R'], 'expression3': ['ABC'], 'expression4': [""I don't understand this\nω'\n^""], 'expression5': ['ω'], 'expression6': ['BC'], 'expression7': ['P'], 'expression8': ['H'], 'expression9': ['(BC, P)'], 'expression10': ['ω'], 'expression11': ['M'], 'expression12': ['XY'], 'expression13': ['P'], 'expression14': [""I don't understand this\nω, OA == O'H, OA || O'H\n^""], 'expression15': ['P'], 'expression16': ['False'], 'expression17': [""argument of type 'Symbol' is not iterable""], 'expression18': ['OA'], 'expression19': ['(False, False)'], 'expression20': ['False'], 'expression21': [""I don't understand this\nsinOAH ==MH/AH == 2/3  ==  cosOAH == √(5)/3\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""], 'expression22': ['OAP'], 'expression23': [""I don't understand this\nR == AP/2cosOAP == 7/2√(5)/3 == 21/2√(5)\n~~~~~~~~~~~~~~~~~~~~~~^""], 'expression24': [""argument of type 'Symbol' is not iterable""], 'expression25': [""I don't understand this\n BC/2 == √(R^2 - OM'^2) == 3 √(11/5)\n~~~~~~~~~^""], 'expression26': ['ABC'], 'expression27': [""I don't understand this\n[ABC]==BC/2 *(AH + HD) == 3*√(55)  == 3+55 == 058\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~^""]}",{}
